/*----- PROTECTED REGION ID(BaseDeviceClass.h) ENABLED START -----*/
//=============================================================================
//
// file :        BaseDeviceClass.h
//
// description : Include for the BaseDevice root class.
//               This class is the singleton class for
//                the BaseDevice device class.
//               It contains all properties and methods which the 
//               BaseDevice requires only once e.g. the commands.
//
// project :     Base device
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef BaseDeviceClass_H
#define BaseDeviceClass_H

#include <tango.h>
#include <BaseDevice.h>


/*----- PROTECTED REGION END -----*/	//	BaseDeviceClass.h


namespace BaseDevice_ns
{
/*----- PROTECTED REGION ID(BaseDeviceClass::classes for dynamic creation) ENABLED START -----*/


/*----- PROTECTED REGION END -----*/	//	BaseDeviceClass::classes for dynamic creation

//=========================================
//	Define classes for dynamic attributes
//=========================================
//	Attribute dynFloatAttr class definition
class dynFloatAttrAttrib: public Tango::Attr
{
public:
	dynFloatAttrAttrib(const string &att_name):Attr(att_name.c_str(), 
			Tango::DEV_FLOAT, Tango::READ) {};
	~dynFloatAttrAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<BaseDevice *>(dev))->read_dynFloatAttr(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<BaseDevice *>(dev))->is_dynFloatAttr_allowed(ty);}
};

//	Attribute dynDoubleAttr class definition
class dynDoubleAttrAttrib: public Tango::Attr
{
public:
	dynDoubleAttrAttrib(const string &att_name):Attr(att_name.c_str(), 
			Tango::DEV_DOUBLE, Tango::READ) {};
	~dynDoubleAttrAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<BaseDevice *>(dev))->read_dynDoubleAttr(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<BaseDevice *>(dev))->is_dynDoubleAttr_allowed(ty);}
};

//	Attribute dynStringAttr class definition
class dynStringAttrAttrib: public Tango::Attr
{
public:
	dynStringAttrAttrib(const string &att_name):Attr(att_name.c_str(), 
			Tango::DEV_STRING, Tango::READ) {};
	~dynStringAttrAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<BaseDevice *>(dev))->read_dynStringAttr(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<BaseDevice *>(dev))->is_dynStringAttr_allowed(ty);}
};

//	Attribute dynEnumAttr class definition
class dynEnumAttrAttrib: public Tango::Attr
{
public:
	dynEnumAttrAttrib(const string &att_name):Attr(att_name.c_str(), 
			Tango::DEV_ENUM, Tango::READ) {};
	~dynEnumAttrAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<BaseDevice *>(dev))->read_dynEnumAttr(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<BaseDevice *>(dev))->is_dynEnumAttr_allowed(ty);}
	virtual bool same_type(const type_info &in_type) {return typeid(dynEnumAttrEnum) == in_type;}
	virtual string get_enum_type() {return string("dynEnumAttrEnum");}
};

//	Attribute dynLongAttr class definition
class dynLongAttrAttrib: public Tango::Attr
{
public:
	dynLongAttrAttrib(const string &att_name):Attr(att_name.c_str(), 
			Tango::DEV_LONG, Tango::READ) {};
	~dynLongAttrAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<BaseDevice *>(dev))->read_dynLongAttr(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<BaseDevice *>(dev))->is_dynLongAttr_allowed(ty);}
};

//	Attribute dynShortAttr class definition
class dynShortAttrAttrib: public Tango::Attr
{
public:
	dynShortAttrAttrib(const string &att_name):Attr(att_name.c_str(), 
			Tango::DEV_SHORT, Tango::READ) {};
	~dynShortAttrAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<BaseDevice *>(dev))->read_dynShortAttr(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<BaseDevice *>(dev))->is_dynShortAttr_allowed(ty);}
};

//	Attribute dynFloatArrayAttr class definition
class dynFloatArrayAttrAttrib: public Tango::SpectrumAttr
{
public:
	dynFloatArrayAttrAttrib(const string &att_name):SpectrumAttr(att_name.c_str(), 
			Tango::DEV_FLOAT, Tango::READ, 1000) {};
	~dynFloatArrayAttrAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<BaseDevice *>(dev))->read_dynFloatArrayAttr(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<BaseDevice *>(dev))->is_dynFloatArrayAttr_allowed(ty);}
};

//	Attribute dynDoubleArrayAttr class definition
class dynDoubleArrayAttrAttrib: public Tango::SpectrumAttr
{
public:
	dynDoubleArrayAttrAttrib(const string &att_name):SpectrumAttr(att_name.c_str(), 
			Tango::DEV_DOUBLE, Tango::READ, 1000) {};
	~dynDoubleArrayAttrAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<BaseDevice *>(dev))->read_dynDoubleArrayAttr(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<BaseDevice *>(dev))->is_dynDoubleArrayAttr_allowed(ty);}
};

//	Attribute dynStringArrayAttr class definition
class dynStringArrayAttrAttrib: public Tango::SpectrumAttr
{
public:
	dynStringArrayAttrAttrib(const string &att_name):SpectrumAttr(att_name.c_str(), 
			Tango::DEV_STRING, Tango::READ, 1000) {};
	~dynStringArrayAttrAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<BaseDevice *>(dev))->read_dynStringArrayAttr(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<BaseDevice *>(dev))->is_dynStringArrayAttr_allowed(ty);}
};

//	Attribute dynLongArrayAttr class definition
class dynLongArrayAttrAttrib: public Tango::SpectrumAttr
{
public:
	dynLongArrayAttrAttrib(const string &att_name):SpectrumAttr(att_name.c_str(), 
			Tango::DEV_LONG, Tango::READ, 1000) {};
	~dynLongArrayAttrAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<BaseDevice *>(dev))->read_dynLongArrayAttr(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<BaseDevice *>(dev))->is_dynLongArrayAttr_allowed(ty);}
};

//	Attribute dynShortArrayAttr class definition
class dynShortArrayAttrAttrib: public Tango::SpectrumAttr
{
public:
	dynShortArrayAttrAttrib(const string &att_name):SpectrumAttr(att_name.c_str(), 
			Tango::DEV_SHORT, Tango::READ, 1000) {};
	~dynShortArrayAttrAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<BaseDevice *>(dev))->read_dynShortArrayAttr(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<BaseDevice *>(dev))->is_dynShortArrayAttr_allowed(ty);}
};


//=========================================
//	Define classes for commands
//=========================================
//	Command DevConfigure class definition
class DevConfigureClass : public Tango::Command
{
public:
	DevConfigureClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	DevConfigureClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~DevConfigureClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<BaseDevice *>(dev))->is_DevConfigure_allowed(any);}
};

//	Command RestoreDevConfig class definition
class RestoreDevConfigClass : public Tango::Command
{
public:
	RestoreDevConfigClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	RestoreDevConfigClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~RestoreDevConfigClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<BaseDevice *>(dev))->is_RestoreDevConfig_allowed(any);}
};

//	Command RemoveAttr class definition
class RemoveAttrClass : public Tango::Command
{
public:
	RemoveAttrClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	RemoveAttrClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~RemoveAttrClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<BaseDevice *>(dev))->is_RemoveAttr_allowed(any);}
};

//	Command RemoveAttrs class definition
class RemoveAttrsClass : public Tango::Command
{
public:
	RemoveAttrsClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	RemoveAttrsClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~RemoveAttrsClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<BaseDevice *>(dev))->is_RemoveAttrs_allowed(any);}
};

//	Command SubscribeAttr class definition
class SubscribeAttrClass : public Tango::Command
{
public:
	SubscribeAttrClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SubscribeAttrClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SubscribeAttrClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<BaseDevice *>(dev))->is_SubscribeAttr_allowed(any);}
};

//	Command UnsubscribeAttr class definition
class UnsubscribeAttrClass : public Tango::Command
{
public:
	UnsubscribeAttrClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	UnsubscribeAttrClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~UnsubscribeAttrClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<BaseDevice *>(dev))->is_UnsubscribeAttr_allowed(any);}
};

//	Command SubscribeAttrs class definition
class SubscribeAttrsClass : public Tango::Command
{
public:
	SubscribeAttrsClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SubscribeAttrsClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SubscribeAttrsClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<BaseDevice *>(dev))->is_SubscribeAttrs_allowed(any);}
};

//	Command UnsubscribeAttrs class definition
class UnsubscribeAttrsClass : public Tango::Command
{
public:
	UnsubscribeAttrsClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	UnsubscribeAttrsClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~UnsubscribeAttrsClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<BaseDevice *>(dev))->is_UnsubscribeAttrs_allowed(any);}
};


/**
 *	The BaseDeviceClass singleton definition
 */

#ifdef _TG_WINDOWS_
class __declspec(dllexport)  BaseDeviceClass : public Tango::DeviceClass
#else
class BaseDeviceClass : public Tango::DeviceClass
#endif
{
	/*----- PROTECTED REGION ID(BaseDeviceClass::Additionnal DServer data members) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	BaseDeviceClass::Additionnal DServer data members

	public:
		//	write class properties data members
		Tango::DbData	cl_prop;
		Tango::DbData	cl_def_prop;
		Tango::DbData	dev_def_prop;
	
		//	Method prototypes
		static BaseDeviceClass *init(const char *);
		static BaseDeviceClass *instance();
		~BaseDeviceClass();
		Tango::DbDatum	get_class_property(string &);
		Tango::DbDatum	get_default_device_property(string &);
		Tango::DbDatum	get_default_class_property(string &);
	
	protected:
		BaseDeviceClass(string &);
		static BaseDeviceClass *_instance;
		void command_factory();
		void attribute_factory(vector<Tango::Attr *> &);
		void pipe_factory();
		void write_class_property();
		void set_default_property();
		void get_class_property();
		string get_cvstag();
		string get_cvsroot();
	
	private:
		void device_factory(const Tango::DevVarStringArray *);
		void create_static_attribute_list(vector<Tango::Attr *> &);
		void erase_dynamic_attributes(const Tango::DevVarStringArray *,vector<Tango::Attr *> &);
		vector<string>	defaultAttList;
		Tango::Attr *get_attr_object_by_name(vector<Tango::Attr *> &att_list, string attname);
};

}	//	End of namespace

#endif   //	BaseDevice_H
