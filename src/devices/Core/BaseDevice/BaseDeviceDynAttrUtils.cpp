/*----- PROTECTED REGION ID(BaseDevice::DynAttrUtils.cpp) ENABLED START -----*/
static const char *RcsId = "$Id:  $";
//=============================================================================
//
// file :        BaseDeviceDynAttrUtils.cpp
//
// description : Dynamic attributes utilities file for the BaseDevice class
//
// project :     Base device
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <BaseDevice.h>
#include <BaseDeviceClass.h>

/*----- PROTECTED REGION END -----*/	//	BaseDevice::DynAttrUtils.cpp

//================================================================
//  Attributes managed are:
//================================================================
//  dynFloatAttr        |  Tango::DevFloat	Scalar
//  dynDoubleAttr       |  Tango::DevDouble	Scalar
//  dynStringAttr       |  Tango::DevString	Scalar
//  dynEnumAttr         |  Tango::DevEnum	Scalar
//  dynLongAttr         |  Tango::DevLong	Scalar
//  dynShortAttr        |  Tango::DevShort	Scalar
//  dynFloatArrayAttr   |  Tango::DevFloat	Spectrum  ( max = 1000)
//  dynDoubleArrayAttr  |  Tango::DevDouble	Spectrum  ( max = 1000)
//  dynStringArrayAttr  |  Tango::DevString	Spectrum  ( max = 1000)
//  dynLongArrayAttr    |  Tango::DevLong	Spectrum  ( max = 1000)
//  dynShortArrayAttr   |  Tango::DevShort	Spectrum  ( max = 1000)
//================================================================

//	For compatibility reason, this file (BaseDeviceDynAttrUtils)
//	manage also the dynamic command utilities.
//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name  |  Method name
//================================================================
//================================================================

namespace BaseDevice_ns
{
//=============================================================
//	Add/Remove dynamic attribute methods
//=============================================================

//--------------------------------------------------------
/**
 *	Add a dynFloatAttr dynamic attribute.
 *
 *  parameter attname: attribute name to be cretated and added.
 */
//--------------------------------------------------------
void BaseDevice::add_dynFloatAttr_dynamic_attribute(string attname)
{
	//	Attribute : dynFloatAttr
	dynFloatAttrAttrib	*dynfloatattr = new dynFloatAttrAttrib(attname);
	Tango::UserDefaultAttrProp	dynfloatattr_prop;
	dynfloatattr_prop.set_description("This is a template float dyn attr");
	//	label	not set for dynFloatAttr
	//	unit	not set for dynFloatAttr
	//	standard_unit	not set for dynFloatAttr
	//	display_unit	not set for dynFloatAttr
	//	format	not set for dynFloatAttr
	//	max_value	not set for dynFloatAttr
	//	min_value	not set for dynFloatAttr
	//	max_alarm	not set for dynFloatAttr
	//	min_alarm	not set for dynFloatAttr
	//	max_warning	not set for dynFloatAttr
	//	min_warning	not set for dynFloatAttr
	//	delta_t	not set for dynFloatAttr
	//	delta_val	not set for dynFloatAttr
	
	/*----- PROTECTED REGION ID(BaseDevice::att_dynFloatAttr_dynamic_attribute) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	BaseDevice::att_dynFloatAttr_dynamic_attribute
	dynfloatattr->set_default_properties(dynfloatattr_prop);
	//	Not Polled
	dynfloatattr->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	dynFloatAttr_data.insert(make_pair(attname, 0.0));
	add_attribute(dynfloatattr);
}
//--------------------------------------------------------
/**
 *	remove a dynFloatAttr dynamic attribute.
 *
 *  parameter attname: attribute name to be removed.
 */
//--------------------------------------------------------
void BaseDevice::remove_dynFloatAttr_dynamic_attribute(string attname)
{
	remove_attribute(attname, true);
	map<string,Tango::DevFloat>::iterator ite;
    if ((ite=dynFloatAttr_data.find(attname))!=dynFloatAttr_data.end())
    {
    	/*----- PROTECTED REGION ID(BaseDevice::remove_dynFloatAttr_dynamic_attribute) ENABLED START -----*/
    	
    	/*----- PROTECTED REGION END -----*/	//	BaseDevice::remove_dynFloatAttr_dynamic_attribute
		dynFloatAttr_data.erase(ite);
	}
}
//--------------------------------------------------------
/**
 *	Add a dynDoubleAttr dynamic attribute.
 *
 *  parameter attname: attribute name to be cretated and added.
 */
//--------------------------------------------------------
void BaseDevice::add_dynDoubleAttr_dynamic_attribute(string attname)
{
	//	Attribute : dynDoubleAttr
	dynDoubleAttrAttrib	*dyndoubleattr = new dynDoubleAttrAttrib(attname);
	Tango::UserDefaultAttrProp	dyndoubleattr_prop;
	//	description	not set for dynDoubleAttr
	//	label	not set for dynDoubleAttr
	//	unit	not set for dynDoubleAttr
	//	standard_unit	not set for dynDoubleAttr
	//	display_unit	not set for dynDoubleAttr
	//	format	not set for dynDoubleAttr
	//	max_value	not set for dynDoubleAttr
	//	min_value	not set for dynDoubleAttr
	//	max_alarm	not set for dynDoubleAttr
	//	min_alarm	not set for dynDoubleAttr
	//	max_warning	not set for dynDoubleAttr
	//	min_warning	not set for dynDoubleAttr
	//	delta_t	not set for dynDoubleAttr
	//	delta_val	not set for dynDoubleAttr
	
	/*----- PROTECTED REGION ID(BaseDevice::att_dynDoubleAttr_dynamic_attribute) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	BaseDevice::att_dynDoubleAttr_dynamic_attribute
	dyndoubleattr->set_default_properties(dyndoubleattr_prop);
	//	Not Polled
	dyndoubleattr->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	dynDoubleAttr_data.insert(make_pair(attname, 0.0));
	add_attribute(dyndoubleattr);
}
//--------------------------------------------------------
/**
 *	remove a dynDoubleAttr dynamic attribute.
 *
 *  parameter attname: attribute name to be removed.
 */
//--------------------------------------------------------
void BaseDevice::remove_dynDoubleAttr_dynamic_attribute(string attname)
{
	remove_attribute(attname, true);
	map<string,Tango::DevDouble>::iterator ite;
    if ((ite=dynDoubleAttr_data.find(attname))!=dynDoubleAttr_data.end())
    {
    	/*----- PROTECTED REGION ID(BaseDevice::remove_dynDoubleAttr_dynamic_attribute) ENABLED START -----*/
    	
    	/*----- PROTECTED REGION END -----*/	//	BaseDevice::remove_dynDoubleAttr_dynamic_attribute
		dynDoubleAttr_data.erase(ite);
	}
}
//--------------------------------------------------------
/**
 *	Add a dynStringAttr dynamic attribute.
 *
 *  parameter attname: attribute name to be cretated and added.
 */
//--------------------------------------------------------
void BaseDevice::add_dynStringAttr_dynamic_attribute(string attname)
{
	//	Attribute : dynStringAttr
	dynStringAttrAttrib	*dynstringattr = new dynStringAttrAttrib(attname);
	Tango::UserDefaultAttrProp	dynstringattr_prop;
	//	description	not set for dynStringAttr
	//	label	not set for dynStringAttr
	//	unit	not set for dynStringAttr
	//	standard_unit	not set for dynStringAttr
	//	display_unit	not set for dynStringAttr
	//	format	not set for dynStringAttr
	//	max_value	not set for dynStringAttr
	//	min_value	not set for dynStringAttr
	//	max_alarm	not set for dynStringAttr
	//	min_alarm	not set for dynStringAttr
	//	max_warning	not set for dynStringAttr
	//	min_warning	not set for dynStringAttr
	//	delta_t	not set for dynStringAttr
	//	delta_val	not set for dynStringAttr
	
	/*----- PROTECTED REGION ID(BaseDevice::att_dynStringAttr_dynamic_attribute) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	BaseDevice::att_dynStringAttr_dynamic_attribute
	dynstringattr->set_default_properties(dynstringattr_prop);
	//	Not Polled
	dynstringattr->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	char array[1];
	array[0] = '\0';
	dynStringAttr_data.insert(make_pair(attname, array));
	add_attribute(dynstringattr);
}
//--------------------------------------------------------
/**
 *	remove a dynStringAttr dynamic attribute.
 *
 *  parameter attname: attribute name to be removed.
 */
//--------------------------------------------------------
void BaseDevice::remove_dynStringAttr_dynamic_attribute(string attname)
{
	remove_attribute(attname, true);
	map<string,Tango::DevString>::iterator ite;
    if ((ite=dynStringAttr_data.find(attname))!=dynStringAttr_data.end())
    {
    	/*----- PROTECTED REGION ID(BaseDevice::remove_dynStringAttr_dynamic_attribute) ENABLED START -----*/
    	
    	/*----- PROTECTED REGION END -----*/	//	BaseDevice::remove_dynStringAttr_dynamic_attribute
		dynStringAttr_data.erase(ite);
	}
}
//--------------------------------------------------------
/**
 *	Add a dynEnumAttr dynamic attribute.
 *
 *  parameter attname: attribute name to be cretated and added.
 */
//--------------------------------------------------------
void BaseDevice::add_dynEnumAttr_dynamic_attribute(string attname)
{
	//	Attribute : dynEnumAttr
	dynEnumAttrAttrib	*dynenumattr = new dynEnumAttrAttrib(attname);
	Tango::UserDefaultAttrProp	dynenumattr_prop;
	//	description	not set for dynEnumAttr
	//	label	not set for dynEnumAttr
	//	unit	not set for dynEnumAttr
	//	standard_unit	not set for dynEnumAttr
	//	display_unit	not set for dynEnumAttr
	//	format	not set for dynEnumAttr
	//	max_value	not set for dynEnumAttr
	//	min_value	not set for dynEnumAttr
	//	max_alarm	not set for dynEnumAttr
	//	min_alarm	not set for dynEnumAttr
	//	max_warning	not set for dynEnumAttr
	//	min_warning	not set for dynEnumAttr
	//	delta_t	not set for dynEnumAttr
	//	delta_val	not set for dynEnumAttr
	
	/*----- PROTECTED REGION ID(BaseDevice::att_dynEnumAttr_dynamic_attribute) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	BaseDevice::att_dynEnumAttr_dynamic_attribute
	dynenumattr->set_default_properties(dynenumattr_prop);
	//	Not Polled
	dynenumattr->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	dynEnumAttr_data.insert(make_pair(attname, 0));
	add_attribute(dynenumattr);
}
//--------------------------------------------------------
/**
 *	remove a dynEnumAttr dynamic attribute.
 *
 *  parameter attname: attribute name to be removed.
 */
//--------------------------------------------------------
void BaseDevice::remove_dynEnumAttr_dynamic_attribute(string attname)
{
	remove_attribute(attname, true);
	map<string,Tango::DevEnum>::iterator ite;
    if ((ite=dynEnumAttr_data.find(attname))!=dynEnumAttr_data.end())
    {
    	/*----- PROTECTED REGION ID(BaseDevice::remove_dynEnumAttr_dynamic_attribute) ENABLED START -----*/
    	
    	/*----- PROTECTED REGION END -----*/	//	BaseDevice::remove_dynEnumAttr_dynamic_attribute
		dynEnumAttr_data.erase(ite);
	}
}
//--------------------------------------------------------
/**
 *	Add a dynLongAttr dynamic attribute.
 *
 *  parameter attname: attribute name to be cretated and added.
 */
//--------------------------------------------------------
void BaseDevice::add_dynLongAttr_dynamic_attribute(string attname)
{
	//	Attribute : dynLongAttr
	dynLongAttrAttrib	*dynlongattr = new dynLongAttrAttrib(attname);
	Tango::UserDefaultAttrProp	dynlongattr_prop;
	//	description	not set for dynLongAttr
	//	label	not set for dynLongAttr
	//	unit	not set for dynLongAttr
	//	standard_unit	not set for dynLongAttr
	//	display_unit	not set for dynLongAttr
	//	format	not set for dynLongAttr
	//	max_value	not set for dynLongAttr
	//	min_value	not set for dynLongAttr
	//	max_alarm	not set for dynLongAttr
	//	min_alarm	not set for dynLongAttr
	//	max_warning	not set for dynLongAttr
	//	min_warning	not set for dynLongAttr
	//	delta_t	not set for dynLongAttr
	//	delta_val	not set for dynLongAttr
	
	/*----- PROTECTED REGION ID(BaseDevice::att_dynLongAttr_dynamic_attribute) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	BaseDevice::att_dynLongAttr_dynamic_attribute
	dynlongattr->set_default_properties(dynlongattr_prop);
	//	Not Polled
	dynlongattr->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	dynLongAttr_data.insert(make_pair(attname, 0));
	add_attribute(dynlongattr);
}
//--------------------------------------------------------
/**
 *	remove a dynLongAttr dynamic attribute.
 *
 *  parameter attname: attribute name to be removed.
 */
//--------------------------------------------------------
void BaseDevice::remove_dynLongAttr_dynamic_attribute(string attname)
{
	remove_attribute(attname, true);
	map<string,Tango::DevLong>::iterator ite;
    if ((ite=dynLongAttr_data.find(attname))!=dynLongAttr_data.end())
    {
    	/*----- PROTECTED REGION ID(BaseDevice::remove_dynLongAttr_dynamic_attribute) ENABLED START -----*/
    	
    	/*----- PROTECTED REGION END -----*/	//	BaseDevice::remove_dynLongAttr_dynamic_attribute
		dynLongAttr_data.erase(ite);
	}
}
//--------------------------------------------------------
/**
 *	Add a dynShortAttr dynamic attribute.
 *
 *  parameter attname: attribute name to be cretated and added.
 */
//--------------------------------------------------------
void BaseDevice::add_dynShortAttr_dynamic_attribute(string attname)
{
	//	Attribute : dynShortAttr
	dynShortAttrAttrib	*dynshortattr = new dynShortAttrAttrib(attname);
	Tango::UserDefaultAttrProp	dynshortattr_prop;
	//	description	not set for dynShortAttr
	//	label	not set for dynShortAttr
	//	unit	not set for dynShortAttr
	//	standard_unit	not set for dynShortAttr
	//	display_unit	not set for dynShortAttr
	//	format	not set for dynShortAttr
	//	max_value	not set for dynShortAttr
	//	min_value	not set for dynShortAttr
	//	max_alarm	not set for dynShortAttr
	//	min_alarm	not set for dynShortAttr
	//	max_warning	not set for dynShortAttr
	//	min_warning	not set for dynShortAttr
	//	delta_t	not set for dynShortAttr
	//	delta_val	not set for dynShortAttr
	
	/*----- PROTECTED REGION ID(BaseDevice::att_dynShortAttr_dynamic_attribute) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	BaseDevice::att_dynShortAttr_dynamic_attribute
	dynshortattr->set_default_properties(dynshortattr_prop);
	//	Not Polled
	dynshortattr->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	dynShortAttr_data.insert(make_pair(attname, 0));
	add_attribute(dynshortattr);
}
//--------------------------------------------------------
/**
 *	remove a dynShortAttr dynamic attribute.
 *
 *  parameter attname: attribute name to be removed.
 */
//--------------------------------------------------------
void BaseDevice::remove_dynShortAttr_dynamic_attribute(string attname)
{
	remove_attribute(attname, true);
	map<string,Tango::DevShort>::iterator ite;
    if ((ite=dynShortAttr_data.find(attname))!=dynShortAttr_data.end())
    {
    	/*----- PROTECTED REGION ID(BaseDevice::remove_dynShortAttr_dynamic_attribute) ENABLED START -----*/
    	
    	/*----- PROTECTED REGION END -----*/	//	BaseDevice::remove_dynShortAttr_dynamic_attribute
		dynShortAttr_data.erase(ite);
	}
}
//--------------------------------------------------------
/**
 *	Add a dynFloatArrayAttr dynamic attribute.
 *
 *  parameter attname: attribute name to be cretated and added.
 *  parameter ptr:     memory buffer used to set attribute value.
 *                     If NULL or not specified, buffer will be allocated.
 */
//--------------------------------------------------------
void BaseDevice::add_dynFloatArrayAttr_dynamic_attribute(string attname, Tango::DevFloat *ptr)
{
	//	Attribute : dynFloatArrayAttr
	if (ptr==NULL)
		ptr = new Tango::DevFloat[1000];
	dynFloatArrayAttrAttrib	*dynfloatarrayattr = new dynFloatArrayAttrAttrib(attname);
	Tango::UserDefaultAttrProp	dynfloatarrayattr_prop;
	//	description	not set for dynFloatArrayAttr
	//	label	not set for dynFloatArrayAttr
	//	unit	not set for dynFloatArrayAttr
	//	standard_unit	not set for dynFloatArrayAttr
	//	display_unit	not set for dynFloatArrayAttr
	//	format	not set for dynFloatArrayAttr
	//	max_value	not set for dynFloatArrayAttr
	//	min_value	not set for dynFloatArrayAttr
	//	max_alarm	not set for dynFloatArrayAttr
	//	min_alarm	not set for dynFloatArrayAttr
	//	max_warning	not set for dynFloatArrayAttr
	//	min_warning	not set for dynFloatArrayAttr
	//	delta_t	not set for dynFloatArrayAttr
	//	delta_val	not set for dynFloatArrayAttr
	
	/*----- PROTECTED REGION ID(BaseDevice::att_dynFloatArrayAttr_dynamic_attribute) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	BaseDevice::att_dynFloatArrayAttr_dynamic_attribute
	dynfloatarrayattr->set_default_properties(dynfloatarrayattr_prop);
	//	Not Polled
	dynfloatarrayattr->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	dynFloatArrayAttr_data.insert(make_pair(attname, ptr));
	add_attribute(dynfloatarrayattr);
}
//--------------------------------------------------------
/**
 *	remove a dynFloatArrayAttr dynamic attribute.
 *
 *  parameter attname: attribute name to be removed.
 *  parameter free_it: memory buffer will be freed if true or not specified.
 */
//--------------------------------------------------------
void BaseDevice::remove_dynFloatArrayAttr_dynamic_attribute(string attname, bool free_it)
{
	remove_attribute(attname, true);
	map<string,Tango::DevFloat *>::iterator ite;
    if ((ite=dynFloatArrayAttr_data.find(attname))!=dynFloatArrayAttr_data.end())
    {
    	/*----- PROTECTED REGION ID(BaseDevice::remove_dynFloatArrayAttr_dynamic_attribute) ENABLED START -----*/
    	
    	/*----- PROTECTED REGION END -----*/	//	BaseDevice::remove_dynFloatArrayAttr_dynamic_attribute
		if (free_it)
			delete[] ite->second;
		dynFloatArrayAttr_data.erase(ite);
	}
}
//--------------------------------------------------------
/**
 *	Add a dynDoubleArrayAttr dynamic attribute.
 *
 *  parameter attname: attribute name to be cretated and added.
 *  parameter ptr:     memory buffer used to set attribute value.
 *                     If NULL or not specified, buffer will be allocated.
 */
//--------------------------------------------------------
void BaseDevice::add_dynDoubleArrayAttr_dynamic_attribute(string attname, Tango::DevDouble *ptr)
{
	//	Attribute : dynDoubleArrayAttr
	if (ptr==NULL)
		ptr = new Tango::DevDouble[1000];
	dynDoubleArrayAttrAttrib	*dyndoublearrayattr = new dynDoubleArrayAttrAttrib(attname);
	Tango::UserDefaultAttrProp	dyndoublearrayattr_prop;
	//	description	not set for dynDoubleArrayAttr
	//	label	not set for dynDoubleArrayAttr
	//	unit	not set for dynDoubleArrayAttr
	//	standard_unit	not set for dynDoubleArrayAttr
	//	display_unit	not set for dynDoubleArrayAttr
	//	format	not set for dynDoubleArrayAttr
	//	max_value	not set for dynDoubleArrayAttr
	//	min_value	not set for dynDoubleArrayAttr
	//	max_alarm	not set for dynDoubleArrayAttr
	//	min_alarm	not set for dynDoubleArrayAttr
	//	max_warning	not set for dynDoubleArrayAttr
	//	min_warning	not set for dynDoubleArrayAttr
	//	delta_t	not set for dynDoubleArrayAttr
	//	delta_val	not set for dynDoubleArrayAttr
	
	/*----- PROTECTED REGION ID(BaseDevice::att_dynDoubleArrayAttr_dynamic_attribute) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	BaseDevice::att_dynDoubleArrayAttr_dynamic_attribute
	dyndoublearrayattr->set_default_properties(dyndoublearrayattr_prop);
	//	Not Polled
	dyndoublearrayattr->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	dynDoubleArrayAttr_data.insert(make_pair(attname, ptr));
	add_attribute(dyndoublearrayattr);
}
//--------------------------------------------------------
/**
 *	remove a dynDoubleArrayAttr dynamic attribute.
 *
 *  parameter attname: attribute name to be removed.
 *  parameter free_it: memory buffer will be freed if true or not specified.
 */
//--------------------------------------------------------
void BaseDevice::remove_dynDoubleArrayAttr_dynamic_attribute(string attname, bool free_it)
{
	remove_attribute(attname, true);
	map<string,Tango::DevDouble *>::iterator ite;
    if ((ite=dynDoubleArrayAttr_data.find(attname))!=dynDoubleArrayAttr_data.end())
    {
    	/*----- PROTECTED REGION ID(BaseDevice::remove_dynDoubleArrayAttr_dynamic_attribute) ENABLED START -----*/
    	
    	/*----- PROTECTED REGION END -----*/	//	BaseDevice::remove_dynDoubleArrayAttr_dynamic_attribute
		if (free_it)
			delete[] ite->second;
		dynDoubleArrayAttr_data.erase(ite);
	}
}
//--------------------------------------------------------
/**
 *	Add a dynStringArrayAttr dynamic attribute.
 *
 *  parameter attname: attribute name to be cretated and added.
 *  parameter ptr:     memory buffer used to set attribute value.
 *                     If NULL or not specified, buffer will be allocated.
 */
//--------------------------------------------------------
void BaseDevice::add_dynStringArrayAttr_dynamic_attribute(string attname, Tango::DevString *ptr)
{
	//	Attribute : dynStringArrayAttr
	if (ptr==NULL)
		ptr = new Tango::DevString[1000];
	dynStringArrayAttrAttrib	*dynstringarrayattr = new dynStringArrayAttrAttrib(attname);
	Tango::UserDefaultAttrProp	dynstringarrayattr_prop;
	//	description	not set for dynStringArrayAttr
	//	label	not set for dynStringArrayAttr
	//	unit	not set for dynStringArrayAttr
	//	standard_unit	not set for dynStringArrayAttr
	//	display_unit	not set for dynStringArrayAttr
	//	format	not set for dynStringArrayAttr
	//	max_value	not set for dynStringArrayAttr
	//	min_value	not set for dynStringArrayAttr
	//	max_alarm	not set for dynStringArrayAttr
	//	min_alarm	not set for dynStringArrayAttr
	//	max_warning	not set for dynStringArrayAttr
	//	min_warning	not set for dynStringArrayAttr
	//	delta_t	not set for dynStringArrayAttr
	//	delta_val	not set for dynStringArrayAttr
	
	/*----- PROTECTED REGION ID(BaseDevice::att_dynStringArrayAttr_dynamic_attribute) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	BaseDevice::att_dynStringArrayAttr_dynamic_attribute
	dynstringarrayattr->set_default_properties(dynstringarrayattr_prop);
	//	Not Polled
	dynstringarrayattr->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	char array[1];
	array[0] = '\0';
	dynStringArrayAttr_data.insert(make_pair(attname, ptr));
	add_attribute(dynstringarrayattr);
}
//--------------------------------------------------------
/**
 *	remove a dynStringArrayAttr dynamic attribute.
 *
 *  parameter attname: attribute name to be removed.
 *  parameter free_it: memory buffer will be freed if true or not specified.
 */
//--------------------------------------------------------
void BaseDevice::remove_dynStringArrayAttr_dynamic_attribute(string attname, bool free_it)
{
	remove_attribute(attname, true);
	map<string,Tango::DevString *>::iterator ite;
    if ((ite=dynStringArrayAttr_data.find(attname))!=dynStringArrayAttr_data.end())
    {
    	/*----- PROTECTED REGION ID(BaseDevice::remove_dynStringArrayAttr_dynamic_attribute) ENABLED START -----*/
    	
    	/*----- PROTECTED REGION END -----*/	//	BaseDevice::remove_dynStringArrayAttr_dynamic_attribute
		if (free_it)
			delete[] ite->second;
		dynStringArrayAttr_data.erase(ite);
	}
}
//--------------------------------------------------------
/**
 *	Add a dynLongArrayAttr dynamic attribute.
 *
 *  parameter attname: attribute name to be cretated and added.
 *  parameter ptr:     memory buffer used to set attribute value.
 *                     If NULL or not specified, buffer will be allocated.
 */
//--------------------------------------------------------
void BaseDevice::add_dynLongArrayAttr_dynamic_attribute(string attname, Tango::DevLong *ptr)
{
	//	Attribute : dynLongArrayAttr
	if (ptr==NULL)
		ptr = new Tango::DevLong[1000];
	dynLongArrayAttrAttrib	*dynlongarrayattr = new dynLongArrayAttrAttrib(attname);
	Tango::UserDefaultAttrProp	dynlongarrayattr_prop;
	//	description	not set for dynLongArrayAttr
	//	label	not set for dynLongArrayAttr
	//	unit	not set for dynLongArrayAttr
	//	standard_unit	not set for dynLongArrayAttr
	//	display_unit	not set for dynLongArrayAttr
	//	format	not set for dynLongArrayAttr
	//	max_value	not set for dynLongArrayAttr
	//	min_value	not set for dynLongArrayAttr
	//	max_alarm	not set for dynLongArrayAttr
	//	min_alarm	not set for dynLongArrayAttr
	//	max_warning	not set for dynLongArrayAttr
	//	min_warning	not set for dynLongArrayAttr
	//	delta_t	not set for dynLongArrayAttr
	//	delta_val	not set for dynLongArrayAttr
	
	/*----- PROTECTED REGION ID(BaseDevice::att_dynLongArrayAttr_dynamic_attribute) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	BaseDevice::att_dynLongArrayAttr_dynamic_attribute
	dynlongarrayattr->set_default_properties(dynlongarrayattr_prop);
	//	Not Polled
	dynlongarrayattr->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	dynLongArrayAttr_data.insert(make_pair(attname, ptr));
	add_attribute(dynlongarrayattr);
}
//--------------------------------------------------------
/**
 *	remove a dynLongArrayAttr dynamic attribute.
 *
 *  parameter attname: attribute name to be removed.
 *  parameter free_it: memory buffer will be freed if true or not specified.
 */
//--------------------------------------------------------
void BaseDevice::remove_dynLongArrayAttr_dynamic_attribute(string attname, bool free_it)
{
	remove_attribute(attname, true);
	map<string,Tango::DevLong *>::iterator ite;
    if ((ite=dynLongArrayAttr_data.find(attname))!=dynLongArrayAttr_data.end())
    {
    	/*----- PROTECTED REGION ID(BaseDevice::remove_dynLongArrayAttr_dynamic_attribute) ENABLED START -----*/
    	
    	/*----- PROTECTED REGION END -----*/	//	BaseDevice::remove_dynLongArrayAttr_dynamic_attribute
		if (free_it)
			delete[] ite->second;
		dynLongArrayAttr_data.erase(ite);
	}
}
//--------------------------------------------------------
/**
 *	Add a dynShortArrayAttr dynamic attribute.
 *
 *  parameter attname: attribute name to be cretated and added.
 *  parameter ptr:     memory buffer used to set attribute value.
 *                     If NULL or not specified, buffer will be allocated.
 */
//--------------------------------------------------------
void BaseDevice::add_dynShortArrayAttr_dynamic_attribute(string attname, Tango::DevShort *ptr)
{
	//	Attribute : dynShortArrayAttr
	if (ptr==NULL)
		ptr = new Tango::DevShort[1000];
	dynShortArrayAttrAttrib	*dynshortarrayattr = new dynShortArrayAttrAttrib(attname);
	Tango::UserDefaultAttrProp	dynshortarrayattr_prop;
	//	description	not set for dynShortArrayAttr
	//	label	not set for dynShortArrayAttr
	//	unit	not set for dynShortArrayAttr
	//	standard_unit	not set for dynShortArrayAttr
	//	display_unit	not set for dynShortArrayAttr
	//	format	not set for dynShortArrayAttr
	//	max_value	not set for dynShortArrayAttr
	//	min_value	not set for dynShortArrayAttr
	//	max_alarm	not set for dynShortArrayAttr
	//	min_alarm	not set for dynShortArrayAttr
	//	max_warning	not set for dynShortArrayAttr
	//	min_warning	not set for dynShortArrayAttr
	//	delta_t	not set for dynShortArrayAttr
	//	delta_val	not set for dynShortArrayAttr
	
	/*----- PROTECTED REGION ID(BaseDevice::att_dynShortArrayAttr_dynamic_attribute) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	BaseDevice::att_dynShortArrayAttr_dynamic_attribute
	dynshortarrayattr->set_default_properties(dynshortarrayattr_prop);
	//	Not Polled
	dynshortarrayattr->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	dynShortArrayAttr_data.insert(make_pair(attname, ptr));
	add_attribute(dynshortarrayattr);
}
//--------------------------------------------------------
/**
 *	remove a dynShortArrayAttr dynamic attribute.
 *
 *  parameter attname: attribute name to be removed.
 *  parameter free_it: memory buffer will be freed if true or not specified.
 */
//--------------------------------------------------------
void BaseDevice::remove_dynShortArrayAttr_dynamic_attribute(string attname, bool free_it)
{
	remove_attribute(attname, true);
	map<string,Tango::DevShort *>::iterator ite;
    if ((ite=dynShortArrayAttr_data.find(attname))!=dynShortArrayAttr_data.end())
    {
    	/*----- PROTECTED REGION ID(BaseDevice::remove_dynShortArrayAttr_dynamic_attribute) ENABLED START -----*/
    	
    	/*----- PROTECTED REGION END -----*/	//	BaseDevice::remove_dynShortArrayAttr_dynamic_attribute
		if (free_it)
			delete[] ite->second;
		dynShortArrayAttr_data.erase(ite);
	}
}


//============================================================
//	Tool methods to get pointer on attribute data buffer 
//============================================================
//--------------------------------------------------------
/**
 *	Return a pointer on dynFloatAttr data.
 *
 *  parameter attname: the specified attribute name.
 */
//--------------------------------------------------------
Tango::DevFloat *BaseDevice::get_dynFloatAttr_data_ptr(string &name)
{
	map<string,Tango::DevFloat>::iterator ite;
    if ((ite=dynFloatAttr_data.find(name))==dynFloatAttr_data.end())
    {
		TangoSys_OMemStream	tms;
		tms << "Dynamic attribute " << name << " has not been created";
		Tango::Except::throw_exception(
					(const char *)"ATTRIBUTE_NOT_FOUND",
					tms.str().c_str(),
					(const char *)"BaseDevice::get_dynFloatAttr_data_ptr()");
    }
	return  &(ite->second);
}
//--------------------------------------------------------
/**
 *	Return a pointer on dynDoubleAttr data.
 *
 *  parameter attname: the specified attribute name.
 */
//--------------------------------------------------------
Tango::DevDouble *BaseDevice::get_dynDoubleAttr_data_ptr(string &name)
{
	map<string,Tango::DevDouble>::iterator ite;
    if ((ite=dynDoubleAttr_data.find(name))==dynDoubleAttr_data.end())
    {
		TangoSys_OMemStream	tms;
		tms << "Dynamic attribute " << name << " has not been created";
		Tango::Except::throw_exception(
					(const char *)"ATTRIBUTE_NOT_FOUND",
					tms.str().c_str(),
					(const char *)"BaseDevice::get_dynDoubleAttr_data_ptr()");
    }
	return  &(ite->second);
}
//--------------------------------------------------------
/**
 *	Return a pointer on dynStringAttr data.
 *
 *  parameter attname: the specified attribute name.
 */
//--------------------------------------------------------
Tango::DevString *BaseDevice::get_dynStringAttr_data_ptr(string &name)
{
	map<string,Tango::DevString>::iterator ite;
    if ((ite=dynStringAttr_data.find(name))==dynStringAttr_data.end())
    {
		TangoSys_OMemStream	tms;
		tms << "Dynamic attribute " << name << " has not been created";
		Tango::Except::throw_exception(
					(const char *)"ATTRIBUTE_NOT_FOUND",
					tms.str().c_str(),
					(const char *)"BaseDevice::get_dynStringAttr_data_ptr()");
    }
	return  &(ite->second);
}
//--------------------------------------------------------
/**
 *	Return a pointer on dynEnumAttr data.
 *
 *  parameter attname: the specified attribute name.
 */
//--------------------------------------------------------
Tango::DevEnum *BaseDevice::get_dynEnumAttr_data_ptr(string &name)
{
	map<string,Tango::DevEnum>::iterator ite;
    if ((ite=dynEnumAttr_data.find(name))==dynEnumAttr_data.end())
    {
		TangoSys_OMemStream	tms;
		tms << "Dynamic attribute " << name << " has not been created";
		Tango::Except::throw_exception(
					(const char *)"ATTRIBUTE_NOT_FOUND",
					tms.str().c_str(),
					(const char *)"BaseDevice::get_dynEnumAttr_data_ptr()");
    }
	return  &(ite->second);
}
//--------------------------------------------------------
/**
 *	Return a pointer on dynLongAttr data.
 *
 *  parameter attname: the specified attribute name.
 */
//--------------------------------------------------------
Tango::DevLong *BaseDevice::get_dynLongAttr_data_ptr(string &name)
{
	map<string,Tango::DevLong>::iterator ite;
    if ((ite=dynLongAttr_data.find(name))==dynLongAttr_data.end())
    {
		TangoSys_OMemStream	tms;
		tms << "Dynamic attribute " << name << " has not been created";
		Tango::Except::throw_exception(
					(const char *)"ATTRIBUTE_NOT_FOUND",
					tms.str().c_str(),
					(const char *)"BaseDevice::get_dynLongAttr_data_ptr()");
    }
	return  &(ite->second);
}
//--------------------------------------------------------
/**
 *	Return a pointer on dynShortAttr data.
 *
 *  parameter attname: the specified attribute name.
 */
//--------------------------------------------------------
Tango::DevShort *BaseDevice::get_dynShortAttr_data_ptr(string &name)
{
	map<string,Tango::DevShort>::iterator ite;
    if ((ite=dynShortAttr_data.find(name))==dynShortAttr_data.end())
    {
		TangoSys_OMemStream	tms;
		tms << "Dynamic attribute " << name << " has not been created";
		Tango::Except::throw_exception(
					(const char *)"ATTRIBUTE_NOT_FOUND",
					tms.str().c_str(),
					(const char *)"BaseDevice::get_dynShortAttr_data_ptr()");
    }
	return  &(ite->second);
}
//--------------------------------------------------------
/**
 *	Return a pointer on dynFloatArrayAttr data.
 *
 *  parameter attname: the specified attribute name.
 */
//--------------------------------------------------------
Tango::DevFloat *BaseDevice::get_dynFloatArrayAttr_data_ptr(string &name)
{
	map<string,Tango::DevFloat *>::iterator ite;
    if ((ite=dynFloatArrayAttr_data.find(name))==dynFloatArrayAttr_data.end())
    {
		TangoSys_OMemStream	tms;
		tms << "Dynamic attribute " << name << " has not been created";
		Tango::Except::throw_exception(
					(const char *)"ATTRIBUTE_NOT_FOUND",
					tms.str().c_str(),
					(const char *)"BaseDevice::get_dynFloatArrayAttr_data_ptr()");
    }
	return  ite->second;
}
//--------------------------------------------------------
/**
 *	Return a pointer on dynDoubleArrayAttr data.
 *
 *  parameter attname: the specified attribute name.
 */
//--------------------------------------------------------
Tango::DevDouble *BaseDevice::get_dynDoubleArrayAttr_data_ptr(string &name)
{
	map<string,Tango::DevDouble *>::iterator ite;
    if ((ite=dynDoubleArrayAttr_data.find(name))==dynDoubleArrayAttr_data.end())
    {
		TangoSys_OMemStream	tms;
		tms << "Dynamic attribute " << name << " has not been created";
		Tango::Except::throw_exception(
					(const char *)"ATTRIBUTE_NOT_FOUND",
					tms.str().c_str(),
					(const char *)"BaseDevice::get_dynDoubleArrayAttr_data_ptr()");
    }
	return  ite->second;
}
//--------------------------------------------------------
/**
 *	Return a pointer on dynStringArrayAttr data.
 *
 *  parameter attname: the specified attribute name.
 */
//--------------------------------------------------------
Tango::DevString *BaseDevice::get_dynStringArrayAttr_data_ptr(string &name)
{
	map<string,Tango::DevString *>::iterator ite;
    if ((ite=dynStringArrayAttr_data.find(name))==dynStringArrayAttr_data.end())
    {
		TangoSys_OMemStream	tms;
		tms << "Dynamic attribute " << name << " has not been created";
		Tango::Except::throw_exception(
					(const char *)"ATTRIBUTE_NOT_FOUND",
					tms.str().c_str(),
					(const char *)"BaseDevice::get_dynStringArrayAttr_data_ptr()");
    }
	return  ite->second;
}
//--------------------------------------------------------
/**
 *	Return a pointer on dynLongArrayAttr data.
 *
 *  parameter attname: the specified attribute name.
 */
//--------------------------------------------------------
Tango::DevLong *BaseDevice::get_dynLongArrayAttr_data_ptr(string &name)
{
	map<string,Tango::DevLong *>::iterator ite;
    if ((ite=dynLongArrayAttr_data.find(name))==dynLongArrayAttr_data.end())
    {
		TangoSys_OMemStream	tms;
		tms << "Dynamic attribute " << name << " has not been created";
		Tango::Except::throw_exception(
					(const char *)"ATTRIBUTE_NOT_FOUND",
					tms.str().c_str(),
					(const char *)"BaseDevice::get_dynLongArrayAttr_data_ptr()");
    }
	return  ite->second;
}
//--------------------------------------------------------
/**
 *	Return a pointer on dynShortArrayAttr data.
 *
 *  parameter attname: the specified attribute name.
 */
//--------------------------------------------------------
Tango::DevShort *BaseDevice::get_dynShortArrayAttr_data_ptr(string &name)
{
	map<string,Tango::DevShort *>::iterator ite;
    if ((ite=dynShortArrayAttr_data.find(name))==dynShortArrayAttr_data.end())
    {
		TangoSys_OMemStream	tms;
		tms << "Dynamic attribute " << name << " has not been created";
		Tango::Except::throw_exception(
					(const char *)"ATTRIBUTE_NOT_FOUND",
					tms.str().c_str(),
					(const char *)"BaseDevice::get_dynShortArrayAttr_data_ptr()");
    }
	return  ite->second;
}


//=============================================================
//	Add/Remove dynamic command methods
//=============================================================


} //	namespace
