/*----- PROTECTED REGION ID(RxEmulator.h) ENABLED START -----*/
//=============================================================================
//
// file :        RxEmulator.h
//
// description : Include file for the RxEmulator class
//
// project :     RxEmulator
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef RxEmulator_H
#define RxEmulator_H

#include <tango.h>
#include <SEEmulatorBase.h>

/*
enum class _b1_capabilityStateEnum: short {
	_UNAVAILABLE,
	_STANDBY,
	_OPERATE,
	_CONFIGURE,
} ;
typedef _b1_capabilityStateEnum b1_capabilityStateEnum;

enum class _b2_capabilityStateEnum: short {
	_UNAVAILABLE,
	_STANDBY,
	_OPERATE,
	_CONFIGURE,
} ;
typedef _b2_capabilityStateEnum b2_capabilityStateEnum;

enum class _b3_capabilityStateEnum: short {
	_UNAVAILABLE,
	_STANDBY,
	_OPERATE,
	_CONFIGURE,
} ;
typedef _b3_capabilityStateEnum b3_capabilityStateEnum;

enum class _b4_capabilityStateEnum: short {
	_UNAVAILABLE,
	_STANDBY,
	_OPERATE,
	_CONFIGURE,
} ;
typedef _b4_capabilityStateEnum b4_capabilityStateEnum;

enum _b5_capabilityStateEnum {
	_UNAVAILABLE,
	_STANDBY,
	_OPERATE,
	_CONFIGURE,
} ;
typedef _b5_capabilityStateEnum b5_capabilityStateEnum;

enum class _rx_healthStateEnum: short {
	_NORMAL,
	_DEGRADED,
	_FAILED,
} ;
typedef _rx_healthStateEnum rx_healthStateEnum;

enum class _rx_modeEnum: short {
	_DATAminusCAPTURE,
	_STANDBYminusFP,
	_STANDBYminusLP,
	_MAINTENANCE,
	_STARTUP,
	_CONFIGURE,
} ;
typedef _rx_modeEnum rx_modeEnum;

enum class _rx_powerStateEnum: short {
	_FULLminusPOWER,
	_LOWminusPOWER,
} ;
typedef _rx_powerStateEnum rx_powerStateEnum;

enum _rxpu_healthStateEnum {
	_NORMAL,
	_DEGRADED,
	_FAILED,
} ;
typedef _rxpu_healthStateEnum rxpu_healthStateEnum;

enum class _rxs123_healthStateEnum: short {
	_NORMAL,
	_DEGRADED,
	_FAILED,
} ;
typedef _rxs123_healthStateEnum rxs123_healthStateEnum;

enum class _rxs45_healthStateEnum: short {
	_NORMAL,
	_DEGRADED,
	_FAILED,
} ;
typedef _rxs45_healthStateEnum rxs45_healthStateEnum;
*/


/*----- PROTECTED REGION END -----*/	//	RxEmulator.h

/**
 *  RxEmulator class description:
 *    Class emulating LMC-Rx interface
 */

namespace RxEmulator_ns
{


enum class _b1_capabilityStateEnum: short {
	_UNAVAILABLE,
	_STANDBY,
	_OPERATE,
	_CONFIGURE,
} ;
typedef _b1_capabilityStateEnum b1_capabilityStateEnum;

enum class _b2_capabilityStateEnum: short {
	_UNAVAILABLE,
	_STANDBY,
	_OPERATE,
	_CONFIGURE,
} ;
typedef _b2_capabilityStateEnum b2_capabilityStateEnum;

enum class _b3_capabilityStateEnum: short {
	_UNAVAILABLE,
	_STANDBY,
	_OPERATE,
	_CONFIGURE,
} ;
typedef _b3_capabilityStateEnum b3_capabilityStateEnum;

enum class _b4_capabilityStateEnum: short {
	_UNAVAILABLE,
	_STANDBY,
	_OPERATE,
	_CONFIGURE,
} ;
typedef _b4_capabilityStateEnum b4_capabilityStateEnum;

enum _b5_capabilityStateEnum {
	_UNAVAILABLE,
	_STANDBY,
	_OPERATE,
	_CONFIGURE,
} ;
typedef _b5_capabilityStateEnum b5_capabilityStateEnum;

enum class _rx_healthStateEnum: short {
	_NORMAL,
	_DEGRADED,
	_FAILED,
} ;
typedef _rx_healthStateEnum rx_healthStateEnum;

enum class _rx_modeEnum: short {
	_DATAminusCAPTURE,
	_STANDBYminusFP,
	_STANDBYminusLP,
	_MAINTENANCE,
	_STARTUP,
	_CONFIGURE,
} ;
typedef _rx_modeEnum rx_modeEnum;

enum class _rx_powerStateEnum: short {
	_FULLminusPOWER,
	_LOWminusPOWER,
} ;
typedef _rx_powerStateEnum rx_powerStateEnum;

enum _rxpu_healthStateEnum {
	_NORMAL,
	_DEGRADED,
	_FAILED,
} ;
typedef _rxpu_healthStateEnum rxpu_healthStateEnum;

enum class _rxs123_healthStateEnum: short {
	_NORMAL,
	_DEGRADED,
	_FAILED,
} ;
typedef _rxs123_healthStateEnum rxs123_healthStateEnum;

enum class _rxs45_healthStateEnum: short {
	_NORMAL,
	_DEGRADED,
	_FAILED,
} ;
typedef _rxs45_healthStateEnum rxs45_healthStateEnum;

/*----- PROTECTED REGION ID(RxEmulator::Additional Class Declarations) ENABLED START -----*/

//	Additional Class Declarations

/*----- PROTECTED REGION END -----*/	//	RxEmulator::Additional Class Declarations

class RxEmulator : public SEEmulatorBase_ns::SEEmulatorBase
{

/*----- PROTECTED REGION ID(RxEmulator::Data Members) ENABLED START -----*/

//	Add your own data members

/*----- PROTECTED REGION END -----*/	//	RxEmulator::Data Members


//	Attribute data members
public:
	Tango::DevFloat	*attr_attenuation_read;
	b1_capabilityStateEnum	*attr_b1_capabilityState_read;
	Tango::DevLong	*attr_b1_samplingClock_read;
	Tango::DevShort	*attr_b1_synchronisedClock_read;
	b2_capabilityStateEnum	*attr_b2_capabilityState_read;
	Tango::DevLong	*attr_b2_samplingClock_read;
	Tango::DevShort	*attr_b2_synchronisedClock_read;
	b3_capabilityStateEnum	*attr_b3_capabilityState_read;
	Tango::DevLong	*attr_b3_samplingClock_read;
	Tango::DevShort	*attr_b3_synchronisedClock_read;
	b4_capabilityStateEnum	*attr_b4_capabilityState_read;
	Tango::DevLong	*attr_b4_samplingClock_read;
	Tango::DevShort	*attr_b4_synchronisedClock_read;
	b5_capabilityStateEnum	*attr_b5_capabilityState_read;
	Tango::DevLong	*attr_b5_samplingClock_read;
	Tango::DevShort	*attr_b5_synchronisedClock_read;
	Tango::DevLong	*attr_noisesource_offTime_read;
	Tango::DevLong	*attr_noisesource_onTime_read;
	Tango::DevLong	*attr_noisesource_period_read;
	Tango::DevFloat	*attr_noisesource_startTime_read;
	Tango::DevString	*attr_rx_fwVersions_read;
	rx_healthStateEnum	*attr_rx_healthState_read;
	rx_modeEnum	*attr_rx_mode_read;
	rx_powerStateEnum	*attr_rx_powerState_read;
	Tango::DevString	*attr_rx_protocolVersion_read;
	Tango::DevString	*attr_rx_serialNumbers_read;
	Tango::DevString	*attr_rx_swVersions_read;
	Tango::DevShort	*attr_rxpu_expectedOnline_read;
	rxpu_healthStateEnum	*attr_rxpu_healthState_read;
	Tango::DevLong	*attr_rxpu_hourCounter_read;
	Tango::DevLong	*attr_rxpu_operationalTime_read;
	Tango::DevFloat	*attr_rxpu_supplyCurrent_read;
	Tango::DevFloat	*attr_rxpu_supplyVoltage_read;
	Tango::DevFloat	*attr_rxpu_temperature_read;
	Tango::DevFloat	*attr_rxs123_adcPower_read;
	Tango::DevFloat	*attr_rxs123_adcVariance_read;
	Tango::DevShort	*attr_rxs123_expectedOnline_read;
	rxs123_healthStateEnum	*attr_rxs123_healthState_read;
	Tango::DevLong	*attr_rxs123_hourCounter_read;
	Tango::DevLong	*attr_rxs123_operationalTime_read;
	Tango::DevFloat	*attr_rxs123_supplyCurrent_read;
	Tango::DevFloat	*attr_rxs123_supplyVoltage_read;
	Tango::DevFloat	*attr_rxs123_temperature_read;
	Tango::DevFloat	*attr_rxs45_adcPower_read;
	Tango::DevFloat	*attr_rxs45_adcVariance_read;
	Tango::DevShort	*attr_rxs45_expectedOnline_read;
	rxs45_healthStateEnum	*attr_rxs45_healthState_read;
	Tango::DevLong	*attr_rxs45_hourCounter_read;
	Tango::DevFloat	*attr_rxs45_supplyCurrent_read;
	Tango::DevFloat	*attr_rxs45_supplyVoltage_read;
	Tango::DevFloat	*attr_rxs45_temperature_read;

//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	RxEmulator(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	RxEmulator(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	RxEmulator(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */
	~RxEmulator() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();


//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : RxEmulator::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);

/**
 *	Attribute attenuation related methods
 *	Description: Overall device attenuation. Default and persistence.
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
	virtual void read_attenuation(Tango::Attribute &attr);
	virtual bool is_attenuation_allowed(Tango::AttReqType type);
/**
 *	Attribute b1_capabilityState related methods
 *	Description: Band capability state
 *
 *	Data type:	Tango::DevEnum
 *	Attr type:	Scalar
 */
	virtual void read_b1_capabilityState(Tango::Attribute &attr);
	virtual bool is_b1_capabilityState_allowed(Tango::AttReqType type);
/**
 *	Attribute b1_samplingClock related methods
 *	Description: Band sampling clock frequency in Hertz
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_b1_samplingClock(Tango::Attribute &attr);
	virtual bool is_b1_samplingClock_allowed(Tango::AttReqType type);
/**
 *	Attribute b1_synchronisedClock related methods
 *	Description: Band clock synchronised to TFR. 
 *               Normally a boolean flag, but CHANGE_EVENT cannot be defined for boolean data types.
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
	virtual void read_b1_synchronisedClock(Tango::Attribute &attr);
	virtual bool is_b1_synchronisedClock_allowed(Tango::AttReqType type);
/**
 *	Attribute b2_capabilityState related methods
 *	Description: Band capability state
 *
 *	Data type:	Tango::DevEnum
 *	Attr type:	Scalar
 */
	virtual void read_b2_capabilityState(Tango::Attribute &attr);
	virtual bool is_b2_capabilityState_allowed(Tango::AttReqType type);
/**
 *	Attribute b2_samplingClock related methods
 *	Description: Band sampling clock frequency in Hertz
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_b2_samplingClock(Tango::Attribute &attr);
	virtual bool is_b2_samplingClock_allowed(Tango::AttReqType type);
/**
 *	Attribute b2_synchronisedClock related methods
 *	Description: Band clock synchronised to TFR. 
 *               Normally a boolean flag, but CHANGE_EVENT cannot be defined for boolean data types.
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
	virtual void read_b2_synchronisedClock(Tango::Attribute &attr);
	virtual bool is_b2_synchronisedClock_allowed(Tango::AttReqType type);
/**
 *	Attribute b3_capabilityState related methods
 *	Description: Band capability state
 *
 *	Data type:	Tango::DevEnum
 *	Attr type:	Scalar
 */
	virtual void read_b3_capabilityState(Tango::Attribute &attr);
	virtual bool is_b3_capabilityState_allowed(Tango::AttReqType type);
/**
 *	Attribute b3_samplingClock related methods
 *	Description: Band sampling clock frequency in Hertz
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_b3_samplingClock(Tango::Attribute &attr);
	virtual bool is_b3_samplingClock_allowed(Tango::AttReqType type);
/**
 *	Attribute b3_synchronisedClock related methods
 *	Description: Band clock synchronised to TFR.  Normally a boolean flag, but CHANGE_EVENT cannot be defined for boolean data types
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
	virtual void read_b3_synchronisedClock(Tango::Attribute &attr);
	virtual bool is_b3_synchronisedClock_allowed(Tango::AttReqType type);
/**
 *	Attribute b4_capabilityState related methods
 *	Description: Band capability state
 *
 *	Data type:	Tango::DevEnum
 *	Attr type:	Scalar
 */
	virtual void read_b4_capabilityState(Tango::Attribute &attr);
	virtual bool is_b4_capabilityState_allowed(Tango::AttReqType type);
/**
 *	Attribute b4_samplingClock related methods
 *	Description: Band sampling clock frequency in Hertz
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_b4_samplingClock(Tango::Attribute &attr);
	virtual bool is_b4_samplingClock_allowed(Tango::AttReqType type);
/**
 *	Attribute b4_synchronisedClock related methods
 *	Description: Band clock synchronised to TFR.  Normally a boolean flag, but CHANGE_EVENT cannot be defined for boolean data types
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
	virtual void read_b4_synchronisedClock(Tango::Attribute &attr);
	virtual bool is_b4_synchronisedClock_allowed(Tango::AttReqType type);
/**
 *	Attribute b5_capabilityState related methods
 *	Description: Band capability state
 *
 *	Data type:	Tango::DevEnum
 *	Attr type:	Scalar
 */
	virtual void read_b5_capabilityState(Tango::Attribute &attr);
	virtual bool is_b5_capabilityState_allowed(Tango::AttReqType type);
/**
 *	Attribute b5_samplingClock related methods
 *	Description: Band sampling clock frequency in Hertz
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_b5_samplingClock(Tango::Attribute &attr);
	virtual bool is_b5_samplingClock_allowed(Tango::AttReqType type);
/**
 *	Attribute b5_synchronisedClock related methods
 *	Description: Band clock synchronised to TFR.  Normally a boolean flag, but CHANGE_EVENT cannot be defined for boolean data types
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
	virtual void read_b5_synchronisedClock(Tango::Attribute &attr);
	virtual bool is_b5_synchronisedClock_allowed(Tango::AttReqType type);
/**
 *	Attribute noisesource_offTime related methods
 *	Description: Overall device noise source off time
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_noisesource_offTime(Tango::Attribute &attr);
	virtual bool is_noisesource_offTime_allowed(Tango::AttReqType type);
/**
 *	Attribute noisesource_onTime related methods
 *	Description: Overall device noise source offtime
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_noisesource_onTime(Tango::Attribute &attr);
	virtual bool is_noisesource_onTime_allowed(Tango::AttReqType type);
/**
 *	Attribute noisesource_period related methods
 *	Description: Overall device noise source period.
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_noisesource_period(Tango::Attribute &attr);
	virtual bool is_noisesource_period_allowed(Tango::AttReqType type);
/**
 *	Attribute noisesource_startTime related methods
 *	Description: Overall device noise source start time.
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
	virtual void read_noisesource_startTime(Tango::Attribute &attr);
	virtual bool is_noisesource_startTime_allowed(Tango::AttReqType type);
/**
 *	Attribute rx_fwVersions related methods
 *	Description: Firmware serial numbers
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_rx_fwVersions(Tango::Attribute &attr);
	virtual bool is_rx_fwVersions_allowed(Tango::AttReqType type);
/**
 *	Attribute rx_healthState related methods
 *	Description: Aggregated sub-element health
 *               Normal = all MCs healthy. Degraded = at least one RX Sampler and RXPU healthy.
 *               Failed = no sampler is healthy or RXPU is not healthy.
 *
 *	Data type:	Tango::DevEnum
 *	Attr type:	Scalar
 */
	virtual void read_rx_healthState(Tango::Attribute &attr);
	virtual bool is_rx_healthState_allowed(Tango::AttReqType type);
/**
 *	Attribute rx_mode related methods
 *	Description: 
 *
 *	Data type:	Tango::DevEnum
 *	Attr type:	Scalar
 */
	virtual void read_rx_mode(Tango::Attribute &attr);
	virtual bool is_rx_mode_allowed(Tango::AttReqType type);
/**
 *	Attribute rx_powerState related methods
 *	Description: Current power state
 *
 *	Data type:	Tango::DevEnum
 *	Attr type:	Scalar
 */
	virtual void read_rx_powerState(Tango::Attribute &attr);
	virtual bool is_rx_powerState_allowed(Tango::AttReqType type);
/**
 *	Attribute rx_protocolVersion related methods
 *	Description: Device server protocol version
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_rx_protocolVersion(Tango::Attribute &attr);
	virtual bool is_rx_protocolVersion_allowed(Tango::AttReqType type);
/**
 *	Attribute rx_serialNumbers related methods
 *	Description: Device Serial number
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_rx_serialNumbers(Tango::Attribute &attr);
	virtual bool is_rx_serialNumbers_allowed(Tango::AttReqType type);
/**
 *	Attribute rx_swVersions related methods
 *	Description: Software serial numbers
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_rx_swVersions(Tango::Attribute &attr);
	virtual bool is_rx_swVersions_allowed(Tango::AttReqType type);
/**
 *	Attribute rxpu_expectedOnline related methods
 *	Description: Indicates whether major component is expected online.  mcHealthStatus 
 *               will be normal if this value is set to false and the device is not installed or offline.
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
	virtual void read_rxpu_expectedOnline(Tango::Attribute &attr);
	virtual bool is_rxpu_expectedOnline_allowed(Tango::AttReqType type);
/**
 *	Attribute rxpu_healthState related methods
 *	Description: Major component health status
 *
 *	Data type:	Tango::DevEnum
 *	Attr type:	Scalar
 */
	virtual void read_rxpu_healthState(Tango::Attribute &attr);
	virtual bool is_rxpu_healthState_allowed(Tango::AttReqType type);
/**
 *	Attribute rxpu_hourCounter related methods
 *	Description: Major component total operational time
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_rxpu_hourCounter(Tango::Attribute &attr);
	virtual bool is_rxpu_hourCounter_allowed(Tango::AttReqType type);
/**
 *	Attribute rxpu_operationalTime related methods
 *	Description: Controller total operational time
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_rxpu_operationalTime(Tango::Attribute &attr);
	virtual bool is_rxpu_operationalTime_allowed(Tango::AttReqType type);
/**
 *	Attribute rxpu_supplyCurrent related methods
 *	Description: Controller device supply current
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
	virtual void read_rxpu_supplyCurrent(Tango::Attribute &attr);
	virtual bool is_rxpu_supplyCurrent_allowed(Tango::AttReqType type);
/**
 *	Attribute rxpu_supplyVoltage related methods
 *	Description: Controller device supply voltage
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
	virtual void read_rxpu_supplyVoltage(Tango::Attribute &attr);
	virtual bool is_rxpu_supplyVoltage_allowed(Tango::AttReqType type);
/**
 *	Attribute rxpu_temperature related methods
 *	Description: Controller device temperature
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
	virtual void read_rxpu_temperature(Tango::Attribute &attr);
	virtual bool is_rxpu_temperature_allowed(Tango::AttReqType type);
/**
 *	Attribute rxs123_adcPower related methods
 *	Description: Averaged power in dBm
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
	virtual void read_rxs123_adcPower(Tango::Attribute &attr);
	virtual bool is_rxs123_adcPower_allowed(Tango::AttReqType type);
/**
 *	Attribute rxs123_adcVariance related methods
 *	Description: Sample variance
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
	virtual void read_rxs123_adcVariance(Tango::Attribute &attr);
	virtual bool is_rxs123_adcVariance_allowed(Tango::AttReqType type);
/**
 *	Attribute rxs123_expectedOnline related methods
 *	Description: Indicates whether major component is expected online.  mcHealthStatus 
 *               will be normal if this value is set to false and the device is not installed or offline.
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
	virtual void read_rxs123_expectedOnline(Tango::Attribute &attr);
	virtual bool is_rxs123_expectedOnline_allowed(Tango::AttReqType type);
/**
 *	Attribute rxs123_healthState related methods
 *	Description: Major component health status
 *
 *	Data type:	Tango::DevEnum
 *	Attr type:	Scalar
 */
	virtual void read_rxs123_healthState(Tango::Attribute &attr);
	virtual bool is_rxs123_healthState_allowed(Tango::AttReqType type);
/**
 *	Attribute rxs123_hourCounter related methods
 *	Description: Operational run time in hours
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_rxs123_hourCounter(Tango::Attribute &attr);
	virtual bool is_rxs123_hourCounter_allowed(Tango::AttReqType type);
/**
 *	Attribute rxs123_operationalTime related methods
 *	Description: Major component total operational time
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_rxs123_operationalTime(Tango::Attribute &attr);
	virtual bool is_rxs123_operationalTime_allowed(Tango::AttReqType type);
/**
 *	Attribute rxs123_supplyCurrent related methods
 *	Description: Major component supply current
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
	virtual void read_rxs123_supplyCurrent(Tango::Attribute &attr);
	virtual bool is_rxs123_supplyCurrent_allowed(Tango::AttReqType type);
/**
 *	Attribute rxs123_supplyVoltage related methods
 *	Description: Major component supply voltage
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
	virtual void read_rxs123_supplyVoltage(Tango::Attribute &attr);
	virtual bool is_rxs123_supplyVoltage_allowed(Tango::AttReqType type);
/**
 *	Attribute rxs123_temperature related methods
 *	Description: Major component temperature
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
	virtual void read_rxs123_temperature(Tango::Attribute &attr);
	virtual bool is_rxs123_temperature_allowed(Tango::AttReqType type);
/**
 *	Attribute rxs45_adcPower related methods
 *	Description: Averaged power in dBm
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
	virtual void read_rxs45_adcPower(Tango::Attribute &attr);
	virtual bool is_rxs45_adcPower_allowed(Tango::AttReqType type);
/**
 *	Attribute rxs45_adcVariance related methods
 *	Description: Sample variance
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
	virtual void read_rxs45_adcVariance(Tango::Attribute &attr);
	virtual bool is_rxs45_adcVariance_allowed(Tango::AttReqType type);
/**
 *	Attribute rxs45_expectedOnline related methods
 *	Description: Indicates whether major component is expected online.  mcHealthStatus will be normal 
 *               if this value is set to false and the device is not installed or offline.
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
	virtual void read_rxs45_expectedOnline(Tango::Attribute &attr);
	virtual bool is_rxs45_expectedOnline_allowed(Tango::AttReqType type);
/**
 *	Attribute rxs45_healthState related methods
 *	Description: Major component health status
 *
 *	Data type:	Tango::DevEnum
 *	Attr type:	Scalar
 */
	virtual void read_rxs45_healthState(Tango::Attribute &attr);
	virtual bool is_rxs45_healthState_allowed(Tango::AttReqType type);
/**
 *	Attribute rxs45_hourCounter related methods
 *	Description: Operational run time in hours
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_rxs45_hourCounter(Tango::Attribute &attr);
	virtual bool is_rxs45_hourCounter_allowed(Tango::AttReqType type);
/**
 *	Attribute rxs45_supplyCurrent related methods
 *	Description: Major component supply current
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
	virtual void read_rxs45_supplyCurrent(Tango::Attribute &attr);
	virtual bool is_rxs45_supplyCurrent_allowed(Tango::AttReqType type);
/**
 *	Attribute rxs45_supplyVoltage related methods
 *	Description: Major component supply voltage
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
	virtual void read_rxs45_supplyVoltage(Tango::Attribute &attr);
	virtual bool is_rxs45_supplyVoltage_allowed(Tango::AttReqType type);
/**
 *	Attribute rxs45_temperature related methods
 *	Description: Device temperature
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
	virtual void read_rxs45_temperature(Tango::Attribute &attr);
	virtual bool is_rxs45_temperature_allowed(Tango::AttReqType type);


	//--------------------------------------------------------
	/**
	 *	Method      : RxEmulator::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();




//	Command related methods
public:
	/**
	 *	Command Capture related method
	 *	Description: Start/stop capture on the configured band.
	 *               Command only valid in Data_Capture mode
	 *
	 *	@param argin Flag value start/stop (0/1)
	 *	@returns Long arg
	 *           [0]: ack code
	 *           
	 *           String arg
	 *           [0]: error/info description
	 */
	virtual Tango::DevVarLongStringArray *capture(Tango::DevShort argin);
	virtual bool is_Capture_allowed(const CORBA::Any &any);
	/**
	 *	Command ConfigureBand related method
	 *	Description: Configure band to get ready for Data_Capture.
	 *               Not a valid command in Standby_LP mode.
	 *
	 *	@param argin Band id
	 *	@returns Long arg
	 *           [0]: ack code
	 *           
	 *           String arg
	 *           [0]: err/info description
	 */
	virtual Tango::DevVarLongStringArray *configure_band(Tango::DevShort argin);
	virtual bool is_ConfigureBand_allowed(const CORBA::Any &any);
	/**
	 *	Command SetEngineeringInterface related method
	 *	Description: Request the device to enter engineering interface mode
	 *
	 *	@returns Long arg
	 *           [0]: ack code
	 *           
	 *           String arg
	 *           [0]: error/info description
	 */
	virtual Tango::DevVarLongStringArray *set_engineering_interface();
	virtual bool is_SetEngineeringInterface_allowed(const CORBA::Any &any);
	/**
	 *	Command SetExpectedOnline related method
	 *	Description: Configure whether a major component is 
	 *               expected online. The mcHealthStatus attribute will be 
	 *               normal if this value is set to false and the device is 
	 *               not installed or offline.
	 *
	 *	@param argin [0]: Major component enum (RXS123,RXS45,RXC)
	 *               [1]: Flag value enable/disable (0/1)
	 *	@returns Long arg
	 *           [0]: ack code
	 *           
	 *           String arg
	 *           [0]: error/info description
	 */
	virtual Tango::DevVarLongStringArray *set_expected_online(const Tango::DevVarShortArray *argin);
	virtual bool is_SetExpectedOnline_allowed(const CORBA::Any &any);
	/**
	 *	Command SetSubElementMode related method
	 *	Description: Set the sub-element mode.
	 *               Allowed set modes are: 
	 *               
	 *               Data_Capture
	 *               Standby_FP 
	 *               Standby_LP 
	 *               Maintenance
	 *
	 *	@param argin Operational mode
	 *	@returns Long arg
	 *           [0]: ack code
	 *           
	 *           String arg
	 *           [0]: err/info description
	 */
	virtual Tango::DevVarLongStringArray *set_sub_element_mode(Tango::DevEnum argin);
	virtual bool is_SetSubElementMode_allowed(const CORBA::Any &any);
	/**
	 *	Command SetNoiseSource related method
	 *	Description: Set the noise diode start time, period and on/off time 
	 *               (duty cycle)
	 *
	 *	@param argin [0]: Start time of a new noise source
	 *               [1]: Noise source period (Duty cycle: time fraction in [0,1] in which the 
	 *               noise diode is turned on)
	 *               [2]: Noise source on time (Overall period of a on/off cycle in seconds)
	 *               [3]: Noise source off time
	 *	@returns Long arg
	 *           [0]: ack code
	 *           
	 *           String arg
	 *           [0]: error/info description
	 */
	virtual Tango::DevVarLongStringArray *set_noise_source(const Tango::DevVarLongArray *argin);
	virtual bool is_SetNoiseSource_allowed(const CORBA::Any &any);
	/**
	 *	Command Synchronise related method
	 *	Description: Reset configured band sample counters.
	 *               Command only valid in Data_Capture mode.
	 *               
	 *               NB: Run over the selected band only
	 *
	 *	@returns Long arg
	 *           [0]: ack code
	 *           
	 *           String arg
	 *           [0]: err/info description
	 */
	virtual Tango::DevVarLongStringArray *synchronise();
	virtual bool is_Synchronise_allowed(const CORBA::Any &any);
	/**
	 *	Command SetAttenuation related method
	 *	Description: Sets the global attenuation.  Changing this value will 
	 *               set the attenuation across the system and will be 
	 *               applied to all bands.
	 *
	 *	@param argin Attenuation value
	 *	@returns Long arg
	 *           [0]: ack code
	 *           
	 *           String arg
	 *           [0]: Err/info description
	 */
	virtual Tango::DevVarLongStringArray *set_attenuation(Tango::DevLong argin);
	virtual bool is_SetAttenuation_allowed(const CORBA::Any &any);


	//--------------------------------------------------------
	/**
	 *	Method      : RxEmulator::add_dynamic_commands()
	 *	Description : Add dynamic commands if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_commands();

/*----- PROTECTED REGION ID(RxEmulator::Additional Method prototypes) ENABLED START -----*/

//	Additional Method prototypes

/*----- PROTECTED REGION END -----*/	//	RxEmulator::Additional Method prototypes
};

/*----- PROTECTED REGION ID(RxEmulator::Additional Classes Definitions) ENABLED START -----*/

//	Additional Classes Definitions

/*----- PROTECTED REGION END -----*/	//	RxEmulator::Additional Classes Definitions

}	//	End of namespace

#endif   //	RxEmulator_H
