/*----- PROTECTED REGION ID(RxEmulatorClass.h) ENABLED START -----*/
//=============================================================================
//
// file :        RxEmulatorClass.h
//
// description : Include for the RxEmulator root class.
//               This class is the singleton class for
//                the RxEmulator device class.
//               It contains all properties and methods which the 
//               RxEmulator requires only once e.g. the commands.
//
// project :     RxEmulator
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef RxEmulatorClass_H
#define RxEmulatorClass_H

#include <tango.h>
#include <SEEmulatorBaseClass.h>
#include <RxEmulator.h>


/*----- PROTECTED REGION END -----*/	//	RxEmulatorClass.h


namespace RxEmulator_ns
{
/*----- PROTECTED REGION ID(RxEmulatorClass::classes for dynamic creation) ENABLED START -----*/


/*----- PROTECTED REGION END -----*/	//	RxEmulatorClass::classes for dynamic creation

//=========================================
//	Define classes for attributes
//=========================================
//	Attribute attenuation class definition
class attenuationAttrib: public Tango::Attr
{
public:
	attenuationAttrib():Attr("attenuation",
			Tango::DEV_FLOAT, Tango::READ) {};
	~attenuationAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<RxEmulator *>(dev))->read_attenuation(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<RxEmulator *>(dev))->is_attenuation_allowed(ty);}
};

//	Attribute b1_capabilityState class definition
class b1_capabilityStateAttrib: public Tango::Attr
{
public:
	b1_capabilityStateAttrib():Attr("b1_capabilityState",
			Tango::DEV_ENUM, Tango::READ) {};
	~b1_capabilityStateAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<RxEmulator *>(dev))->read_b1_capabilityState(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<RxEmulator *>(dev))->is_b1_capabilityState_allowed(ty);}
	virtual bool same_type(const type_info &in_type) {return typeid(b1_capabilityStateEnum) == in_type;}
	virtual string get_enum_type() {return string("b1_capabilityStateEnum");}
};

//	Attribute b1_samplingClock class definition
class b1_samplingClockAttrib: public Tango::Attr
{
public:
	b1_samplingClockAttrib():Attr("b1_samplingClock",
			Tango::DEV_LONG, Tango::READ) {};
	~b1_samplingClockAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<RxEmulator *>(dev))->read_b1_samplingClock(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<RxEmulator *>(dev))->is_b1_samplingClock_allowed(ty);}
};

//	Attribute b1_synchronisedClock class definition
class b1_synchronisedClockAttrib: public Tango::Attr
{
public:
	b1_synchronisedClockAttrib():Attr("b1_synchronisedClock",
			Tango::DEV_SHORT, Tango::READ) {};
	~b1_synchronisedClockAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<RxEmulator *>(dev))->read_b1_synchronisedClock(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<RxEmulator *>(dev))->is_b1_synchronisedClock_allowed(ty);}
};

//	Attribute b2_capabilityState class definition
class b2_capabilityStateAttrib: public Tango::Attr
{
public:
	b2_capabilityStateAttrib():Attr("b2_capabilityState",
			Tango::DEV_ENUM, Tango::READ) {};
	~b2_capabilityStateAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<RxEmulator *>(dev))->read_b2_capabilityState(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<RxEmulator *>(dev))->is_b2_capabilityState_allowed(ty);}
	virtual bool same_type(const type_info &in_type) {return typeid(b2_capabilityStateEnum) == in_type;}
	virtual string get_enum_type() {return string("b2_capabilityStateEnum");}
};

//	Attribute b2_samplingClock class definition
class b2_samplingClockAttrib: public Tango::Attr
{
public:
	b2_samplingClockAttrib():Attr("b2_samplingClock",
			Tango::DEV_LONG, Tango::READ) {};
	~b2_samplingClockAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<RxEmulator *>(dev))->read_b2_samplingClock(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<RxEmulator *>(dev))->is_b2_samplingClock_allowed(ty);}
};

//	Attribute b2_synchronisedClock class definition
class b2_synchronisedClockAttrib: public Tango::Attr
{
public:
	b2_synchronisedClockAttrib():Attr("b2_synchronisedClock",
			Tango::DEV_SHORT, Tango::READ) {};
	~b2_synchronisedClockAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<RxEmulator *>(dev))->read_b2_synchronisedClock(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<RxEmulator *>(dev))->is_b2_synchronisedClock_allowed(ty);}
};

//	Attribute b3_capabilityState class definition
class b3_capabilityStateAttrib: public Tango::Attr
{
public:
	b3_capabilityStateAttrib():Attr("b3_capabilityState",
			Tango::DEV_ENUM, Tango::READ) {};
	~b3_capabilityStateAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<RxEmulator *>(dev))->read_b3_capabilityState(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<RxEmulator *>(dev))->is_b3_capabilityState_allowed(ty);}
	virtual bool same_type(const type_info &in_type) {return typeid(b3_capabilityStateEnum) == in_type;}
	virtual string get_enum_type() {return string("b3_capabilityStateEnum");}
};

//	Attribute b3_samplingClock class definition
class b3_samplingClockAttrib: public Tango::Attr
{
public:
	b3_samplingClockAttrib():Attr("b3_samplingClock",
			Tango::DEV_LONG, Tango::READ) {};
	~b3_samplingClockAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<RxEmulator *>(dev))->read_b3_samplingClock(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<RxEmulator *>(dev))->is_b3_samplingClock_allowed(ty);}
};

//	Attribute b3_synchronisedClock class definition
class b3_synchronisedClockAttrib: public Tango::Attr
{
public:
	b3_synchronisedClockAttrib():Attr("b3_synchronisedClock",
			Tango::DEV_SHORT, Tango::READ) {};
	~b3_synchronisedClockAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<RxEmulator *>(dev))->read_b3_synchronisedClock(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<RxEmulator *>(dev))->is_b3_synchronisedClock_allowed(ty);}
};

//	Attribute b4_capabilityState class definition
class b4_capabilityStateAttrib: public Tango::Attr
{
public:
	b4_capabilityStateAttrib():Attr("b4_capabilityState",
			Tango::DEV_ENUM, Tango::READ) {};
	~b4_capabilityStateAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<RxEmulator *>(dev))->read_b4_capabilityState(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<RxEmulator *>(dev))->is_b4_capabilityState_allowed(ty);}
	virtual bool same_type(const type_info &in_type) {return typeid(b4_capabilityStateEnum) == in_type;}
	virtual string get_enum_type() {return string("b4_capabilityStateEnum");}
};

//	Attribute b4_samplingClock class definition
class b4_samplingClockAttrib: public Tango::Attr
{
public:
	b4_samplingClockAttrib():Attr("b4_samplingClock",
			Tango::DEV_LONG, Tango::READ) {};
	~b4_samplingClockAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<RxEmulator *>(dev))->read_b4_samplingClock(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<RxEmulator *>(dev))->is_b4_samplingClock_allowed(ty);}
};

//	Attribute b4_synchronisedClock class definition
class b4_synchronisedClockAttrib: public Tango::Attr
{
public:
	b4_synchronisedClockAttrib():Attr("b4_synchronisedClock",
			Tango::DEV_SHORT, Tango::READ) {};
	~b4_synchronisedClockAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<RxEmulator *>(dev))->read_b4_synchronisedClock(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<RxEmulator *>(dev))->is_b4_synchronisedClock_allowed(ty);}
};

//	Attribute b5_capabilityState class definition
class b5_capabilityStateAttrib: public Tango::Attr
{
public:
	b5_capabilityStateAttrib():Attr("b5_capabilityState",
			Tango::DEV_ENUM, Tango::READ) {};
	~b5_capabilityStateAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<RxEmulator *>(dev))->read_b5_capabilityState(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<RxEmulator *>(dev))->is_b5_capabilityState_allowed(ty);}
	virtual bool same_type(const type_info &in_type) {return typeid(b5_capabilityStateEnum) == in_type;}
	virtual string get_enum_type() {return string("b5_capabilityStateEnum");}
};

//	Attribute b5_samplingClock class definition
class b5_samplingClockAttrib: public Tango::Attr
{
public:
	b5_samplingClockAttrib():Attr("b5_samplingClock",
			Tango::DEV_LONG, Tango::READ) {};
	~b5_samplingClockAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<RxEmulator *>(dev))->read_b5_samplingClock(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<RxEmulator *>(dev))->is_b5_samplingClock_allowed(ty);}
};

//	Attribute b5_synchronisedClock class definition
class b5_synchronisedClockAttrib: public Tango::Attr
{
public:
	b5_synchronisedClockAttrib():Attr("b5_synchronisedClock",
			Tango::DEV_SHORT, Tango::READ) {};
	~b5_synchronisedClockAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<RxEmulator *>(dev))->read_b5_synchronisedClock(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<RxEmulator *>(dev))->is_b5_synchronisedClock_allowed(ty);}
};

//	Attribute noisesource_offTime class definition
class noisesource_offTimeAttrib: public Tango::Attr
{
public:
	noisesource_offTimeAttrib():Attr("noisesource_offTime",
			Tango::DEV_LONG, Tango::READ) {};
	~noisesource_offTimeAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<RxEmulator *>(dev))->read_noisesource_offTime(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<RxEmulator *>(dev))->is_noisesource_offTime_allowed(ty);}
};

//	Attribute noisesource_onTime class definition
class noisesource_onTimeAttrib: public Tango::Attr
{
public:
	noisesource_onTimeAttrib():Attr("noisesource_onTime",
			Tango::DEV_LONG, Tango::READ) {};
	~noisesource_onTimeAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<RxEmulator *>(dev))->read_noisesource_onTime(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<RxEmulator *>(dev))->is_noisesource_onTime_allowed(ty);}
};

//	Attribute noisesource_period class definition
class noisesource_periodAttrib: public Tango::Attr
{
public:
	noisesource_periodAttrib():Attr("noisesource_period",
			Tango::DEV_LONG, Tango::READ) {};
	~noisesource_periodAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<RxEmulator *>(dev))->read_noisesource_period(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<RxEmulator *>(dev))->is_noisesource_period_allowed(ty);}
};

//	Attribute noisesource_startTime class definition
class noisesource_startTimeAttrib: public Tango::Attr
{
public:
	noisesource_startTimeAttrib():Attr("noisesource_startTime",
			Tango::DEV_FLOAT, Tango::READ) {};
	~noisesource_startTimeAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<RxEmulator *>(dev))->read_noisesource_startTime(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<RxEmulator *>(dev))->is_noisesource_startTime_allowed(ty);}
};

//	Attribute rx_fwVersions class definition
class rx_fwVersionsAttrib: public Tango::Attr
{
public:
	rx_fwVersionsAttrib():Attr("rx_fwVersions",
			Tango::DEV_STRING, Tango::READ) {};
	~rx_fwVersionsAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<RxEmulator *>(dev))->read_rx_fwVersions(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<RxEmulator *>(dev))->is_rx_fwVersions_allowed(ty);}
};

//	Attribute rx_healthState class definition
class rx_healthStateAttrib: public Tango::Attr
{
public:
	rx_healthStateAttrib():Attr("rx_healthState",
			Tango::DEV_ENUM, Tango::READ) {};
	~rx_healthStateAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<RxEmulator *>(dev))->read_rx_healthState(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<RxEmulator *>(dev))->is_rx_healthState_allowed(ty);}
	virtual bool same_type(const type_info &in_type) {return typeid(rx_healthStateEnum) == in_type;}
	virtual string get_enum_type() {return string("rx_healthStateEnum");}
};

//	Attribute rx_mode class definition
class rx_modeAttrib: public Tango::Attr
{
public:
	rx_modeAttrib():Attr("rx_mode",
			Tango::DEV_ENUM, Tango::READ) {};
	~rx_modeAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<RxEmulator *>(dev))->read_rx_mode(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<RxEmulator *>(dev))->is_rx_mode_allowed(ty);}
	virtual bool same_type(const type_info &in_type) {return typeid(rx_modeEnum) == in_type;}
	virtual string get_enum_type() {return string("rx_modeEnum");}
};

//	Attribute rx_powerState class definition
class rx_powerStateAttrib: public Tango::Attr
{
public:
	rx_powerStateAttrib():Attr("rx_powerState",
			Tango::DEV_ENUM, Tango::READ) {};
	~rx_powerStateAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<RxEmulator *>(dev))->read_rx_powerState(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<RxEmulator *>(dev))->is_rx_powerState_allowed(ty);}
	virtual bool same_type(const type_info &in_type) {return typeid(rx_powerStateEnum) == in_type;}
	virtual string get_enum_type() {return string("rx_powerStateEnum");}
};

//	Attribute rx_protocolVersion class definition
class rx_protocolVersionAttrib: public Tango::Attr
{
public:
	rx_protocolVersionAttrib():Attr("rx_protocolVersion",
			Tango::DEV_STRING, Tango::READ) {};
	~rx_protocolVersionAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<RxEmulator *>(dev))->read_rx_protocolVersion(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<RxEmulator *>(dev))->is_rx_protocolVersion_allowed(ty);}
};

//	Attribute rx_serialNumbers class definition
class rx_serialNumbersAttrib: public Tango::Attr
{
public:
	rx_serialNumbersAttrib():Attr("rx_serialNumbers",
			Tango::DEV_STRING, Tango::READ) {};
	~rx_serialNumbersAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<RxEmulator *>(dev))->read_rx_serialNumbers(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<RxEmulator *>(dev))->is_rx_serialNumbers_allowed(ty);}
};

//	Attribute rx_swVersions class definition
class rx_swVersionsAttrib: public Tango::Attr
{
public:
	rx_swVersionsAttrib():Attr("rx_swVersions",
			Tango::DEV_STRING, Tango::READ) {};
	~rx_swVersionsAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<RxEmulator *>(dev))->read_rx_swVersions(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<RxEmulator *>(dev))->is_rx_swVersions_allowed(ty);}
};

//	Attribute rxpu_expectedOnline class definition
class rxpu_expectedOnlineAttrib: public Tango::Attr
{
public:
	rxpu_expectedOnlineAttrib():Attr("rxpu_expectedOnline",
			Tango::DEV_SHORT, Tango::READ) {};
	~rxpu_expectedOnlineAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<RxEmulator *>(dev))->read_rxpu_expectedOnline(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<RxEmulator *>(dev))->is_rxpu_expectedOnline_allowed(ty);}
};

//	Attribute rxpu_healthState class definition
class rxpu_healthStateAttrib: public Tango::Attr
{
public:
	rxpu_healthStateAttrib():Attr("rxpu_healthState",
			Tango::DEV_ENUM, Tango::READ) {};
	~rxpu_healthStateAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<RxEmulator *>(dev))->read_rxpu_healthState(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<RxEmulator *>(dev))->is_rxpu_healthState_allowed(ty);}
	virtual bool same_type(const type_info &in_type) {return typeid(rxpu_healthStateEnum) == in_type;}
	virtual string get_enum_type() {return string("rxpu_healthStateEnum");}
};

//	Attribute rxpu_hourCounter class definition
class rxpu_hourCounterAttrib: public Tango::Attr
{
public:
	rxpu_hourCounterAttrib():Attr("rxpu_hourCounter",
			Tango::DEV_LONG, Tango::READ) {};
	~rxpu_hourCounterAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<RxEmulator *>(dev))->read_rxpu_hourCounter(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<RxEmulator *>(dev))->is_rxpu_hourCounter_allowed(ty);}
};

//	Attribute rxpu_operationalTime class definition
class rxpu_operationalTimeAttrib: public Tango::Attr
{
public:
	rxpu_operationalTimeAttrib():Attr("rxpu_operationalTime",
			Tango::DEV_LONG, Tango::READ) {};
	~rxpu_operationalTimeAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<RxEmulator *>(dev))->read_rxpu_operationalTime(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<RxEmulator *>(dev))->is_rxpu_operationalTime_allowed(ty);}
};

//	Attribute rxpu_supplyCurrent class definition
class rxpu_supplyCurrentAttrib: public Tango::Attr
{
public:
	rxpu_supplyCurrentAttrib():Attr("rxpu_supplyCurrent",
			Tango::DEV_FLOAT, Tango::READ) {};
	~rxpu_supplyCurrentAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<RxEmulator *>(dev))->read_rxpu_supplyCurrent(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<RxEmulator *>(dev))->is_rxpu_supplyCurrent_allowed(ty);}
};

//	Attribute rxpu_supplyVoltage class definition
class rxpu_supplyVoltageAttrib: public Tango::Attr
{
public:
	rxpu_supplyVoltageAttrib():Attr("rxpu_supplyVoltage",
			Tango::DEV_FLOAT, Tango::READ) {};
	~rxpu_supplyVoltageAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<RxEmulator *>(dev))->read_rxpu_supplyVoltage(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<RxEmulator *>(dev))->is_rxpu_supplyVoltage_allowed(ty);}
};

//	Attribute rxpu_temperature class definition
class rxpu_temperatureAttrib: public Tango::Attr
{
public:
	rxpu_temperatureAttrib():Attr("rxpu_temperature",
			Tango::DEV_FLOAT, Tango::READ) {};
	~rxpu_temperatureAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<RxEmulator *>(dev))->read_rxpu_temperature(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<RxEmulator *>(dev))->is_rxpu_temperature_allowed(ty);}
};

//	Attribute rxs123_adcPower class definition
class rxs123_adcPowerAttrib: public Tango::Attr
{
public:
	rxs123_adcPowerAttrib():Attr("rxs123_adcPower",
			Tango::DEV_FLOAT, Tango::READ) {};
	~rxs123_adcPowerAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<RxEmulator *>(dev))->read_rxs123_adcPower(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<RxEmulator *>(dev))->is_rxs123_adcPower_allowed(ty);}
};

//	Attribute rxs123_adcVariance class definition
class rxs123_adcVarianceAttrib: public Tango::Attr
{
public:
	rxs123_adcVarianceAttrib():Attr("rxs123_adcVariance",
			Tango::DEV_FLOAT, Tango::READ) {};
	~rxs123_adcVarianceAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<RxEmulator *>(dev))->read_rxs123_adcVariance(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<RxEmulator *>(dev))->is_rxs123_adcVariance_allowed(ty);}
};

//	Attribute rxs123_expectedOnline class definition
class rxs123_expectedOnlineAttrib: public Tango::Attr
{
public:
	rxs123_expectedOnlineAttrib():Attr("rxs123_expectedOnline",
			Tango::DEV_SHORT, Tango::READ) {};
	~rxs123_expectedOnlineAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<RxEmulator *>(dev))->read_rxs123_expectedOnline(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<RxEmulator *>(dev))->is_rxs123_expectedOnline_allowed(ty);}
};

//	Attribute rxs123_healthState class definition
class rxs123_healthStateAttrib: public Tango::Attr
{
public:
	rxs123_healthStateAttrib():Attr("rxs123_healthState",
			Tango::DEV_ENUM, Tango::READ) {};
	~rxs123_healthStateAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<RxEmulator *>(dev))->read_rxs123_healthState(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<RxEmulator *>(dev))->is_rxs123_healthState_allowed(ty);}
	virtual bool same_type(const type_info &in_type) {return typeid(rxs123_healthStateEnum) == in_type;}
	virtual string get_enum_type() {return string("rxs123_healthStateEnum");}
};

//	Attribute rxs123_hourCounter class definition
class rxs123_hourCounterAttrib: public Tango::Attr
{
public:
	rxs123_hourCounterAttrib():Attr("rxs123_hourCounter",
			Tango::DEV_LONG, Tango::READ) {};
	~rxs123_hourCounterAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<RxEmulator *>(dev))->read_rxs123_hourCounter(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<RxEmulator *>(dev))->is_rxs123_hourCounter_allowed(ty);}
};

//	Attribute rxs123_operationalTime class definition
class rxs123_operationalTimeAttrib: public Tango::Attr
{
public:
	rxs123_operationalTimeAttrib():Attr("rxs123_operationalTime",
			Tango::DEV_LONG, Tango::READ) {};
	~rxs123_operationalTimeAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<RxEmulator *>(dev))->read_rxs123_operationalTime(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<RxEmulator *>(dev))->is_rxs123_operationalTime_allowed(ty);}
};

//	Attribute rxs123_supplyCurrent class definition
class rxs123_supplyCurrentAttrib: public Tango::Attr
{
public:
	rxs123_supplyCurrentAttrib():Attr("rxs123_supplyCurrent",
			Tango::DEV_FLOAT, Tango::READ) {};
	~rxs123_supplyCurrentAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<RxEmulator *>(dev))->read_rxs123_supplyCurrent(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<RxEmulator *>(dev))->is_rxs123_supplyCurrent_allowed(ty);}
};

//	Attribute rxs123_supplyVoltage class definition
class rxs123_supplyVoltageAttrib: public Tango::Attr
{
public:
	rxs123_supplyVoltageAttrib():Attr("rxs123_supplyVoltage",
			Tango::DEV_FLOAT, Tango::READ) {};
	~rxs123_supplyVoltageAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<RxEmulator *>(dev))->read_rxs123_supplyVoltage(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<RxEmulator *>(dev))->is_rxs123_supplyVoltage_allowed(ty);}
};

//	Attribute rxs123_temperature class definition
class rxs123_temperatureAttrib: public Tango::Attr
{
public:
	rxs123_temperatureAttrib():Attr("rxs123_temperature",
			Tango::DEV_FLOAT, Tango::READ) {};
	~rxs123_temperatureAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<RxEmulator *>(dev))->read_rxs123_temperature(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<RxEmulator *>(dev))->is_rxs123_temperature_allowed(ty);}
};

//	Attribute rxs45_adcPower class definition
class rxs45_adcPowerAttrib: public Tango::Attr
{
public:
	rxs45_adcPowerAttrib():Attr("rxs45_adcPower",
			Tango::DEV_FLOAT, Tango::READ) {};
	~rxs45_adcPowerAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<RxEmulator *>(dev))->read_rxs45_adcPower(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<RxEmulator *>(dev))->is_rxs45_adcPower_allowed(ty);}
};

//	Attribute rxs45_adcVariance class definition
class rxs45_adcVarianceAttrib: public Tango::Attr
{
public:
	rxs45_adcVarianceAttrib():Attr("rxs45_adcVariance",
			Tango::DEV_FLOAT, Tango::READ) {};
	~rxs45_adcVarianceAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<RxEmulator *>(dev))->read_rxs45_adcVariance(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<RxEmulator *>(dev))->is_rxs45_adcVariance_allowed(ty);}
};

//	Attribute rxs45_expectedOnline class definition
class rxs45_expectedOnlineAttrib: public Tango::Attr
{
public:
	rxs45_expectedOnlineAttrib():Attr("rxs45_expectedOnline",
			Tango::DEV_SHORT, Tango::READ) {};
	~rxs45_expectedOnlineAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<RxEmulator *>(dev))->read_rxs45_expectedOnline(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<RxEmulator *>(dev))->is_rxs45_expectedOnline_allowed(ty);}
};

//	Attribute rxs45_healthState class definition
class rxs45_healthStateAttrib: public Tango::Attr
{
public:
	rxs45_healthStateAttrib():Attr("rxs45_healthState",
			Tango::DEV_ENUM, Tango::READ) {};
	~rxs45_healthStateAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<RxEmulator *>(dev))->read_rxs45_healthState(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<RxEmulator *>(dev))->is_rxs45_healthState_allowed(ty);}
	virtual bool same_type(const type_info &in_type) {return typeid(rxs45_healthStateEnum) == in_type;}
	virtual string get_enum_type() {return string("rxs45_healthStateEnum");}
};

//	Attribute rxs45_hourCounter class definition
class rxs45_hourCounterAttrib: public Tango::Attr
{
public:
	rxs45_hourCounterAttrib():Attr("rxs45_hourCounter",
			Tango::DEV_LONG, Tango::READ) {};
	~rxs45_hourCounterAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<RxEmulator *>(dev))->read_rxs45_hourCounter(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<RxEmulator *>(dev))->is_rxs45_hourCounter_allowed(ty);}
};

//	Attribute rxs45_supplyCurrent class definition
class rxs45_supplyCurrentAttrib: public Tango::Attr
{
public:
	rxs45_supplyCurrentAttrib():Attr("rxs45_supplyCurrent",
			Tango::DEV_FLOAT, Tango::READ) {};
	~rxs45_supplyCurrentAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<RxEmulator *>(dev))->read_rxs45_supplyCurrent(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<RxEmulator *>(dev))->is_rxs45_supplyCurrent_allowed(ty);}
};

//	Attribute rxs45_supplyVoltage class definition
class rxs45_supplyVoltageAttrib: public Tango::Attr
{
public:
	rxs45_supplyVoltageAttrib():Attr("rxs45_supplyVoltage",
			Tango::DEV_FLOAT, Tango::READ) {};
	~rxs45_supplyVoltageAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<RxEmulator *>(dev))->read_rxs45_supplyVoltage(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<RxEmulator *>(dev))->is_rxs45_supplyVoltage_allowed(ty);}
};

//	Attribute rxs45_temperature class definition
class rxs45_temperatureAttrib: public Tango::Attr
{
public:
	rxs45_temperatureAttrib():Attr("rxs45_temperature",
			Tango::DEV_FLOAT, Tango::READ) {};
	~rxs45_temperatureAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<RxEmulator *>(dev))->read_rxs45_temperature(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<RxEmulator *>(dev))->is_rxs45_temperature_allowed(ty);}
};


//=========================================
//	Define classes for commands
//=========================================
//	Command Capture class definition
class CaptureClass : public Tango::Command
{
public:
	CaptureClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	CaptureClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~CaptureClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<RxEmulator *>(dev))->is_Capture_allowed(any);}
};

//	Command ConfigureBand class definition
class ConfigureBandClass : public Tango::Command
{
public:
	ConfigureBandClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ConfigureBandClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ConfigureBandClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<RxEmulator *>(dev))->is_ConfigureBand_allowed(any);}
};

//	Command SetEngineeringInterface class definition
class SetEngineeringInterfaceClass : public Tango::Command
{
public:
	SetEngineeringInterfaceClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SetEngineeringInterfaceClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SetEngineeringInterfaceClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<RxEmulator *>(dev))->is_SetEngineeringInterface_allowed(any);}
};

//	Command SetExpectedOnline class definition
class SetExpectedOnlineClass : public Tango::Command
{
public:
	SetExpectedOnlineClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SetExpectedOnlineClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SetExpectedOnlineClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<RxEmulator *>(dev))->is_SetExpectedOnline_allowed(any);}
};

//	Command SetSubElementMode class definition
class SetSubElementModeClass : public Tango::Command
{
public:
	SetSubElementModeClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SetSubElementModeClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SetSubElementModeClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<RxEmulator *>(dev))->is_SetSubElementMode_allowed(any);}
};

//	Command SetNoiseSource class definition
class SetNoiseSourceClass : public Tango::Command
{
public:
	SetNoiseSourceClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SetNoiseSourceClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SetNoiseSourceClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<RxEmulator *>(dev))->is_SetNoiseSource_allowed(any);}
};

//	Command Synchronise class definition
class SynchroniseClass : public Tango::Command
{
public:
	SynchroniseClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SynchroniseClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SynchroniseClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<RxEmulator *>(dev))->is_Synchronise_allowed(any);}
};

//	Command SetAttenuation class definition
class SetAttenuationClass : public Tango::Command
{
public:
	SetAttenuationClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SetAttenuationClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SetAttenuationClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<RxEmulator *>(dev))->is_SetAttenuation_allowed(any);}
};


/**
 *	The RxEmulatorClass singleton definition
 */

#ifdef _TG_WINDOWS_
class __declspec(dllexport)  RxEmulatorClass : public SEEmulatorBase_ns::SEEmulatorBaseClass
#else
class RxEmulatorClass : public SEEmulatorBase_ns::SEEmulatorBaseClass
#endif
{
	/*----- PROTECTED REGION ID(RxEmulatorClass::Additionnal DServer data members) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	RxEmulatorClass::Additionnal DServer data members

	public:
		//	write class properties data members
		Tango::DbData	cl_prop;
		Tango::DbData	cl_def_prop;
		Tango::DbData	dev_def_prop;
	
		//	Method prototypes
		static RxEmulatorClass *init(const char *);
		static RxEmulatorClass *instance();
		~RxEmulatorClass();
		Tango::DbDatum	get_class_property(string &);
		Tango::DbDatum	get_default_device_property(string &);
		Tango::DbDatum	get_default_class_property(string &);
	
	protected:
		RxEmulatorClass(string &);
		static RxEmulatorClass *_instance;
		void command_factory();
		void attribute_factory(vector<Tango::Attr *> &);
		void pipe_factory();
		void write_class_property();
		void set_default_property();
		void get_class_property();
		string get_cvstag();
		string get_cvsroot();
	
	private:
		void device_factory(const Tango::DevVarStringArray *);
		void create_static_attribute_list(vector<Tango::Attr *> &);
		void erase_dynamic_attributes(const Tango::DevVarStringArray *,vector<Tango::Attr *> &);
		vector<string>	defaultAttList;
		Tango::Attr *get_attr_object_by_name(vector<Tango::Attr *> &att_list, string attname);
};

}	//	End of namespace

#endif   //	RxEmulator_H
