/*----- PROTECTED REGION ID(LMCInterface.cpp) ENABLED START -----*/
static const char *RcsId = "$Id:  $";
//=============================================================================
//
// file :        LMCInterface.cpp
//
// description : C++ source for the LMCInterface class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               LMCInterface are implemented in this file.
//
// project :     LMC Interface
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <LMCInterface.h>
#include <LMCInterfaceClass.h>

#include <Message.h>

/*----- PROTECTED REGION END -----*/	//	LMCInterface.cpp

/**
 *  LMCInterface class description:
 *    Device class implementing LMC-TM interface
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name       |  Method name
//================================================================
//  State              |  Inherited (no method)
//  Status             |  Inherited (no method)
//  echo               |  echo
//  Revoke             |  revoke
//  FlushCommandQueue  |  flush_command_queue
//================================================================

//================================================================
//  Attributes managed is:
//================================================================
//================================================================

namespace LMCInterface_ns
{
/*----- PROTECTED REGION ID(LMCInterface::namespace_starting) ENABLED START -----*/

//	static initializations

/*----- PROTECTED REGION END -----*/	//	LMCInterface::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : LMCInterface::LMCInterface()
 *	Description : Constructors for a Tango device
 *                implementing the classLMCInterface
 */
//--------------------------------------------------------
LMCInterface::LMCInterface(Tango::DeviceClass *cl, string &s)
 : BaseDevice(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(LMCInterface::constructor_1) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	LMCInterface::constructor_1
}
//--------------------------------------------------------
LMCInterface::LMCInterface(Tango::DeviceClass *cl, const char *s)
 : BaseDevice(cl, s)
{
	/*----- PROTECTED REGION ID(LMCInterface::constructor_2) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	LMCInterface::constructor_2
}
//--------------------------------------------------------
LMCInterface::LMCInterface(Tango::DeviceClass *cl, const char *s, const char *d)
 : BaseDevice(cl, s, d)
{
	/*----- PROTECTED REGION ID(LMCInterface::constructor_3) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	LMCInterface::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : LMCInterface::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void LMCInterface::delete_device()
{
	DEBUG_STREAM << "LMCInterface::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(LMCInterface::delete_device) ENABLED START -----*/
	
	//	Delete device allocated objects
	
	/*----- PROTECTED REGION END -----*/	//	LMCInterface::delete_device

	if (Tango::Util::instance()->is_svr_shutting_down()==false  &&
		Tango::Util::instance()->is_device_restarting(device_name)==false &&
		Tango::Util::instance()->is_svr_starting()==false)
	{
		//	If not shutting down call delete device for inherited object
		BaseDevice_ns::BaseDevice::delete_device();
	}
}

//--------------------------------------------------------
/**
 *	Method      : LMCInterface::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void LMCInterface::init_device()
{
	DEBUG_STREAM << "LMCInterface::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(LMCInterface::init_device_before) ENABLED START -----*/
	
	//	Initialization before get_device_property() call
	
	/*----- PROTECTED REGION END -----*/	//	LMCInterface::init_device_before
	
	if (Tango::Util::instance()->is_svr_starting() == false  &&
		Tango::Util::instance()->is_device_restarting(device_name)==false)
	{
		//	If not starting up call init device for inherited object
		BaseDevice_ns::BaseDevice::init_device();
	}
	//	No device property to be read from database
	
	/*----- PROTECTED REGION ID(LMCInterface::init_device) ENABLED START -----*/
	
	//	Initialize device
	//## Initialize device proxies
	InitDevices();
	
	/*----- PROTECTED REGION END -----*/	//	LMCInterface::init_device
}


//--------------------------------------------------------
/**
 *	Method      : LMCInterface::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void LMCInterface::always_executed_hook()
{
	DEBUG_STREAM << "LMCInterface::always_executed_hook()  " << device_name << endl;
	/*----- PROTECTED REGION ID(LMCInterface::always_executed_hook) ENABLED START -----*/
	
	//	code always executed before all requests
	
	/*----- PROTECTED REGION END -----*/	//	LMCInterface::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : LMCInterface::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void LMCInterface::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "LMCInterface::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(LMCInterface::read_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	LMCInterface::read_attr_hardware
}


//--------------------------------------------------------
/**
 *	Method      : LMCInterface::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void LMCInterface::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(LMCInterface::add_dynamic_attributes) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic attributes if any
	
	/*----- PROTECTED REGION END -----*/	//	LMCInterface::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Command echo related method
 *	Description: A dummy echo command for testing purpose
 *
 *	@param argin 
 *	@returns 
 */
//--------------------------------------------------------
Tango::DevString LMCInterface::echo(Tango::DevString argin)
{
	Tango::DevString argout;
	DEBUG_STREAM << "LMCInterface::echo()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LMCInterface::echo) ENABLED START -----*/
	
	//	Add your own code
	std::string cmd_argin= std::string(argin);
	std::string device_name= this->get_name();
	DEBUG_STREAM<<"LMCInterface::echo(): DEBUG: cmd_argin: "<<cmd_argin<<endl;

	
	//============================
	//==   PARSE REQUEST
	//============================
	MessageParser_ns::Request req;
	if(req.Parse(cmd_argin)<0){
		WARN_STREAM<<"LMCInterface::echo(): WARN: Invalid task args given!"<<endl;
		argout= CORBA::string_dup(cmd_argin.c_str());
		return argout;
	}	

	//DEBUG###		
	//argout= CORBA::string_dup(cmd_argin.c_str());
	//###

	
	//============================
	//==   CREATE ECHO RESPONSE
	//============================
	std::string lmc_id= device_name;
	std::string response= "";
	int status= MessageParser_ns::MessageUtils::MakeEchoResponse(response,req,lmc_id,std::string("Request executed with success"));
	if(status<0){
		WARN_STREAM<<"LMCInterface::echo(): WARN: Failed to create response!"<<endl;
		argout= CORBA::string_dup(cmd_argin.c_str());
		return argout;
	}
	
	argout= CORBA::string_dup(response.c_str());
	
	/*----- PROTECTED REGION END -----*/	//	LMCInterface::echo
	return argout;
}
//--------------------------------------------------------
/**
 *	Command Revoke related method
 *	Description: Revoke a command from the scheduler queue
 *
 *	@param argin Arguments
 *               [0]: RevokeCmdId
 *	@returns 
 */
//--------------------------------------------------------
Tango::DevString LMCInterface::revoke(Tango::DevString argin)
{
	Tango::DevString argout;
	DEBUG_STREAM << "LMCInterface::Revoke()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LMCInterface::revoke) ENABLED START -----*/
	
	//	Add your own code
	std::string cmd_argin= std::string(argin);	
	std::string device_name= this->get_name();
	std::string response= "";

	//============================
	//==   PARSE REQUEST
	//============================
	MessageParser_ns::Request req;
	std::string lmc_id= device_name;
	
	if(req.Parse(cmd_argin)<0){
		WARN_STREAM<<"LMCInterface::Revoke(): WARN: Invalid request message format given!"<<endl;
		MessageParser_ns::MessageUtils::MakeErrorResponse(response,req,lmc_id,"Invalid request message format given!");
		argout= CORBA::string_dup(response.c_str());
		return argout;
	}	
	
	//Check if mandatory commandID to be revoked is given	
	int arg_index= -1;
	if(!req.FindArgument(arg_index,"revokeCmdID")){
		WARN_STREAM<<"LMCInterface::Revoke(): WARN: Invalid request message given (missing args)!"<<endl;
		MessageParser_ns::MessageUtils::MakeErrorResponse(response,req,lmc_id,"Invalid request message given (missing args)!");
		argout= CORBA::string_dup(response.c_str());
		return argout;
	}

	MessageParser_ns::ArgumentImpl<std::string>* revokeCmdIDArg= static_cast<MessageParser_ns::ArgumentImpl<std::string>*>(req.GetArgument(arg_index));
	std::string revokeCmdID= revokeCmdIDArg->value;

	//Revoking command in the scheduler
	DEBUG_STREAM<<"LMCInterface::Revoke(): INFO: Rekoving command: "<<revokeCmdID<<endl;
	
	Tango::DeviceData din;
	Tango::DeviceData dout;
	const Tango::DevVarLongStringArray* cmd_argout= 0;
	try{
		din << revokeCmdID;
		dout= m_SchedulerDeviceProxy->command_inout("RevokeTask",din);
		dout >> cmd_argout;
	}	
	catch(Tango::DevFailed& e){
		Tango::Except::print_exception(e);
		ERROR_STREAM<<"LMCInterface::Revoke(): ERROR: Failed to execute command!"<<endl;
		MessageParser_ns::MessageUtils::MakeErrorResponse(response,req,lmc_id,"Failed to execute command!");
		argout= CORBA::string_dup(response.c_str());
		return argout;
	}

	//Getting cmd result
	int res_ack= (cmd_argout->lvalue)[0];
	std::string res_msg= std::string( (cmd_argout->svalue)[0] );
	if(res_ack!=0){
		INFO_STREAM<<"LMCInterface::Revoke(): INFO: Command execution failed on device (status="<<res_msg<<")!"<<endl;
		MessageParser_ns::MessageUtils::MakeErrorResponse(response,req,lmc_id,"Command execution failed on device!");
		argout= CORBA::string_dup(response.c_str());
		return argout;
	}	
	
	//Set response
	MessageParser_ns::MessageUtils::MakeSuccessResponse(response,req,lmc_id,"Command executed with success");
	argout= CORBA::string_dup(response.c_str());
	
	/*----- PROTECTED REGION END -----*/	//	LMCInterface::revoke
	return argout;
}
//--------------------------------------------------------
/**
 *	Command FlushCommandQueue related method
 *	Description: Flush the command queue
 *
 *	@param argin 
 *	@returns 
 */
//--------------------------------------------------------
Tango::DevString LMCInterface::flush_command_queue(Tango::DevString argin)
{
	Tango::DevString argout;
	DEBUG_STREAM << "LMCInterface::FlushCommandQueue()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LMCInterface::flush_command_queue) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	LMCInterface::flush_command_queue
	return argout;
}
//--------------------------------------------------------
/**
 *	Method      : LMCInterface::add_dynamic_commands()
 *	Description : Create the dynamic commands if any
 *                for specified device.
 */
//--------------------------------------------------------
void LMCInterface::add_dynamic_commands()
{
	/*----- PROTECTED REGION ID(LMCInterface::add_dynamic_commands) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic commands if any
	
	/*----- PROTECTED REGION END -----*/	//	LMCInterface::add_dynamic_commands
}

/*----- PROTECTED REGION ID(LMCInterface::namespace_ending) ENABLED START -----*/

//	Additional Methods

void LMCInterface::InitDevices(){

	//## Init scheduler
	m_SchedulerDeviceProxy= 0;
	std::string scheduler_addr= "DSHLMC/Scheduler/id1";
	try {
		m_SchedulerDeviceProxy= new Tango::DeviceProxy(scheduler_addr.c_str());
	}
	catch(Tango::DevFailed& e){
		WARN_STREAM<<"LMCInterface::InitDevices(): WARN: Failed to connect to scheduler device ("<<scheduler_addr<<")"<<endl;
	}
	catch(...){
		WARN_STREAM<<"LMCInterface::InitDevices(): WARN: Unknown exception while connecting to scheduler device ("<<scheduler_addr<<")"<<endl;	
	}

	//## Init configurator
	//...
	
}//close InitDevices()

/*----- PROTECTED REGION END -----*/	//	LMCInterface::namespace_ending
} //	namespace
