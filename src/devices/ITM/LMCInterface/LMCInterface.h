/*----- PROTECTED REGION ID(LMCInterface.h) ENABLED START -----*/
//=============================================================================
//
// file :        LMCInterface.h
//
// description : Include file for the LMCInterface class
//
// project :     LMC Interface
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef LMCInterface_H
#define LMCInterface_H

#include <tango.h>
#include <BaseDevice.h>


/*----- PROTECTED REGION END -----*/	//	LMCInterface.h

/**
 *  LMCInterface class description:
 *    Device class implementing LMC-TM interface
 */

namespace LMCInterface_ns
{
/*----- PROTECTED REGION ID(LMCInterface::Additional Class Declarations) ENABLED START -----*/

//	Additional Class Declarations

/*----- PROTECTED REGION END -----*/	//	LMCInterface::Additional Class Declarations

class LMCInterface : public BaseDevice_ns::BaseDevice
{

/*----- PROTECTED REGION ID(LMCInterface::Data Members) ENABLED START -----*/

//	Add your own data members

/*----- PROTECTED REGION END -----*/	//	LMCInterface::Data Members



//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	LMCInterface(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	LMCInterface(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	LMCInterface(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */
	~LMCInterface() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();


//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : LMCInterface::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);


	//--------------------------------------------------------
	/**
	 *	Method      : LMCInterface::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();




//	Command related methods
public:
	/**
	 *	Command echo related method
	 *	Description: A dummy echo command for testing purpose
	 *
	 *	@param argin 
	 *	@returns 
	 */
	virtual Tango::DevString echo(Tango::DevString argin);
	virtual bool is_echo_allowed(const CORBA::Any &any);
	/**
	 *	Command Revoke related method
	 *	Description: Revoke a command from the scheduler queue
	 *
	 *	@param argin Arguments
	 *               [0]: RevokeCmdId
	 *	@returns 
	 */
	virtual Tango::DevString revoke(Tango::DevString argin);
	virtual bool is_Revoke_allowed(const CORBA::Any &any);
	/**
	 *	Command FlushCommandQueue related method
	 *	Description: Flush the command queue
	 *
	 *	@param argin 
	 *	@returns 
	 */
	virtual Tango::DevString flush_command_queue(Tango::DevString argin);
	virtual bool is_FlushCommandQueue_allowed(const CORBA::Any &any);


	//--------------------------------------------------------
	/**
	 *	Method      : LMCInterface::add_dynamic_commands()
	 *	Description : Add dynamic commands if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_commands();

/*----- PROTECTED REGION ID(LMCInterface::Additional Method prototypes) ENABLED START -----*/

//	Additional Method prototypes

	protected:
		void InitDevices();

	protected:
		Tango::DeviceProxy* m_SchedulerDeviceProxy;
		

/*----- PROTECTED REGION END -----*/	//	LMCInterface::Additional Method prototypes
};

/*----- PROTECTED REGION ID(LMCInterface::Additional Classes Definitions) ENABLED START -----*/

//	Additional Classes Definitions

/*----- PROTECTED REGION END -----*/	//	LMCInterface::Additional Classes Definitions

}	//	End of namespace

#endif   //	LMCInterface_H
