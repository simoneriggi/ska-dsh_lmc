/*----- PROTECTED REGION ID(Scheduler.h) ENABLED START -----*/
//=============================================================================
//
// file :        Scheduler.h
//
// description : Include file for the Scheduler class
//
// project :     Scheduler
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef Scheduler_H
#define Scheduler_H

#include <tango.h>
#include <BaseDevice.h>
#include <SchedulerThread.h>
#include <TaskCallBack.h>
#include <TaskManager.h>


/*----- PROTECTED REGION END -----*/	//	Scheduler.h

/**
 *  Scheduler class description:
 *    Device server providing command scheduling functionalities
 */

namespace Scheduler_ns
{
/*----- PROTECTED REGION ID(Scheduler::Additional Class Declarations) ENABLED START -----*/

//	Additional Class Declarations
	class SchedulerThread;
	class MonitorThread;
	class TaskCallBack;
	class TaskManager;
	class TaskManagerThread;

/*----- PROTECTED REGION END -----*/	//	Scheduler::Additional Class Declarations

class Scheduler : public BaseDevice_ns::BaseDevice
{

/*----- PROTECTED REGION ID(Scheduler::Data Members) ENABLED START -----*/

//	Add your own data members

/*----- PROTECTED REGION END -----*/	//	Scheduler::Data Members

//	Device property data members
public:
	//	max_queueable_tasks:	Max size of task queue, e.g. maximum number of tasks that 
	//  can be inserted in the task queue
	Tango::DevLong	max_queueable_tasks;
	//	thread_heartbeat_period:	Polling period used for thread heartbeat  in seconds
	Tango::DevULong	thread_heartbeat_period;
	//	max_trackable_tasks:	Maximum  number of tasks tracked, e.g. inserted and monitored 
	//  in the task collection.
	Tango::DevLong	max_trackable_tasks;
	//	max_cacheable_device_proxies:	Maximum number of cacheable device proxies. 
	//  If the number of cached device proxies exceeds the limit all 
	//  requested command to be scheduled will be refused.
	Tango::DevLong	max_cacheable_device_proxies;
	//	max_task_timeout:	Maximum duration in seconds allowed for tasks in the queue.
	//  Tasks without an expiration time given will be assigned an 
	//  expiration time = start + timeout.
	Tango::DevLong	max_task_timeout;
	//	task_history_time_depth:	Max time interval (in seconds) used to maintain tasks in the task list.
	Tango::DevLong	task_history_time_depth;

//	Attribute data members
public:
	Tango::DevString	*attr_finalResponse_read;
	Tango::DevString	*attr_intermediateResponse_read;

//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	Scheduler(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	Scheduler(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	Scheduler(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */
	~Scheduler() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Read the device properties from database
	 */
	void get_device_property();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();


//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : Scheduler::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);

/**
 *	Attribute finalResponse related methods
 *	Description: 
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_finalResponse(Tango::Attribute &attr);
	virtual bool is_finalResponse_allowed(Tango::AttReqType type);
/**
 *	Attribute intermediateResponse related methods
 *	Description: 
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_intermediateResponse(Tango::Attribute &attr);
	virtual bool is_intermediateResponse_allowed(Tango::AttReqType type);


	//--------------------------------------------------------
	/**
	 *	Method      : Scheduler::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();



//	pipe related methods
public:
	//	Pipe FinalResponsePipe
	bool is_FinalResponsePipe_allowed(Tango::PipeReqType);
	void read_FinalResponsePipe(Tango::Pipe &);
	//	Pipe IntermediateResponsePipe
	bool is_IntermediateResponsePipe_allowed(Tango::PipeReqType);
	void read_IntermediateResponsePipe(Tango::Pipe &);
	//	Pipe queued_tasks
	bool is_queued_tasks_allowed(Tango::PipeReqType);
	void read_queued_tasks(Tango::Pipe &);
	//	Pipe tasks
	bool is_tasks_allowed(Tango::PipeReqType);
	void read_tasks(Tango::Pipe &);
	//	Pipe myPipe
	bool is_myPipe_allowed(Tango::PipeReqType);
	void read_myPipe(Tango::Pipe &);

//	Command related methods
public:
	/**
	 *	Command ScheduleTask related method
	 *	Description: Schedule a command
	 *
	 *	@param argin [0]: Request arg 
	 *               [1]: Proxy device name to be contacted for request
	 *               [2]: Command name in proxy device (optional)
	 *	@returns Long arg
	 *           [0]: ack
	 *           
	 *           String arg
	 *           [0]: err/info description
	 */
	virtual Tango::DevVarLongStringArray *schedule_task(const Tango::DevVarStringArray *argin);
	virtual bool is_ScheduleTask_allowed(const CORBA::Any &any);
	/**
	 *	Command TestSchedule related method
	 *	Description: 
	 *
	 *	@param argin 
	 *	@returns 
	 */
	virtual Tango::DevVarLongStringArray *test_schedule(Tango::DevString argin);
	virtual bool is_TestSchedule_allowed(const CORBA::Any &any);
	/**
	 *	Command FlushTaskQueue related method
	 *	Description: Flush the task queue. All tasks in the queue will be removed.
	 *               Idle tasks only will be removed from the task list history.
	 *
	 *	@returns 
	 */
	virtual Tango::DevVarLongStringArray *flush_task_queue();
	virtual bool is_FlushTaskQueue_allowed(const CORBA::Any &any);
	/**
	 *	Command RevokeTask related method
	 *	Description: Remove a task with given id from the queue and also from
	 *               the task history list.
	 *
	 *	@param argin Task id
	 *	@returns 
	 */
	virtual Tango::DevVarLongStringArray *revoke_task(Tango::DevString argin);
	virtual bool is_RevokeTask_allowed(const CORBA::Any &any);
	/**
	 *	Command GetNQueuedTasks related method
	 *	Description: Return the number of tasks actually present in the queue
	 *
	 *	@returns Long arg
	 *           [0]: ack code 
	 *           [1]: current queue size
	 */
	virtual Tango::DevVarLongStringArray *get_nqueued_tasks();
	virtual bool is_GetNQueuedTasks_allowed(const CORBA::Any &any);
	/**
	 *	Command GetNRunningTasks related method
	 *	Description: Get number of running tasks
	 *
	 *	@returns 
	 */
	virtual Tango::DevVarLongStringArray *get_nrunning_tasks();
	virtual bool is_GetNRunningTasks_allowed(const CORBA::Any &any);
	/**
	 *	Command PrintTasks related method
	 *	Description: Print tasks present in the list (mainly for debugging purpose)
	 *
	 */
	virtual void print_tasks();
	virtual bool is_PrintTasks_allowed(const CORBA::Any &any);
	/**
	 *	Command ClearTasks related method
	 *	Description: Clear task list
	 *
	 */
	virtual void clear_tasks();
	virtual bool is_ClearTasks_allowed(const CORBA::Any &any);


	//--------------------------------------------------------
	/**
	 *	Method      : Scheduler::add_dynamic_commands()
	 *	Description : Add dynamic commands if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_commands();

/*----- PROTECTED REGION ID(Scheduler::Additional Method prototypes) ENABLED START -----*/

//	Additional Method prototypes
	protected:
		void Init();
		
		template<typename T>
			int Schedule(std::string cmd_id,std::string cmd_name,std::string tstart,T cmd_argin, std::string tend= "",std::string cmd_device="");
			
	protected:
		SchedulerThread* m_SchedulerThread;
		MonitorThread* m_MonitorThread;
		bool m_StopThreadFlag;
	
		omni_mutex* m_mutex;
		TaskCallBack* m_TaskCallBack;
		TaskManager* m_TaskManager;

		double x;
		double y;
		Tango::DevicePipeBlob myPipeBlob;
		Tango::DevicePipeBlob m_FinalResponsePipeBlob;

	friend class SchedulerThread;
	friend class MonitorThread;
	friend class TaskCallBack;	
	friend class TaskManager;	

/*----- PROTECTED REGION END -----*/	//	Scheduler::Additional Method prototypes
};

/*----- PROTECTED REGION ID(Scheduler::Additional Classes Definitions) ENABLED START -----*/

//	Additional Classes Definitions

/*----- PROTECTED REGION END -----*/	//	Scheduler::Additional Classes Definitions

}	//	End of namespace

#endif   //	Scheduler_H
