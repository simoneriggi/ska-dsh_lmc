/*----- PROTECTED REGION ID(SchedulerClass.h) ENABLED START -----*/
//=============================================================================
//
// file :        SchedulerClass.h
//
// description : Include for the Scheduler root class.
//               This class is the singleton class for
//                the Scheduler device class.
//               It contains all properties and methods which the 
//               Scheduler requires only once e.g. the commands.
//
// project :     Scheduler
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef SchedulerClass_H
#define SchedulerClass_H

#include <tango.h>
#include <BaseDeviceClass.h>
#include <Scheduler.h>


/*----- PROTECTED REGION END -----*/	//	SchedulerClass.h


namespace Scheduler_ns
{
/*----- PROTECTED REGION ID(SchedulerClass::classes for dynamic creation) ENABLED START -----*/


/*----- PROTECTED REGION END -----*/	//	SchedulerClass::classes for dynamic creation

//=========================================
//	Define classes for pipes
//=========================================
//	Pipe FinalResponse class definition
class FinalResponseClass: public Tango::Pipe
{
public:
	FinalResponseClass(const string &name, Tango::DispLevel level)
		:Pipe(name, level) {};

	~FinalResponseClass() {};

	virtual bool is_allowed (Tango::DeviceImpl *dev,Tango::PipeReqType _prt)
		{return (static_cast<Scheduler *>(dev))->is_FinalResponse_allowed(_prt);}
	virtual void read(Tango::DeviceImpl *dev)
		{(static_cast<Scheduler *>(dev))->read_FinalResponse(*this);}
};

//	Pipe IntermediateResponse class definition
class IntermediateResponseClass: public Tango::Pipe
{
public:
	IntermediateResponseClass(const string &name, Tango::DispLevel level)
		:Pipe(name, level) {};

	~IntermediateResponseClass() {};

	virtual bool is_allowed (Tango::DeviceImpl *dev,Tango::PipeReqType _prt)
		{return (static_cast<Scheduler *>(dev))->is_IntermediateResponse_allowed(_prt);}
	virtual void read(Tango::DeviceImpl *dev)
		{(static_cast<Scheduler *>(dev))->read_IntermediateResponse(*this);}
};

//	Pipe queued_tasks class definition
class queued_tasksClass: public Tango::Pipe
{
public:
	queued_tasksClass(const string &name, Tango::DispLevel level)
		:Pipe(name, level) {};

	~queued_tasksClass() {};

	virtual bool is_allowed (Tango::DeviceImpl *dev,Tango::PipeReqType _prt)
		{return (static_cast<Scheduler *>(dev))->is_queued_tasks_allowed(_prt);}
	virtual void read(Tango::DeviceImpl *dev)
		{(static_cast<Scheduler *>(dev))->read_queued_tasks(*this);}
};

//	Pipe tasks class definition
class tasksClass: public Tango::Pipe
{
public:
	tasksClass(const string &name, Tango::DispLevel level)
		:Pipe(name, level) {};

	~tasksClass() {};

	virtual bool is_allowed (Tango::DeviceImpl *dev,Tango::PipeReqType _prt)
		{return (static_cast<Scheduler *>(dev))->is_tasks_allowed(_prt);}
	virtual void read(Tango::DeviceImpl *dev)
		{(static_cast<Scheduler *>(dev))->read_tasks(*this);}
};


//=========================================
//	Define classes for commands
//=========================================
//	Command ScheduleTask class definition
class ScheduleTaskClass : public Tango::Command
{
public:
	ScheduleTaskClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ScheduleTaskClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ScheduleTaskClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<Scheduler *>(dev))->is_ScheduleTask_allowed(any);}
};

//	Command TestSchedule class definition
class TestScheduleClass : public Tango::Command
{
public:
	TestScheduleClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	TestScheduleClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~TestScheduleClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<Scheduler *>(dev))->is_TestSchedule_allowed(any);}
};

//	Command FlushTaskQueue class definition
class FlushTaskQueueClass : public Tango::Command
{
public:
	FlushTaskQueueClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	FlushTaskQueueClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~FlushTaskQueueClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<Scheduler *>(dev))->is_FlushTaskQueue_allowed(any);}
};

//	Command RevokeTask class definition
class RevokeTaskClass : public Tango::Command
{
public:
	RevokeTaskClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	RevokeTaskClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~RevokeTaskClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<Scheduler *>(dev))->is_RevokeTask_allowed(any);}
};

//	Command GetNQueuedTasks class definition
class GetNQueuedTasksClass : public Tango::Command
{
public:
	GetNQueuedTasksClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	GetNQueuedTasksClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~GetNQueuedTasksClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<Scheduler *>(dev))->is_GetNQueuedTasks_allowed(any);}
};

//	Command GetNRunningTasks class definition
class GetNRunningTasksClass : public Tango::Command
{
public:
	GetNRunningTasksClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	GetNRunningTasksClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~GetNRunningTasksClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<Scheduler *>(dev))->is_GetNRunningTasks_allowed(any);}
};

//	Command PrintTasks class definition
class PrintTasksClass : public Tango::Command
{
public:
	PrintTasksClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	PrintTasksClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~PrintTasksClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<Scheduler *>(dev))->is_PrintTasks_allowed(any);}
};


/**
 *	The SchedulerClass singleton definition
 */

#ifdef _TG_WINDOWS_
class __declspec(dllexport)  SchedulerClass : public BaseDevice_ns::BaseDeviceClass
#else
class SchedulerClass : public BaseDevice_ns::BaseDeviceClass
#endif
{
	/*----- PROTECTED REGION ID(SchedulerClass::Additionnal DServer data members) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	SchedulerClass::Additionnal DServer data members

	public:
		//	write class properties data members
		Tango::DbData	cl_prop;
		Tango::DbData	cl_def_prop;
		Tango::DbData	dev_def_prop;
	
		//	Method prototypes
		static SchedulerClass *init(const char *);
		static SchedulerClass *instance();
		~SchedulerClass();
		Tango::DbDatum	get_class_property(string &);
		Tango::DbDatum	get_default_device_property(string &);
		Tango::DbDatum	get_default_class_property(string &);
	
	protected:
		SchedulerClass(string &);
		static SchedulerClass *_instance;
		void command_factory();
		void attribute_factory(vector<Tango::Attr *> &);
		void pipe_factory();
		void write_class_property();
		void set_default_property();
		void get_class_property();
		string get_cvstag();
		string get_cvsroot();
	
	private:
		void device_factory(const Tango::DevVarStringArray *);
		void create_static_attribute_list(vector<Tango::Attr *> &);
		void erase_dynamic_attributes(const Tango::DevVarStringArray *,vector<Tango::Attr *> &);
		vector<string>	defaultAttList;
		Tango::Attr *get_attr_object_by_name(vector<Tango::Attr *> &att_list, string attname);
};

}	//	End of namespace

#endif   //	Scheduler_H
