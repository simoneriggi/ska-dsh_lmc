/*----- PROTECTED REGION ID(LMCLogger.cpp) ENABLED START -----*/
static const char *RcsId = "$Id:  $";
//=============================================================================
//
// file :        LMCLogger.cpp
//
// description : C++ source for the LMCLogger class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               LMCLogger are implemented in this file.
//
// project :     LMCLogger
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <LMCLogger.h>
#include <LMCLoggerClass.h>

//#ifndef APPENDERS_HAVE_LEVEL_THRESHOLD
//	#define APPENDERS_HAVE_LEVEL_THRESHOLD 1
//#endif

#include <tango.h>
#include <log4tango/Appender.hh>

#include <syslog.h>
 
#include <log4cxx/logger.h>
#include <log4cxx/xml/domconfigurator.h>
#include <log4cxx/simplelayout.h>
#include <log4cxx/patternlayout.h>
#include <log4cxx/consoleappender.h>
#include <log4cxx/propertyconfigurator.h>
#include <log4cxx/net/syslogappender.h>
#include <log4cxx/helpers/exception.h>


/*----- PROTECTED REGION END -----*/	//	LMCLogger.cpp

/**
 *  LMCLogger class description:
 *    LMCLogger device server
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name        |  Method name
//================================================================
//  State               |  Inherited (no method)
//  Status              |  Inherited (no method)
//  log                 |  log
//  SetFileLogLevel     |  set_file_log_level
//  SetDeviceLogLevel   |  set_device_log_level
//  SetConsoleLogLevel  |  set_console_log_level
//  SetSysLogLevel      |  set_sys_log_level
//  EnableLogForward    |  enable_log_forward
//  TestLog             |  test_log
//================================================================

//================================================================
//  Attributes managed are:
//================================================================
//  syslog_level  |  Tango::DevString	Scalar
//  enable_logfw  |  Tango::DevShort	Scalar
//================================================================

namespace LMCLogger_ns
{
/*----- PROTECTED REGION ID(LMCLogger::namespace_starting) ENABLED START -----*/

//	static initializations

/*----- PROTECTED REGION END -----*/	//	LMCLogger::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : LMCLogger::LMCLogger()
 *	Description : Constructors for a Tango device
 *                implementing the classLMCLogger
 */
//--------------------------------------------------------
LMCLogger::LMCLogger(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(LMCLogger::constructor_1) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	LMCLogger::constructor_1
}
//--------------------------------------------------------
LMCLogger::LMCLogger(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(LMCLogger::constructor_2) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	LMCLogger::constructor_2
}
//--------------------------------------------------------
LMCLogger::LMCLogger(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(LMCLogger::constructor_3) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	LMCLogger::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : LMCLogger::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void LMCLogger::delete_device()
{
	DEBUG_STREAM << "LMCLogger::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(LMCLogger::delete_device) ENABLED START -----*/
	
	//	Delete device allocated objects
	
	/*----- PROTECTED REGION END -----*/	//	LMCLogger::delete_device
	delete[] attr_syslog_level_read;
	delete[] attr_enable_logfw_read;
}

//--------------------------------------------------------
/**
 *	Method      : LMCLogger::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void LMCLogger::init_device()
{
	DEBUG_STREAM << "LMCLogger::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(LMCLogger::init_device_before) ENABLED START -----*/
	
	//	Initialization before get_device_property() call
	
	/*----- PROTECTED REGION END -----*/	//	LMCLogger::init_device_before
	

	//	Get the device properties from database
	get_device_property();
	
	attr_syslog_level_read = new Tango::DevString[1];
	attr_enable_logfw_read = new Tango::DevShort[1];
	/*----- PROTECTED REGION ID(LMCLogger::init_device) ENABLED START -----*/
	
	//	Initialize device
	//## Init sys logger
	if(InitSysLogger()<0){
		ERROR_STREAM<<"BaseDevice::init_device(): ERROR: Failed to initialize sys logger!"<<endl;
	}

	//## Init log forwarder flag from property
	*attr_enable_logfw_read= startup_enable_logfw;

	
	/*----- PROTECTED REGION END -----*/	//	LMCLogger::init_device
}

//--------------------------------------------------------
/**
 *	Method      : LMCLogger::get_device_property()
 *	Description : Read database to initialize property data members.
 */
//--------------------------------------------------------
void LMCLogger::get_device_property()
{
	/*----- PROTECTED REGION ID(LMCLogger::get_device_property_before) ENABLED START -----*/
	
	//	Initialize property data members
	
	/*----- PROTECTED REGION END -----*/	//	LMCLogger::get_device_property_before


	//	Read device properties from database.
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("syslog_facility"));
	dev_prop.push_back(Tango::DbDatum("default_syslog_level"));
	dev_prop.push_back(Tango::DbDatum("startup_enable_logfw"));

	//	is there at least one property to be read ?
	if (dev_prop.size()>0)
	{
		//	Call database and extract values
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);
	
		//	get instance on LMCLoggerClass to get class property
		Tango::DbDatum	def_prop, cl_prop;
		LMCLoggerClass	*ds_class =
			(static_cast<LMCLoggerClass *>(get_device_class()));
		int	i = -1;

		//	Try to initialize syslog_facility from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  syslog_facility;
		else {
			//	Try to initialize syslog_facility from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  syslog_facility;
		}
		//	And try to extract syslog_facility value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  syslog_facility;

		//	Try to initialize default_syslog_level from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  default_syslog_level;
		else {
			//	Try to initialize default_syslog_level from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  default_syslog_level;
		}
		//	And try to extract default_syslog_level value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  default_syslog_level;

		//	Try to initialize startup_enable_logfw from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  startup_enable_logfw;
		else {
			//	Try to initialize startup_enable_logfw from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  startup_enable_logfw;
		}
		//	And try to extract startup_enable_logfw value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  startup_enable_logfw;

	}

	/*----- PROTECTED REGION ID(LMCLogger::get_device_property_after) ENABLED START -----*/
	
	//	Check device property data members init
	
	/*----- PROTECTED REGION END -----*/	//	LMCLogger::get_device_property_after
}

//--------------------------------------------------------
/**
 *	Method      : LMCLogger::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void LMCLogger::always_executed_hook()
{
	DEBUG_STREAM << "LMCLogger::always_executed_hook()  " << device_name << endl;
	/*----- PROTECTED REGION ID(LMCLogger::always_executed_hook) ENABLED START -----*/
	
	//	code always executed before all requests
	
	/*----- PROTECTED REGION END -----*/	//	LMCLogger::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : LMCLogger::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void LMCLogger::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "LMCLogger::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(LMCLogger::read_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	LMCLogger::read_attr_hardware
}

//--------------------------------------------------------
/**
 *	Read attribute syslog_level related method
 *	Description: Log level used for logging to syslog (OFF,TRACE,DEBUG,INFO,WARN,ERROR,FATAL)
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LMCLogger::read_syslog_level(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LMCLogger::read_syslog_level(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LMCLogger::read_syslog_level) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_syslog_level_read);
	
	/*----- PROTECTED REGION END -----*/	//	LMCLogger::read_syslog_level
}
//--------------------------------------------------------
/**
 *	Read attribute enable_logfw related method
 *	Description: Flag signalling if log forwarding is active/inactive
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LMCLogger::read_enable_logfw(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LMCLogger::read_enable_logfw(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LMCLogger::read_enable_logfw) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_enable_logfw_read);
	
	/*----- PROTECTED REGION END -----*/	//	LMCLogger::read_enable_logfw
}

//--------------------------------------------------------
/**
 *	Method      : LMCLogger::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void LMCLogger::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(LMCLogger::add_dynamic_attributes) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic attributes if any
	
	/*----- PROTECTED REGION END -----*/	//	LMCLogger::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Command log related method
 *	Description: Command to handle logs received from devices
 *
 *	@param argin Logging info received from emitter devices
 */
//--------------------------------------------------------
void LMCLogger::log(const Tango::DevVarStringArray *argin)
{
	DEBUG_STREAM << "LMCLogger::log()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LMCLogger::log) ENABLED START -----*/
	
	//	Add your own code
	
	try {
		int n= argin->length();
		std::string log_level= std::string( (*argin)[1] );
		std::string log_source= std::string( (*argin)[2] ); 
		std::string log_msg= std::string( (*argin)[3] );
		double timestamp_ms = atof((*argin)[0]);
    unsigned long timestamp_sec = (unsigned long)(timestamp_ms/1000.);
    unsigned long timestamp_musec = (unsigned long)((timestamp_ms - timestamp_sec*1000.) * 1000);
    log4tango::TimeStamp t(timestamp_sec, timestamp_musec);
		DEBUG_STREAM<<"LMCLogger::log() - Log received (n="<<n<<") @ time="<<timestamp_ms<<", level="<<log_level<<", source="<<log_source<<", msg="<<log_msg<<endl;

		// This call made the conversion between tango logging level and log4tango logging level
		//Tango::LogLevel tango_level = GetTangoLogLevelFromString(log_level);
  	//log4tango::Level::Value log4_level= Tango::Logging::tango_to_log4tango_level(tango_level, true); 
 		log4tango::Level::Value log4_level= GetLog4LevelFromString(log_level);

		//Forward log with same timestamp
		(this->get_logger())->forward_log(log_source, t, log4_level, log_msg); 
	      
	}//close try
	catch(Tango::DevFailed& e){
		ERROR_STREAM<<"LMCLogger::log() - Tango exception occurred while re-logging incoming log!"<<endl;
		return;
	}
	catch(...){
		ERROR_STREAM<<"LMCLogger::log() - Unknown exception occurred while re-logging incoming log!"<<endl;		
		return;
	}


	/*----- PROTECTED REGION END -----*/	//	LMCLogger::log
}
//--------------------------------------------------------
/**
 *	Command SetFileLogLevel related method
 *	Description: Set log level used for logging to file(s)
 *
 *	@param argin The requested log level
 *               (0=OFF, 1=FATAL, 2=ERROR, 3=WARNING, 4=INFO, 5=DEBUG)
 */
//--------------------------------------------------------
void LMCLogger::set_file_log_level(Tango::DevLong argin)
{
	DEBUG_STREAM << "LMCLogger::SetFileLogLevel()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LMCLogger::set_file_log_level) ENABLED START -----*/
	
	//	Add your own code
	#ifdef APPENDERS_HAVE_LEVEL_THRESHOLD
	try {
		//Convert given Tango log level in log4 code
		log4tango::Level::Value log4_level= Tango::Logging::tango_to_log4tango_level(static_cast<Tango::LogLevel>(argin), true);

		log4tango::Logger* logger= this->get_logger();
		log4tango::AppenderList appenders= logger->get_all_appenders();
		DEBUG_STREAM<<"LMCLogger::SetFileLogLevel() - "<<appenders.size()<<" appenders present..."<<endl;
		
		for(unsigned int i=0;i<appenders.size();i++){
			std::string appender_name= appenders[i]->get_name();
			DEBUG_STREAM<<"LMCLogger::SetFileLogLevel() - Appender no. "<<i<<", name="<<appender_name<<endl;
				
			int log_target= GetAppenderType(appenders[i]);
			if(log_target==-1) continue;
			Tango::LogTarget log4_target= static_cast<Tango::LogTarget>(log_target);
			if(log4_target!=Tango::LogTarget::LOG_FILE) continue; 
			appenders[i]->set_level(log4_level);
		}//end loop appenders
	}//close try
	catch(Tango::DevFailed& e){
		ERROR_STREAM<<"LMCLogger::SetFileLogLevel() - Failed to set file appender log level!"<<endl;
		return;
	}
	#else
		WARN_STREAM<<"LMCLogger::SetFileLogLevel() - APPENDERS_HAVE_LEVEL_THRESHOLD is disabled, cannot set log level for separate appenders"<<endl;
	#endif

	/*----- PROTECTED REGION END -----*/	//	LMCLogger::set_file_log_level
}
//--------------------------------------------------------
/**
 *	Command SetDeviceLogLevel related method
 *	Description: Set log level used for logging to device(s)
 *
 *	@param argin The requested log level
 *               (0=OFF, 1=FATAL, 2=ERROR, 3=WARNING, 4=INFO, 5=DEBUG)
 */
//--------------------------------------------------------
void LMCLogger::set_device_log_level(Tango::DevLong argin)
{
	DEBUG_STREAM << "LMCLogger::SetDeviceLogLevel()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LMCLogger::set_device_log_level) ENABLED START -----*/
	
	//	Add your own code
	#ifdef APPENDERS_HAVE_LEVEL_THRESHOLD
	try {
		//Convert given Tango log level in log4 code
		log4tango::Level::Value log4_level= Tango::Logging::tango_to_log4tango_level(static_cast<Tango::LogLevel>(argin), true);

		log4tango::Logger* logger= this->get_logger();
		log4tango::AppenderList appenders= logger->get_all_appenders();
		DEBUG_STREAM<<"LMCLogger::SetDeviceLogLevel() - "<<appenders.size()<<" appenders present..."<<endl;
		
		for(unsigned int i=0;i<appenders.size();i++){
			std::string appender_name= appenders[i]->get_name();
			DEBUG_STREAM<<"LMCLogger::SetDeviceLogLevel() - Appender no. "<<i<<", name="<<appender_name<<endl;
				
			int log_target= GetAppenderType(appenders[i]);
			if(log_target==-1) continue;
			Tango::LogTarget log4_target= static_cast<Tango::LogTarget>(log_target);
			if(log4_target!=Tango::LogTarget::LOG_DEVICE) continue; 
			appenders[i]->set_level(log4_level);
		}//end loop appenders
	}//close try
	catch(Tango::DevFailed& e){
		ERROR_STREAM<<"LMCLogger::SetDeviceLogLevel() - Failed to set file appender log level!"<<endl;
		return;
	}
	#else
		WARN_STREAM<<"LMCLogger::SetDeviceLogLevel() - APPENDERS_HAVE_LEVEL_THRESHOLD is disabled, cannot set log level for separate appenders"<<endl;
	#endif

	/*----- PROTECTED REGION END -----*/	//	LMCLogger::set_device_log_level
}
//--------------------------------------------------------
/**
 *	Command SetConsoleLogLevel related method
 *	Description: Set log level used for logging to console
 *
 *	@param argin The requested log level
 *               (0=OFF, 1=FATAL, 2=ERROR, 3=WARNING, 4=INFO, 5=DEBUG)
 */
//--------------------------------------------------------
void LMCLogger::set_console_log_level(Tango::DevLong argin)
{
	DEBUG_STREAM << "LMCLogger::SetConsoleLogLevel()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LMCLogger::set_console_log_level) ENABLED START -----*/
	
	//	Add your own code
	#ifdef APPENDERS_HAVE_LEVEL_THRESHOLD
	try {
		//Convert given Tango log level in log4 code
		log4tango::Level::Value log4_level= Tango::Logging::tango_to_log4tango_level(static_cast<Tango::LogLevel>(argin), true);

		log4tango::Logger* logger= this->get_logger();
		log4tango::AppenderList appenders= logger->get_all_appenders();
		DEBUG_STREAM<<"LMCLogger::SetConsoleLogLevel() - "<<appenders.size()<<" appenders present..."<<endl;
		
		for(unsigned int i=0;i<appenders.size();i++){
			std::string appender_name= appenders[i]->get_name();
			DEBUG_STREAM<<"LMCLogger::SetConsoleLogLevel() - Appender no. "<<i<<", name="<<appender_name<<endl;
				
			int log_target= GetAppenderType(appenders[i]);
			if(log_target==-1) continue;
			Tango::LogTarget log4_target= static_cast<Tango::LogTarget>(log_target);
			if(log4_target!=Tango::LogTarget::LOG_CONSOLE) continue; 
			appenders[i]->set_level(log4_level);
		}//end loop appenders
	}//close try
	catch(Tango::DevFailed& e){
		ERROR_STREAM<<"LMCLogger::SetConsoleLogLevel() - Failed to set file appender log level!"<<endl;
		return;
	}
	#else
		WARN_STREAM<<"LMCLogger::SetConsoleLogLevel() - APPENDERS_HAVE_LEVEL_THRESHOLD is disabled, cannot set log level for separate appenders"<<endl;
	#endif

	/*----- PROTECTED REGION END -----*/	//	LMCLogger::set_console_log_level
}
//--------------------------------------------------------
/**
 *	Command SetSysLogLevel related method
 *	Description: Set the log level for logging to syslog
 *
 *	@param argin The requested log level
 *               (0=OFF, 1=FATAL, 2=ERROR, 3=WARNING, 4=INFO, 5=DEBUG)
 */
//--------------------------------------------------------
void LMCLogger::set_sys_log_level(Tango::DevString argin)
{
	DEBUG_STREAM << "LMCLogger::SetSysLogLevel()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LMCLogger::set_sys_log_level) ENABLED START -----*/
	
	//	Add your own code
	
	//Check argin given
	if( strcmp(argin,"")==0 || 
			(strcmp(argin,"OFF")!=0 && 
			 strcmp(argin,"FATAL")!=0 && 
			 strcmp(argin,"ERROR")!=0 && 
       strcmp(argin,"INFO")!=0 && 
			 strcmp(argin,"DEBUG")!=0 && 
			 strcmp(argin,"WARNING")!=0) 
		){
		WARN_STREAM<<"LMCLogger::set_sys_log_level() - Invalid syslog level given, ignoring it!"<<endl;
		return;
	}

	
	//Update standard syslog level property in DB (in this way when server restart it will be initialized to this default)
	if (Tango::Util::instance()->_UseDb==true){
		try {
			Tango::DbDatum prop_data("default_syslog_level");
			Tango::DbData db_data; 
			prop_data << argin; 
			db_data.push_back(prop_data); 
			get_db_device()->put_property(db_data);
		}
		catch(Tango::DevFailed& e){
			ERROR_STREAM<<"LMCLogger::set_sys_log_level() - Failed to update default_syslog_level property in DB!"<<endl;
			return;
		}
	}//close if

	//Set attribute value
	//std::string old_syslog_level= *attr_syslog_level_read;
	*attr_syslog_level_read= CORBA::string_dup(argin);

	//If everything went fine, change the syslog level
	try {
		log4cxx::LoggerPtr logger(log4cxx::Logger::getLogger("sysLogger"));
		log4cxx::LevelPtr thisLogLevel= logger->getLevel();
		if(!thisLogLevel) thisLogLevel= log4cxx::Level::getOff();
		
		//logger->setLevel(log4cxx::Level::toLevel(*attr_syslog_level_read,log4cxx::Level::getOff()));  // Log level set to OFF if a wrong name is given
		logger->setLevel(log4cxx::Level::toLevel(*attr_syslog_level_read,thisLogLevel));  // Log level set to OFF if a wrong name is given
	}
	catch(log4cxx::helpers::Exception& e){
		ERROR_STREAM<<"LMCLogger::InitSysLogger() - Failed to set syslog level (ex="<<e.what()<<")"<<endl;
		return;
	}//close catch

	/*----- PROTECTED REGION END -----*/	//	LMCLogger::set_sys_log_level
}
//--------------------------------------------------------
/**
 *	Command EnableLogForward related method
 *	Description: Enable/disable log forwarding
 *
 *	@param argin 0=disable
 *               1=enable
 */
//--------------------------------------------------------
void LMCLogger::enable_log_forward(Tango::DevShort argin)
{
	DEBUG_STREAM << "LMCLogger::EnableLogForward()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LMCLogger::enable_log_forward) ENABLED START -----*/
	
	//	Add your own code
	//Set attribute value	
	if(argin!=0 || argin!=1){
		WARN_STREAM<<"LMCLogger::enable_log_forward() - Invalid flag value specified, ignoring it!"<<endl;	
		return;
	}
	short old_flag_value= *attr_enable_logfw_read;
	*attr_enable_logfw_read= argin;

	//Update standard syslog level property in DB (in this way when server restart it will be initialized to this default)
	if (Tango::Util::instance()->_UseDb==true){
		try {
			Tango::DbDatum prop_data("startup_enable_logfw");
			Tango::DbData db_data; 
			prop_data << argin; 
			db_data.push_back(prop_data); 
			get_db_device()->put_property(db_data);
		}
		catch(Tango::DevFailed& e){
			ERROR_STREAM<<"LMCLogger::enable_log_forward() - Failed to update startup_enable_logfw property in DB, ignore given flag!"<<endl;
			*attr_enable_logfw_read= old_flag_value;
			return;
		}
	}//close if

	/*----- PROTECTED REGION END -----*/	//	LMCLogger::enable_log_forward
}
//--------------------------------------------------------
/**
 *	Command TestLog related method
 *	Description: Generate a log in the device according to the given level.
 *               Used for testing purposes.
 *
 *	@param argin Long arg
 *               [0]: Level of log message
 *               (0=OFF, 1=FATAL, 2=ERROR, 3=WARNING, 4=INFO, 5=DEBUG)
 *               
 *               String arg
 *               [0]: log message
 */
//--------------------------------------------------------
void LMCLogger::test_log(const Tango::DevVarLongStringArray *argin)
{
	DEBUG_STREAM << "LMCLogger::TestLog()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LMCLogger::test_log) ENABLED START -----*/
	
	//	Add your own code
	if((argin->svalue).length()<=0 || (argin->lvalue).length()<=0)
		return;

	try{
		//Convert given Tango log level in log4 code
		Tango::DevLong log_level= (argin->lvalue)[0];
		log4tango::Level::Value log4_level= Tango::Logging::tango_to_log4tango_level(static_cast<Tango::LogLevel>(log_level), true);

		//Generate log + syslog (if enabled)
		LOG(log4_level,(argin->svalue)[0]);
	}
	catch(Tango::DevFailed& e){
		WARN_STREAM << "LMCLogger::TestLog()  - Failed to generate test log!" << endl;
	}	

	/*----- PROTECTED REGION END -----*/	//	LMCLogger::test_log
}
//--------------------------------------------------------
/**
 *	Method      : LMCLogger::add_dynamic_commands()
 *	Description : Create the dynamic commands if any
 *                for specified device.
 */
//--------------------------------------------------------
void LMCLogger::add_dynamic_commands()
{
	/*----- PROTECTED REGION ID(LMCLogger::add_dynamic_commands) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic commands if any
	
	/*----- PROTECTED REGION END -----*/	//	LMCLogger::add_dynamic_commands
}

/*----- PROTECTED REGION ID(LMCLogger::namespace_ending) ENABLED START -----*/

//	Additional Methods
int LMCLogger::InitSysLogger(){

	//Set syslog level from default value property
	*attr_syslog_level_read= CORBA::string_dup(default_syslog_level.c_str());

	//Create and configure syslog appender
	try {
		std::string device_name= this->get_name();	
		log4cxx::MDC::put( "device", device_name);
		
		// Define static logger variable
		log4cxx::LoggerPtr logger(log4cxx::Logger::getLogger("sysLogger"));
	
		log4cxx::LayoutPtr syslogLayout( new log4cxx::PatternLayout("%-5p [%l] %m%n") );
		//log4cxx::LayoutPtr syslogLayout( new log4cxx::PatternLayout("[%X{pid}] %d{dd/MM/yy HH:mm:ss.SSS} %-5p %c %m%n") );

		//Define appenders
		std::string syslog_host= Tango::Util::instance()->get_host_name();
		int syslog_facility_code= LOG_LOCAL6;
		if(syslog_facility=="local0") syslog_facility_code= LOG_LOCAL0;
		else if(syslog_facility=="local1") syslog_facility_code= LOG_LOCAL1;
		else if(syslog_facility=="local2") syslog_facility_code= LOG_LOCAL2;
		else if(syslog_facility=="local3") syslog_facility_code= LOG_LOCAL3;
		else if(syslog_facility=="local4") syslog_facility_code= LOG_LOCAL4;
		else if(syslog_facility=="local5") syslog_facility_code= LOG_LOCAL5;
		else if(syslog_facility=="local6") syslog_facility_code= LOG_LOCAL6;
		else if(syslog_facility=="local7") syslog_facility_code= LOG_LOCAL7;
		else if(syslog_facility=="syslog") syslog_facility_code= LOG_SYSLOG;
		else if(syslog_facility=="user") syslog_facility_code= LOG_USER;
		else syslog_facility_code= LOG_LOCAL6;

		DEBUG_STREAM<<"LMCLogger::InitSysLogger() - syslog_host="<<syslog_host<<", syslog_facility_code="<<syslog_facility_code<<endl;
		log4cxx::AppenderPtr syslogAppender( new log4cxx::net::SyslogAppender(syslogLayout, syslog_host, syslog_facility_code));
	
		//Init logger
		logger->addAppender(syslogAppender);
	
		//Set logging level
		logger->setLevel(log4cxx::Level::toLevel(*attr_syslog_level_read,log4cxx::Level::getOff()));  // Log level set to OFF if a wrong name is given

	}//close try block
	catch(log4cxx::helpers::Exception& e){
		ERROR_STREAM<<"LMCLogger::InitSysLogger() - Failed to initialize syslogger (ex="<<e.what()<<")"<<endl;
		return -1;
	}//close catch

	return 0;

}//close InitSysLogger()

log4tango::Level::Value LMCLogger::GetLog4LevelFromString(std::string sLevel) {
 
  if (sLevel == "DEBUG"){
  	return log4tango::Level::DEBUG;
	}
	else if (sLevel == "INFO"){
		return log4tango::Level::INFO; 
	}
	else if (sLevel == "WARN"){
		return log4tango::Level::WARN;
	}
	else if (sLevel == "ERROR"){
		return log4tango::Level::ERROR;
	}
	else if (sLevel == "FATAL"){
		return log4tango::Level::FATAL;
	}
	else if (sLevel == "OFF"){
		return log4tango::Level::OFF;
	}
	else {
		WARN_STREAM<< "LMCLogger::GetTangoLogLevelFromString() - Invalid string level (" << sLevel << ") specified!"<<endl;
		return log4tango::Level::OFF;
	}

 	return log4tango::Level::OFF;

}//close GetLog4LevelFromString()

//Tango::LogTarget LMCLogger::GetAppenderType(log4tango::Appender* appender){
int LMCLogger::GetAppenderType(log4tango::Appender* appender){
	
	if(!appender) return -1;
	std::string appender_name= appender->get_name();

	//Check if file appender
	std::size_t found = appender_name.find("file::");
	if (found!=std::string::npos) return Tango::LogTarget::LOG_FILE;
		
	//Check if console appender
	found = appender_name.find("console::");
	if (found!=std::string::npos) return Tango::LogTarget::LOG_CONSOLE;
	
	//Check if device appender
	found = appender_name.find("device::");
	if (found!=std::string::npos) return Tango::LogTarget::LOG_DEVICE;
	
	return -1;

}//close GetAppenderType()

/*
Tango::LogLevel GetTangoLogLevelFromString(std::string sLevel) {
 
	//Tango::LogLevel tango_level = Tango::LogLevel::LOG_OFF;

  if (sLevel == "DEBUG"){
  	return Tango::LogLevel::LOG_DEBUG;
	}
	else if (sLevel == "INFO"){
		return Tango::LogLevel::LOG_INFO; 
	}
	else if (sLevel == "WARN"){
		return Tango::LogLevel::LOG_WARN;
	}
	else if (sLevel == "ERROR"){
		return Tango::LogLevel::LOG_ERROR;
	}
	else if (sLevel == "FATAL"){
		return Tango::LogLevel::LOG_FATAL;
	}
	else if (sLevel == "OFF"){
		return Tango::LogLevel::LOG_OFF;
	}
	else {
		WARN_STREAM<< "LMCLogger::GetTangoLogLevelFromString() - Invalid string level (" << sLevel << ") specified!"<<endl;
		return Tango::LogLevel::LOG_OFF;
	}

 	return Tango::LogLevel::LOG_OFF;

}//close GetTangoLogLevelFromString()
*/

/*----- PROTECTED REGION END -----*/	//	LMCLogger::namespace_ending
} //	namespace
