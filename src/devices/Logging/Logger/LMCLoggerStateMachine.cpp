/*----- PROTECTED REGION ID(LMCLoggerStateMachine.cpp) ENABLED START -----*/
static const char *RcsId = "$Id:  $";
//=============================================================================
//
// file :        LMCLoggerStateMachine.cpp
//
// description : State machine file for the LMCLogger class
//
// project :     LMCLogger
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================

#include <LMCLogger.h>

/*----- PROTECTED REGION END -----*/	//	LMCLogger::LMCLoggerStateMachine.cpp

//================================================================
//  States  |  Description
//================================================================


namespace LMCLogger_ns
{
//=================================================
//		Attributes Allowed Methods
//=================================================

//--------------------------------------------------------
/**
 *	Method      : LMCLogger::is_syslog_level_allowed()
 *	Description : Execution allowed for syslog_level attribute
 */
//--------------------------------------------------------
bool LMCLogger::is_syslog_level_allowed(TANGO_UNUSED(Tango::AttReqType type))
{

	//	Not any excluded states for syslog_level attribute in read access.
	/*----- PROTECTED REGION ID(LMCLogger::syslog_levelStateAllowed_READ) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	LMCLogger::syslog_levelStateAllowed_READ
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : LMCLogger::is_enable_logfw_allowed()
 *	Description : Execution allowed for enable_logfw attribute
 */
//--------------------------------------------------------
bool LMCLogger::is_enable_logfw_allowed(TANGO_UNUSED(Tango::AttReqType type))
{

	//	Not any excluded states for enable_logfw attribute in read access.
	/*----- PROTECTED REGION ID(LMCLogger::enable_logfwStateAllowed_READ) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	LMCLogger::enable_logfwStateAllowed_READ
	return true;
}


//=================================================
//		Commands Allowed Methods
//=================================================

//--------------------------------------------------------
/**
 *	Method      : LMCLogger::is_log_allowed()
 *	Description : Execution allowed for log attribute
 */
//--------------------------------------------------------
bool LMCLogger::is_log_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for log command.
	/*----- PROTECTED REGION ID(LMCLogger::logStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	LMCLogger::logStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : LMCLogger::is_SetFileLogLevel_allowed()
 *	Description : Execution allowed for SetFileLogLevel attribute
 */
//--------------------------------------------------------
bool LMCLogger::is_SetFileLogLevel_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SetFileLogLevel command.
	/*----- PROTECTED REGION ID(LMCLogger::SetFileLogLevelStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	LMCLogger::SetFileLogLevelStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : LMCLogger::is_SetDeviceLogLevel_allowed()
 *	Description : Execution allowed for SetDeviceLogLevel attribute
 */
//--------------------------------------------------------
bool LMCLogger::is_SetDeviceLogLevel_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SetDeviceLogLevel command.
	/*----- PROTECTED REGION ID(LMCLogger::SetDeviceLogLevelStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	LMCLogger::SetDeviceLogLevelStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : LMCLogger::is_SetConsoleLogLevel_allowed()
 *	Description : Execution allowed for SetConsoleLogLevel attribute
 */
//--------------------------------------------------------
bool LMCLogger::is_SetConsoleLogLevel_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SetConsoleLogLevel command.
	/*----- PROTECTED REGION ID(LMCLogger::SetConsoleLogLevelStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	LMCLogger::SetConsoleLogLevelStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : LMCLogger::is_SetSysLogLevel_allowed()
 *	Description : Execution allowed for SetSysLogLevel attribute
 */
//--------------------------------------------------------
bool LMCLogger::is_SetSysLogLevel_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SetSysLogLevel command.
	/*----- PROTECTED REGION ID(LMCLogger::SetSysLogLevelStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	LMCLogger::SetSysLogLevelStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : LMCLogger::is_EnableLogForward_allowed()
 *	Description : Execution allowed for EnableLogForward attribute
 */
//--------------------------------------------------------
bool LMCLogger::is_EnableLogForward_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for EnableLogForward command.
	/*----- PROTECTED REGION ID(LMCLogger::EnableLogForwardStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	LMCLogger::EnableLogForwardStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : LMCLogger::is_TestLog_allowed()
 *	Description : Execution allowed for TestLog attribute
 */
//--------------------------------------------------------
bool LMCLogger::is_TestLog_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for TestLog command.
	/*----- PROTECTED REGION ID(LMCLogger::TestLogStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	LMCLogger::TestLogStateAllowed
	return true;
}


/*----- PROTECTED REGION ID(LMCLogger::LMCLoggerStateAllowed.AdditionalMethods) ENABLED START -----*/

//	Additional Methods

/*----- PROTECTED REGION END -----*/	//	LMCLogger::LMCLoggerStateAllowed.AdditionalMethods

}	//	End of namespace
