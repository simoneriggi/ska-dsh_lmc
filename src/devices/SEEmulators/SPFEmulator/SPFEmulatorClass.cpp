/*----- PROTECTED REGION ID(SPFEmulatorClass.cpp) ENABLED START -----*/
static const char *RcsId      = "$Id:  $";
static const char *TagName    = "$Name:  $";
static const char *CvsPath    = "$Source:  $";
static const char *SvnPath    = "$HeadURL:  $";
static const char *HttpServer = "http://www.esrf.eu/computing/cs/tango/tango_doc/ds_doc/";
//=============================================================================
//
// file :        SPFEmulatorClass.cpp
//
// description : C++ source for the SPFEmulatorClass.
//               A singleton class derived from DeviceClass.
//               It implements the command and attribute list
//               and all properties and methods required
//               by the SPFEmulator once per process.
//
// project :     SPFEmulator
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <SPFEmulatorClass.h>

/*----- PROTECTED REGION END -----*/	//	SPFEmulatorClass.cpp

//-------------------------------------------------------------------
/**
 *	Create SPFEmulatorClass singleton and
 *	return it in a C function for Python usage
 */
//-------------------------------------------------------------------
extern "C" {
#ifdef _TG_WINDOWS_

__declspec(dllexport)

#endif

	Tango::DeviceClass *_create_SPFEmulator_class(const char *name) {
		return SPFEmulator_ns::SPFEmulatorClass::init(name);
	}
}

namespace SPFEmulator_ns
{
//===================================================================
//	Initialize pointer for singleton pattern
//===================================================================
SPFEmulatorClass *SPFEmulatorClass::_instance = NULL;

//--------------------------------------------------------
/**
 * method : 		SPFEmulatorClass::SPFEmulatorClass(string &s)
 * description : 	constructor for the SPFEmulatorClass
 *
 * @param s	The class name
 */
//--------------------------------------------------------
SPFEmulatorClass::SPFEmulatorClass(string &s):SEEmulatorBase_ns::SEEmulatorBaseClass(s)
{
	cout2 << "Entering SPFEmulatorClass constructor" << endl;
	set_default_property();
	write_class_property();

	/*----- PROTECTED REGION ID(SPFEmulatorClass::constructor) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	SPFEmulatorClass::constructor

	cout2 << "Leaving SPFEmulatorClass constructor" << endl;
}

//--------------------------------------------------------
/**
 * method : 		SPFEmulatorClass::~SPFEmulatorClass()
 * description : 	destructor for the SPFEmulatorClass
 */
//--------------------------------------------------------
SPFEmulatorClass::~SPFEmulatorClass()
{
	/*----- PROTECTED REGION ID(SPFEmulatorClass::destructor) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	SPFEmulatorClass::destructor

	_instance = NULL;
}


//--------------------------------------------------------
/**
 * method : 		SPFEmulatorClass::init
 * description : 	Create the object if not already done.
 *                  Otherwise, just return a pointer to the object
 *
 * @param	name	The class name
 */
//--------------------------------------------------------
SPFEmulatorClass *SPFEmulatorClass::init(const char *name)
{
	if (_instance == NULL)
	{
		try
		{
			string s(name);
			_instance = new SPFEmulatorClass(s);
		}
		catch (bad_alloc &)
		{
			throw;
		}
	}
	return _instance;
}

//--------------------------------------------------------
/**
 * method : 		SPFEmulatorClass::instance
 * description : 	Check if object already created,
 *                  and return a pointer to the object
 */
//--------------------------------------------------------
SPFEmulatorClass *SPFEmulatorClass::instance()
{
	if (_instance == NULL)
	{
		cerr << "Class is not initialised !!" << endl;
		exit(-1);
	}
	return _instance;
}



//===================================================================
//	Command execution method calls
//===================================================================
//--------------------------------------------------------
/**
 * method : 		IlluminateLNAClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *IlluminateLNAClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "IlluminateLNAClass::execute(): arrived" << endl;
	Tango::DevShort argin;
	extract(in_any, argin);
	return insert((static_cast<SPFEmulator *>(device))->illuminate_lna(argin));
}

//--------------------------------------------------------
/**
 * method : 		SetLNAHPowerStateClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetLNAHPowerStateClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SetLNAHPowerStateClass::execute(): arrived" << endl;
	Tango::DevShort argin;
	extract(in_any, argin);
	return insert((static_cast<SPFEmulator *>(device))->set_lnahpower_state(argin));
}

//--------------------------------------------------------
/**
 * method : 		SetLNAVPowerStateClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetLNAVPowerStateClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SetLNAVPowerStateClass::execute(): arrived" << endl;
	Tango::DevShort argin;
	extract(in_any, argin);
	return insert((static_cast<SPFEmulator *>(device))->set_lnavpower_state(argin));
}

//--------------------------------------------------------
/**
 * method : 		SetAmp2HPowerStateClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetAmp2HPowerStateClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SetAmp2HPowerStateClass::execute(): arrived" << endl;
	const Tango::DevVarShortArray *argin;
	extract(in_any, argin);
	return insert((static_cast<SPFEmulator *>(device))->set_amp2_hpower_state(argin));
}

//--------------------------------------------------------
/**
 * method : 		SetAmp2VPowerStateClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetAmp2VPowerStateClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SetAmp2VPowerStateClass::execute(): arrived" << endl;
	const Tango::DevVarShortArray *argin;
	extract(in_any, argin);
	return insert((static_cast<SPFEmulator *>(device))->set_amp2_vpower_state(argin));
}

//--------------------------------------------------------
/**
 * method : 		SetRFE1TempDefaultClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetRFE1TempDefaultClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SetRFE1TempDefaultClass::execute(): arrived" << endl;
	const Tango::DevVarShortArray *argin;
	extract(in_any, argin);
	return insert((static_cast<SPFEmulator *>(device))->set_rfe1_temp_default(argin));
}

//--------------------------------------------------------
/**
 * method : 		SetRFE1TempSetPointClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetRFE1TempSetPointClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SetRFE1TempSetPointClass::execute(): arrived" << endl;
	const Tango::DevVarShortArray *argin;
	extract(in_any, argin);
	((static_cast<SPFEmulator *>(device))->set_rfe1_temp_set_point(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		SetRFE2TempCntrStateClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetRFE2TempCntrStateClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SetRFE2TempCntrStateClass::execute(): arrived" << endl;
	const Tango::DevVarShortArray *argin;
	extract(in_any, argin);
	return insert((static_cast<SPFEmulator *>(device))->set_rfe2_temp_cntr_state(argin));
}

//--------------------------------------------------------
/**
 * method : 		SetCryoMotorStateClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetCryoMotorStateClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SetCryoMotorStateClass::execute(): arrived" << endl;
	const Tango::DevVarShortArray *argin;
	extract(in_any, argin);
	return insert((static_cast<SPFEmulator *>(device))->set_cryo_motor_state(argin));
}

//--------------------------------------------------------
/**
 * method : 		SetCryoMotorSpeedClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetCryoMotorSpeedClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SetCryoMotorSpeedClass::execute(): arrived" << endl;
	const Tango::DevVarShortArray *argin;
	extract(in_any, argin);
	return insert((static_cast<SPFEmulator *>(device))->set_cryo_motor_speed(argin));
}

//--------------------------------------------------------
/**
 * method : 		SetVaValveStateClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetVaValveStateClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SetVaValveStateClass::execute(): arrived" << endl;
	Tango::DevShort argin;
	extract(in_any, argin);
	return insert((static_cast<SPFEmulator *>(device))->set_va_valve_state(argin));
}

//--------------------------------------------------------
/**
 * method : 		SetSubElementModeClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetSubElementModeClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SetSubElementModeClass::execute(): arrived" << endl;
	Tango::DevShort argin;
	extract(in_any, argin);
	((static_cast<SPFEmulator *>(device))->set_sub_element_mode(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		SetFeedModeClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetFeedModeClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SetFeedModeClass::execute(): arrived" << endl;
	const Tango::DevVarShortArray *argin;
	extract(in_any, argin);
	return insert((static_cast<SPFEmulator *>(device))->set_feed_mode(argin));
}


//===================================================================
//	Properties management
//===================================================================
//--------------------------------------------------------
/**
 *	Method      : SPFEmulatorClass::get_class_property()
 *	Description : Get the class property for specified name.
 */
//--------------------------------------------------------
Tango::DbDatum SPFEmulatorClass::get_class_property(string &prop_name)
{
	for (unsigned int i=0 ; i<cl_prop.size() ; i++)
		if (cl_prop[i].name == prop_name)
			return cl_prop[i];
	//	if not found, returns  an empty DbDatum
	return Tango::DbDatum(prop_name);
}

//--------------------------------------------------------
/**
 *	Method      : SPFEmulatorClass::get_default_device_property()
 *	Description : Return the default value for device property.
 */
//--------------------------------------------------------
Tango::DbDatum SPFEmulatorClass::get_default_device_property(string &prop_name)
{
	for (unsigned int i=0 ; i<dev_def_prop.size() ; i++)
		if (dev_def_prop[i].name == prop_name)
			return dev_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}

//--------------------------------------------------------
/**
 *	Method      : SPFEmulatorClass::get_default_class_property()
 *	Description : Return the default value for class property.
 */
//--------------------------------------------------------
Tango::DbDatum SPFEmulatorClass::get_default_class_property(string &prop_name)
{
	for (unsigned int i=0 ; i<cl_def_prop.size() ; i++)
		if (cl_def_prop[i].name == prop_name)
			return cl_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}


//--------------------------------------------------------
/**
 *	Method      : SPFEmulatorClass::set_default_property()
 *	Description : Set default property (class and device) for wizard.
 *                For each property, add to wizard property name and description.
 *                If default value has been set, add it to wizard property and
 *                store it in a DbDatum.
 */
//--------------------------------------------------------
void SPFEmulatorClass::set_default_property()
{
	string	prop_name;
	string	prop_desc;
	string	prop_def;
	vector<string>	vect_data;

	//	Set Default Class Properties

	//	Set Default device Properties
}

//--------------------------------------------------------
/**
 *	Method      : SPFEmulatorClass::write_class_property()
 *	Description : Set class description fields as property in database
 */
//--------------------------------------------------------
void SPFEmulatorClass::write_class_property()
{
	//	First time, check if database used
	if (Tango::Util::_UseDb == false)
		return;

	Tango::DbData	data;
	string	classname = get_name();
	string	header;
	string::size_type	start, end;

	//	Put title
	Tango::DbDatum	title("ProjectTitle");
	string	str_title("SPFEmulator");
	title << str_title;
	data.push_back(title);

	//	Put Description
	Tango::DbDatum	description("Description");
	vector<string>	str_desc;
	str_desc.push_back("Emulator for SPF sub-element");
	description << str_desc;
	data.push_back(description);

	//	put cvs or svn location
	string	filename("SPFEmulator");
	filename += "Class.cpp";

	// check for cvs information
	string	src_path(CvsPath);
	start = src_path.find("/");
	if (start!=string::npos)
	{
		end   = src_path.find(filename);
		if (end>start)
		{
			string	strloc = src_path.substr(start, end-start);
			//	Check if specific repository
			start = strloc.find("/cvsroot/");
			if (start!=string::npos && start>0)
			{
				string	repository = strloc.substr(0, start);
				if (repository.find("/segfs/")!=string::npos)
					strloc = "ESRF:" + strloc.substr(start, strloc.length()-start);
			}
			Tango::DbDatum	cvs_loc("cvs_location");
			cvs_loc << strloc;
			data.push_back(cvs_loc);
		}
	}

	// check for svn information
	else
	{
		string	src_path(SvnPath);
		start = src_path.find("://");
		if (start!=string::npos)
		{
			end = src_path.find(filename);
			if (end>start)
			{
				header = "$HeadURL: ";
				start = header.length();
				string	strloc = src_path.substr(start, (end-start));
				
				Tango::DbDatum	svn_loc("svn_location");
				svn_loc << strloc;
				data.push_back(svn_loc);
			}
		}
	}

	//	Get CVS or SVN revision tag
	
	// CVS tag
	string	tagname(TagName);
	header = "$Name: ";
	start = header.length();
	string	endstr(" $");
	
	end   = tagname.find(endstr);
	if (end!=string::npos && end>start)
	{
		string	strtag = tagname.substr(start, end-start);
		Tango::DbDatum	cvs_tag("cvs_tag");
		cvs_tag << strtag;
		data.push_back(cvs_tag);
	}
	
	// SVN tag
	string	svnpath(SvnPath);
	header = "$HeadURL: ";
	start = header.length();
	
	end   = svnpath.find(endstr);
	if (end!=string::npos && end>start)
	{
		string	strloc = svnpath.substr(start, end-start);
		
		string tagstr ("/tags/");
		start = strloc.find(tagstr);
		if ( start!=string::npos )
		{
			start = start + tagstr.length();
			end   = strloc.find(filename);
			string	strtag = strloc.substr(start, end-start-1);
			
			Tango::DbDatum	svn_tag("svn_tag");
			svn_tag << strtag;
			data.push_back(svn_tag);
		}
	}

	//	Get URL location
	string	httpServ(HttpServer);
	if (httpServ.length()>0)
	{
		Tango::DbDatum	db_doc_url("doc_url");
		db_doc_url << httpServ;
		data.push_back(db_doc_url);
	}

	//  Put inheritance
	Tango::DbDatum	inher_datum("InheritedFrom");
	vector<string> inheritance;
	inheritance.push_back("TANGO_BASE_CLASS");
	inher_datum << inheritance;
	data.push_back(inher_datum);

	//	Call database and and values
	get_db_class()->put_property(data);
}

//===================================================================
//	Factory methods
//===================================================================

//--------------------------------------------------------
/**
 *	Method      : SPFEmulatorClass::device_factory()
 *	Description : Create the device object(s)
 *                and store them in the device list
 */
//--------------------------------------------------------
void SPFEmulatorClass::device_factory(const Tango::DevVarStringArray *devlist_ptr)
{
	/*----- PROTECTED REGION ID(SPFEmulatorClass::device_factory_before) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	SPFEmulatorClass::device_factory_before

	//	Create devices and add it into the device list
	for (unsigned long i=0 ; i<devlist_ptr->length() ; i++)
	{
		cout4 << "Device name : " << (*devlist_ptr)[i].in() << endl;
		device_list.push_back(new SPFEmulator(this, (*devlist_ptr)[i]));
	}

	//	Manage dynamic attributes if any
	erase_dynamic_attributes(devlist_ptr, get_class_attr()->get_attr_list());

	//	Export devices to the outside world
	for (unsigned long i=1 ; i<=devlist_ptr->length() ; i++)
	{
		//	Add dynamic attributes if any
		SPFEmulator *dev = static_cast<SPFEmulator *>(device_list[device_list.size()-i]);
		dev->add_dynamic_attributes();

		//	Check before if database used.
		if ((Tango::Util::_UseDb == true) && (Tango::Util::_FileDb == false))
			export_device(dev);
		else
			export_device(dev, dev->get_name().c_str());
	}

	/*----- PROTECTED REGION ID(SPFEmulatorClass::device_factory_after) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	SPFEmulatorClass::device_factory_after
}
//--------------------------------------------------------
/**
 *	Method      : SPFEmulatorClass::attribute_factory()
 *	Description : Create the attribute object(s)
 *                and store them in the attribute list
 */
//--------------------------------------------------------
void SPFEmulatorClass::attribute_factory(vector<Tango::Attr *> &att_list)
{
	/*----- PROTECTED REGION ID(SPFEmulatorClass::attribute_factory_before) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	SPFEmulatorClass::attribute_factory_before
	//	Call atribute_factory for inherited class
	SEEmulatorBase_ns::SEEmulatorBaseClass::attribute_factory(att_list);

	//	Attribute : spf_mode
	spf_modeAttrib	*spf_mode = new spf_modeAttrib();
	Tango::UserDefaultAttrProp	spf_mode_prop;
	spf_mode_prop.set_description("Current sub-element mode");
	//	label	not set for spf_mode
	//	unit	not set for spf_mode
	//	standard_unit	not set for spf_mode
	//	display_unit	not set for spf_mode
	//	format	not set for spf_mode
	//	max_value	not set for spf_mode
	//	min_value	not set for spf_mode
	//	max_alarm	not set for spf_mode
	//	min_alarm	not set for spf_mode
	//	max_warning	not set for spf_mode
	//	min_warning	not set for spf_mode
	//	delta_t	not set for spf_mode
	//	delta_val	not set for spf_mode
	
	{
		vector<string> labels;
		labels.push_back("OFF");
		labels.push_back("STARTUP");
		labels.push_back("STANDBY-LP");
		labels.push_back("OPERATE");
		labels.push_back("MAINTENANCE");
		labels.push_back("ERROR");
		spf_mode_prop.set_enum_labels(labels);
	}
	spf_mode->set_default_properties(spf_mode_prop);
	//	Not Polled
	spf_mode->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	spf_mode->set_change_event(true, false);
	att_list.push_back(spf_mode);

	//	Attribute : spf_powerState
	spf_powerStateAttrib	*spf_powerstate = new spf_powerStateAttrib();
	Tango::UserDefaultAttrProp	spf_powerstate_prop;
	spf_powerstate_prop.set_description("Current sub-element power state");
	//	label	not set for spf_powerState
	//	unit	not set for spf_powerState
	//	standard_unit	not set for spf_powerState
	//	display_unit	not set for spf_powerState
	//	format	not set for spf_powerState
	//	max_value	not set for spf_powerState
	//	min_value	not set for spf_powerState
	//	max_alarm	not set for spf_powerState
	//	min_alarm	not set for spf_powerState
	//	max_warning	not set for spf_powerState
	//	min_warning	not set for spf_powerState
	//	delta_t	not set for spf_powerState
	//	delta_val	not set for spf_powerState
	
	{
		vector<string> labels;
		labels.push_back("FULL-POWER");
		labels.push_back("LOW-POWER");
		spf_powerstate_prop.set_enum_labels(labels);
	}
	spf_powerstate->set_default_properties(spf_powerstate_prop);
	//	Not Polled
	spf_powerstate->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	spf_powerstate->set_change_event(true, false);
	att_list.push_back(spf_powerstate);

	//	Attribute : b1_capabilityState
	b1_capabilityStateAttrib	*b1_capabilitystate = new b1_capabilityStateAttrib();
	Tango::UserDefaultAttrProp	b1_capabilitystate_prop;
	b1_capabilitystate_prop.set_description("Band capability state");
	//	label	not set for b1_capabilityState
	//	unit	not set for b1_capabilityState
	//	standard_unit	not set for b1_capabilityState
	//	display_unit	not set for b1_capabilityState
	//	format	not set for b1_capabilityState
	//	max_value	not set for b1_capabilityState
	//	min_value	not set for b1_capabilityState
	//	max_alarm	not set for b1_capabilityState
	//	min_alarm	not set for b1_capabilityState
	//	max_warning	not set for b1_capabilityState
	//	min_warning	not set for b1_capabilityState
	//	delta_t	not set for b1_capabilityState
	//	delta_val	not set for b1_capabilityState
	
	{
		vector<string> labels;
		labels.push_back("UNAVAILABLE");
		labels.push_back("STANDBY");
		labels.push_back("OPERATE-DEGRADED");
		labels.push_back("OPERATE-FULL");
		b1_capabilitystate_prop.set_enum_labels(labels);
	}
	b1_capabilitystate->set_default_properties(b1_capabilitystate_prop);
	//	Not Polled
	b1_capabilitystate->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	b1_capabilitystate->set_change_event(true, false);
	att_list.push_back(b1_capabilitystate);

	//	Attribute : b2_capabilityState
	b2_capabilityStateAttrib	*b2_capabilitystate = new b2_capabilityStateAttrib();
	Tango::UserDefaultAttrProp	b2_capabilitystate_prop;
	b2_capabilitystate_prop.set_description("Band capability state");
	//	label	not set for b2_capabilityState
	//	unit	not set for b2_capabilityState
	//	standard_unit	not set for b2_capabilityState
	//	display_unit	not set for b2_capabilityState
	//	format	not set for b2_capabilityState
	//	max_value	not set for b2_capabilityState
	//	min_value	not set for b2_capabilityState
	//	max_alarm	not set for b2_capabilityState
	//	min_alarm	not set for b2_capabilityState
	//	max_warning	not set for b2_capabilityState
	//	min_warning	not set for b2_capabilityState
	//	delta_t	not set for b2_capabilityState
	//	delta_val	not set for b2_capabilityState
	
	{
		vector<string> labels;
		labels.push_back("UNAVAILABLE");
		labels.push_back("STANDBY");
		labels.push_back("OPERATE-DEGRADED");
		labels.push_back("OPERATE-FULL");
		b2_capabilitystate_prop.set_enum_labels(labels);
	}
	b2_capabilitystate->set_default_properties(b2_capabilitystate_prop);
	//	Not Polled
	b2_capabilitystate->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	b2_capabilitystate->set_change_event(true, false);
	att_list.push_back(b2_capabilitystate);

	//	Attribute : b3_capabilityState
	b3_capabilityStateAttrib	*b3_capabilitystate = new b3_capabilityStateAttrib();
	Tango::UserDefaultAttrProp	b3_capabilitystate_prop;
	b3_capabilitystate_prop.set_description("Band capability state");
	//	label	not set for b3_capabilityState
	//	unit	not set for b3_capabilityState
	//	standard_unit	not set for b3_capabilityState
	//	display_unit	not set for b3_capabilityState
	//	format	not set for b3_capabilityState
	//	max_value	not set for b3_capabilityState
	//	min_value	not set for b3_capabilityState
	//	max_alarm	not set for b3_capabilityState
	//	min_alarm	not set for b3_capabilityState
	//	max_warning	not set for b3_capabilityState
	//	min_warning	not set for b3_capabilityState
	//	delta_t	not set for b3_capabilityState
	//	delta_val	not set for b3_capabilityState
	
	{
		vector<string> labels;
		labels.push_back("UNAVAILABLE");
		labels.push_back("STANDBY");
		labels.push_back("OPERATE-DEGRADED");
		labels.push_back("OPERATE-FULL");
		b3_capabilitystate_prop.set_enum_labels(labels);
	}
	b3_capabilitystate->set_default_properties(b3_capabilitystate_prop);
	//	Not Polled
	b3_capabilitystate->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	b3_capabilitystate->set_change_event(true, false);
	att_list.push_back(b3_capabilitystate);

	//	Attribute : b4_capabilityState
	b4_capabilityStateAttrib	*b4_capabilitystate = new b4_capabilityStateAttrib();
	Tango::UserDefaultAttrProp	b4_capabilitystate_prop;
	b4_capabilitystate_prop.set_description("Band capability state");
	//	label	not set for b4_capabilityState
	//	unit	not set for b4_capabilityState
	//	standard_unit	not set for b4_capabilityState
	//	display_unit	not set for b4_capabilityState
	//	format	not set for b4_capabilityState
	//	max_value	not set for b4_capabilityState
	//	min_value	not set for b4_capabilityState
	//	max_alarm	not set for b4_capabilityState
	//	min_alarm	not set for b4_capabilityState
	//	max_warning	not set for b4_capabilityState
	//	min_warning	not set for b4_capabilityState
	//	delta_t	not set for b4_capabilityState
	//	delta_val	not set for b4_capabilityState
	
	{
		vector<string> labels;
		labels.push_back("UNAVAILABLE");
		labels.push_back("STANDBY");
		labels.push_back("OPERATE--DEGRADED");
		labels.push_back("OPERATE-FULL");
		b4_capabilitystate_prop.set_enum_labels(labels);
	}
	b4_capabilitystate->set_default_properties(b4_capabilitystate_prop);
	//	Not Polled
	b4_capabilitystate->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	b4_capabilitystate->set_change_event(true, false);
	att_list.push_back(b4_capabilitystate);

	//	Attribute : b5_capabilityState
	b5_capabilityStateAttrib	*b5_capabilitystate = new b5_capabilityStateAttrib();
	Tango::UserDefaultAttrProp	b5_capabilitystate_prop;
	b5_capabilitystate_prop.set_description("Band capability state");
	//	label	not set for b5_capabilityState
	//	unit	not set for b5_capabilityState
	//	standard_unit	not set for b5_capabilityState
	//	display_unit	not set for b5_capabilityState
	//	format	not set for b5_capabilityState
	//	max_value	not set for b5_capabilityState
	//	min_value	not set for b5_capabilityState
	//	max_alarm	not set for b5_capabilityState
	//	min_alarm	not set for b5_capabilityState
	//	max_warning	not set for b5_capabilityState
	//	min_warning	not set for b5_capabilityState
	//	delta_t	not set for b5_capabilityState
	//	delta_val	not set for b5_capabilityState
	
	{
		vector<string> labels;
		labels.push_back("UNAVAILABLE");
		labels.push_back("STANDBY");
		labels.push_back("OPERATE-DEGRADED");
		labels.push_back("OPERATE-FULL");
		b5_capabilitystate_prop.set_enum_labels(labels);
	}
	b5_capabilitystate->set_default_properties(b5_capabilitystate_prop);
	//	Not Polled
	b5_capabilitystate->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	b5_capabilitystate->set_change_event(true, false);
	att_list.push_back(b5_capabilitystate);

	//	Attribute : b1_captime2opFull
	b1_captime2opFullAttrib	*b1_captime2opfull = new b1_captime2opFullAttrib();
	Tango::UserDefaultAttrProp	b1_captime2opfull_prop;
	b1_captime2opfull_prop.set_description("Time to band Operate_Full capability state");
	//	label	not set for b1_captime2opFull
	//	unit	not set for b1_captime2opFull
	//	standard_unit	not set for b1_captime2opFull
	//	display_unit	not set for b1_captime2opFull
	//	format	not set for b1_captime2opFull
	//	max_value	not set for b1_captime2opFull
	//	min_value	not set for b1_captime2opFull
	//	max_alarm	not set for b1_captime2opFull
	//	min_alarm	not set for b1_captime2opFull
	//	max_warning	not set for b1_captime2opFull
	//	min_warning	not set for b1_captime2opFull
	//	delta_t	not set for b1_captime2opFull
	//	delta_val	not set for b1_captime2opFull
	
	b1_captime2opfull->set_default_properties(b1_captime2opfull_prop);
	//	Not Polled
	b1_captime2opfull->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b1_captime2opfull);

	//	Attribute : b2_captime2opFull
	b2_captime2opFullAttrib	*b2_captime2opfull = new b2_captime2opFullAttrib();
	Tango::UserDefaultAttrProp	b2_captime2opfull_prop;
	b2_captime2opfull_prop.set_description("Time to band Operate_Full capability state");
	//	label	not set for b2_captime2opFull
	//	unit	not set for b2_captime2opFull
	//	standard_unit	not set for b2_captime2opFull
	//	display_unit	not set for b2_captime2opFull
	//	format	not set for b2_captime2opFull
	//	max_value	not set for b2_captime2opFull
	//	min_value	not set for b2_captime2opFull
	//	max_alarm	not set for b2_captime2opFull
	//	min_alarm	not set for b2_captime2opFull
	//	max_warning	not set for b2_captime2opFull
	//	min_warning	not set for b2_captime2opFull
	//	delta_t	not set for b2_captime2opFull
	//	delta_val	not set for b2_captime2opFull
	
	b2_captime2opfull->set_default_properties(b2_captime2opfull_prop);
	//	Not Polled
	b2_captime2opfull->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b2_captime2opfull);

	//	Attribute : b3_captime2opFull
	b3_captime2opFullAttrib	*b3_captime2opfull = new b3_captime2opFullAttrib();
	Tango::UserDefaultAttrProp	b3_captime2opfull_prop;
	b3_captime2opfull_prop.set_description("Time to band Operate_Full capability state");
	//	label	not set for b3_captime2opFull
	//	unit	not set for b3_captime2opFull
	//	standard_unit	not set for b3_captime2opFull
	//	display_unit	not set for b3_captime2opFull
	//	format	not set for b3_captime2opFull
	//	max_value	not set for b3_captime2opFull
	//	min_value	not set for b3_captime2opFull
	//	max_alarm	not set for b3_captime2opFull
	//	min_alarm	not set for b3_captime2opFull
	//	max_warning	not set for b3_captime2opFull
	//	min_warning	not set for b3_captime2opFull
	//	delta_t	not set for b3_captime2opFull
	//	delta_val	not set for b3_captime2opFull
	
	b3_captime2opfull->set_default_properties(b3_captime2opfull_prop);
	//	Not Polled
	b3_captime2opfull->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b3_captime2opfull);

	//	Attribute : b4_captime2opFull
	b4_captime2opFullAttrib	*b4_captime2opfull = new b4_captime2opFullAttrib();
	Tango::UserDefaultAttrProp	b4_captime2opfull_prop;
	b4_captime2opfull_prop.set_description("Time to band Operate_Full capability state");
	//	label	not set for b4_captime2opFull
	//	unit	not set for b4_captime2opFull
	//	standard_unit	not set for b4_captime2opFull
	//	display_unit	not set for b4_captime2opFull
	//	format	not set for b4_captime2opFull
	//	max_value	not set for b4_captime2opFull
	//	min_value	not set for b4_captime2opFull
	//	max_alarm	not set for b4_captime2opFull
	//	min_alarm	not set for b4_captime2opFull
	//	max_warning	not set for b4_captime2opFull
	//	min_warning	not set for b4_captime2opFull
	//	delta_t	not set for b4_captime2opFull
	//	delta_val	not set for b4_captime2opFull
	
	b4_captime2opfull->set_default_properties(b4_captime2opfull_prop);
	//	Not Polled
	b4_captime2opfull->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b4_captime2opfull);

	//	Attribute : b5_captime2opFull
	b5_captime2opFullAttrib	*b5_captime2opfull = new b5_captime2opFullAttrib();
	Tango::UserDefaultAttrProp	b5_captime2opfull_prop;
	b5_captime2opfull_prop.set_description("Time to band Operate_Full capability state");
	//	label	not set for b5_captime2opFull
	//	unit	not set for b5_captime2opFull
	//	standard_unit	not set for b5_captime2opFull
	//	display_unit	not set for b5_captime2opFull
	//	format	not set for b5_captime2opFull
	//	max_value	not set for b5_captime2opFull
	//	min_value	not set for b5_captime2opFull
	//	max_alarm	not set for b5_captime2opFull
	//	min_alarm	not set for b5_captime2opFull
	//	max_warning	not set for b5_captime2opFull
	//	min_warning	not set for b5_captime2opFull
	//	delta_t	not set for b5_captime2opFull
	//	delta_val	not set for b5_captime2opFull
	
	b5_captime2opfull->set_default_properties(b5_captime2opfull_prop);
	//	Not Polled
	b5_captime2opfull->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b5_captime2opfull);

	//	Attribute : spf_healthState
	spf_healthStateAttrib	*spf_healthstate = new spf_healthStateAttrib();
	Tango::UserDefaultAttrProp	spf_healthstate_prop;
	spf_healthstate_prop.set_description("Aggregated sub-element health");
	//	label	not set for spf_healthState
	//	unit	not set for spf_healthState
	//	standard_unit	not set for spf_healthState
	//	display_unit	not set for spf_healthState
	//	format	not set for spf_healthState
	//	max_value	not set for spf_healthState
	//	min_value	not set for spf_healthState
	//	max_alarm	not set for spf_healthState
	//	min_alarm	not set for spf_healthState
	//	max_warning	not set for spf_healthState
	//	min_warning	not set for spf_healthState
	//	delta_t	not set for spf_healthState
	//	delta_val	not set for spf_healthState
	
	{
		vector<string> labels;
		labels.push_back("NORMAL");
		labels.push_back("DEGRADED");
		labels.push_back("FAILED");
		spf_healthstate_prop.set_enum_labels(labels);
	}
	spf_healthstate->set_default_properties(spf_healthstate_prop);
	//	Not Polled
	spf_healthstate->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	spf_healthstate->set_change_event(true, false);
	att_list.push_back(spf_healthstate);

	//	Attribute : b1_healthState
	b1_healthStateAttrib	*b1_healthstate = new b1_healthStateAttrib();
	Tango::UserDefaultAttrProp	b1_healthstate_prop;
	b1_healthstate_prop.set_description("Major component health status");
	//	label	not set for b1_healthState
	//	unit	not set for b1_healthState
	//	standard_unit	not set for b1_healthState
	//	display_unit	not set for b1_healthState
	//	format	not set for b1_healthState
	//	max_value	not set for b1_healthState
	//	min_value	not set for b1_healthState
	//	max_alarm	not set for b1_healthState
	//	min_alarm	not set for b1_healthState
	//	max_warning	not set for b1_healthState
	//	min_warning	not set for b1_healthState
	//	delta_t	not set for b1_healthState
	//	delta_val	not set for b1_healthState
	
	{
		vector<string> labels;
		labels.push_back("NORMAL");
		labels.push_back("DEGRADED");
		labels.push_back("FAILED");
		b1_healthstate_prop.set_enum_labels(labels);
	}
	b1_healthstate->set_default_properties(b1_healthstate_prop);
	//	Not Polled
	b1_healthstate->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b1_healthstate);

	//	Attribute : b2_healthState
	b2_healthStateAttrib	*b2_healthstate = new b2_healthStateAttrib();
	Tango::UserDefaultAttrProp	b2_healthstate_prop;
	b2_healthstate_prop.set_description("Major component health status");
	//	label	not set for b2_healthState
	//	unit	not set for b2_healthState
	//	standard_unit	not set for b2_healthState
	//	display_unit	not set for b2_healthState
	//	format	not set for b2_healthState
	//	max_value	not set for b2_healthState
	//	min_value	not set for b2_healthState
	//	max_alarm	not set for b2_healthState
	//	min_alarm	not set for b2_healthState
	//	max_warning	not set for b2_healthState
	//	min_warning	not set for b2_healthState
	//	delta_t	not set for b2_healthState
	//	delta_val	not set for b2_healthState
	
	{
		vector<string> labels;
		labels.push_back("NORMAL");
		labels.push_back("DEGRADED");
		labels.push_back("FAILED");
		b2_healthstate_prop.set_enum_labels(labels);
	}
	b2_healthstate->set_default_properties(b2_healthstate_prop);
	//	Not Polled
	b2_healthstate->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	b2_healthstate->set_change_event(true, false);
	att_list.push_back(b2_healthstate);

	//	Attribute : b3_healthState
	b3_healthStateAttrib	*b3_healthstate = new b3_healthStateAttrib();
	Tango::UserDefaultAttrProp	b3_healthstate_prop;
	b3_healthstate_prop.set_description("Major component health status");
	//	label	not set for b3_healthState
	//	unit	not set for b3_healthState
	//	standard_unit	not set for b3_healthState
	//	display_unit	not set for b3_healthState
	//	format	not set for b3_healthState
	//	max_value	not set for b3_healthState
	//	min_value	not set for b3_healthState
	//	max_alarm	not set for b3_healthState
	//	min_alarm	not set for b3_healthState
	//	max_warning	not set for b3_healthState
	//	min_warning	not set for b3_healthState
	//	delta_t	not set for b3_healthState
	//	delta_val	not set for b3_healthState
	
	{
		vector<string> labels;
		labels.push_back("NORMAL");
		labels.push_back("DEGRADED");
		labels.push_back("FAILED");
		b3_healthstate_prop.set_enum_labels(labels);
	}
	b3_healthstate->set_default_properties(b3_healthstate_prop);
	//	Not Polled
	b3_healthstate->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	b3_healthstate->set_change_event(true, false);
	att_list.push_back(b3_healthstate);

	//	Attribute : b4_healthState
	b4_healthStateAttrib	*b4_healthstate = new b4_healthStateAttrib();
	Tango::UserDefaultAttrProp	b4_healthstate_prop;
	b4_healthstate_prop.set_description("Major component health status");
	//	label	not set for b4_healthState
	//	unit	not set for b4_healthState
	//	standard_unit	not set for b4_healthState
	//	display_unit	not set for b4_healthState
	//	format	not set for b4_healthState
	//	max_value	not set for b4_healthState
	//	min_value	not set for b4_healthState
	//	max_alarm	not set for b4_healthState
	//	min_alarm	not set for b4_healthState
	//	max_warning	not set for b4_healthState
	//	min_warning	not set for b4_healthState
	//	delta_t	not set for b4_healthState
	//	delta_val	not set for b4_healthState
	
	{
		vector<string> labels;
		labels.push_back("NORMAL");
		labels.push_back("DEGRADED");
		labels.push_back("FAILED");
		b4_healthstate_prop.set_enum_labels(labels);
	}
	b4_healthstate->set_default_properties(b4_healthstate_prop);
	//	Not Polled
	b4_healthstate->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	b4_healthstate->set_change_event(true, false);
	att_list.push_back(b4_healthstate);

	//	Attribute : b5_healthState
	b5_healthStateAttrib	*b5_healthstate = new b5_healthStateAttrib();
	Tango::UserDefaultAttrProp	b5_healthstate_prop;
	b5_healthstate_prop.set_description("Major component health status");
	//	label	not set for b5_healthState
	//	unit	not set for b5_healthState
	//	standard_unit	not set for b5_healthState
	//	display_unit	not set for b5_healthState
	//	format	not set for b5_healthState
	//	max_value	not set for b5_healthState
	//	min_value	not set for b5_healthState
	//	max_alarm	not set for b5_healthState
	//	min_alarm	not set for b5_healthState
	//	max_warning	not set for b5_healthState
	//	min_warning	not set for b5_healthState
	//	delta_t	not set for b5_healthState
	//	delta_val	not set for b5_healthState
	
	{
		vector<string> labels;
		labels.push_back("NORMAL");
		labels.push_back("DEGRADED");
		labels.push_back("FAILED");
		b5_healthstate_prop.set_enum_labels(labels);
	}
	b5_healthstate->set_default_properties(b5_healthstate_prop);
	//	Not Polled
	b5_healthstate->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	b5_healthstate->set_change_event(true, false);
	att_list.push_back(b5_healthstate);

	//	Attribute : he_healthState
	he_healthStateAttrib	*he_healthstate = new he_healthStateAttrib();
	Tango::UserDefaultAttrProp	he_healthstate_prop;
	he_healthstate_prop.set_description("Major component health status");
	//	label	not set for he_healthState
	//	unit	not set for he_healthState
	//	standard_unit	not set for he_healthState
	//	display_unit	not set for he_healthState
	//	format	not set for he_healthState
	//	max_value	not set for he_healthState
	//	min_value	not set for he_healthState
	//	max_alarm	not set for he_healthState
	//	min_alarm	not set for he_healthState
	//	max_warning	not set for he_healthState
	//	min_warning	not set for he_healthState
	//	delta_t	not set for he_healthState
	//	delta_val	not set for he_healthState
	
	{
		vector<string> labels;
		labels.push_back("NORMAL");
		labels.push_back("DEGRADED");
		labels.push_back("FAILED");
		he_healthstate_prop.set_enum_labels(labels);
	}
	he_healthstate->set_default_properties(he_healthstate_prop);
	//	Not Polled
	he_healthstate->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	he_healthstate->set_change_event(true, false);
	att_list.push_back(he_healthstate);

	//	Attribute : va_healthState
	va_healthStateAttrib	*va_healthstate = new va_healthStateAttrib();
	Tango::UserDefaultAttrProp	va_healthstate_prop;
	va_healthstate_prop.set_description("Major component health status");
	//	label	not set for va_healthState
	//	unit	not set for va_healthState
	//	standard_unit	not set for va_healthState
	//	display_unit	not set for va_healthState
	//	format	not set for va_healthState
	//	max_value	not set for va_healthState
	//	min_value	not set for va_healthState
	//	max_alarm	not set for va_healthState
	//	min_alarm	not set for va_healthState
	//	max_warning	not set for va_healthState
	//	min_warning	not set for va_healthState
	//	delta_t	not set for va_healthState
	//	delta_val	not set for va_healthState
	
	{
		vector<string> labels;
		labels.push_back("NORMAL");
		labels.push_back("DEGRADED");
		labels.push_back("FAILED");
		va_healthstate_prop.set_enum_labels(labels);
	}
	va_healthstate->set_default_properties(va_healthstate_prop);
	//	Not Polled
	va_healthstate->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	va_healthstate->set_change_event(true, false);
	att_list.push_back(va_healthstate);

	//	Attribute : spfc_healthState
	spfc_healthStateAttrib	*spfc_healthstate = new spfc_healthStateAttrib();
	Tango::UserDefaultAttrProp	spfc_healthstate_prop;
	spfc_healthstate_prop.set_description("Major component health status");
	//	label	not set for spfc_healthState
	//	unit	not set for spfc_healthState
	//	standard_unit	not set for spfc_healthState
	//	display_unit	not set for spfc_healthState
	//	format	not set for spfc_healthState
	//	max_value	not set for spfc_healthState
	//	min_value	not set for spfc_healthState
	//	max_alarm	not set for spfc_healthState
	//	min_alarm	not set for spfc_healthState
	//	max_warning	not set for spfc_healthState
	//	min_warning	not set for spfc_healthState
	//	delta_t	not set for spfc_healthState
	//	delta_val	not set for spfc_healthState
	
	{
		vector<string> labels;
		labels.push_back("NORMAL");
		labels.push_back("DEGRADED");
		labels.push_back("FAILED");
		spfc_healthstate_prop.set_enum_labels(labels);
	}
	spfc_healthstate->set_default_properties(spfc_healthstate_prop);
	//	Not Polled
	spfc_healthstate->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	spfc_healthstate->set_change_event(true, false);
	att_list.push_back(spfc_healthstate);

	//	Attribute : b1_operationalTime
	b1_operationalTimeAttrib	*b1_operationaltime = new b1_operationalTimeAttrib();
	Tango::UserDefaultAttrProp	b1_operationaltime_prop;
	b1_operationaltime_prop.set_description("Major component total operational run time");
	//	label	not set for b1_operationalTime
	//	unit	not set for b1_operationalTime
	//	standard_unit	not set for b1_operationalTime
	//	display_unit	not set for b1_operationalTime
	//	format	not set for b1_operationalTime
	//	max_value	not set for b1_operationalTime
	//	min_value	not set for b1_operationalTime
	//	max_alarm	not set for b1_operationalTime
	//	min_alarm	not set for b1_operationalTime
	//	max_warning	not set for b1_operationalTime
	//	min_warning	not set for b1_operationalTime
	//	delta_t	not set for b1_operationalTime
	//	delta_val	not set for b1_operationalTime
	
	b1_operationaltime->set_default_properties(b1_operationaltime_prop);
	//	Not Polled
	b1_operationaltime->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b1_operationaltime);

	//	Attribute : b2_operationalTime
	b2_operationalTimeAttrib	*b2_operationaltime = new b2_operationalTimeAttrib();
	Tango::UserDefaultAttrProp	b2_operationaltime_prop;
	b2_operationaltime_prop.set_description("Major component total operational run time");
	//	label	not set for b2_operationalTime
	//	unit	not set for b2_operationalTime
	//	standard_unit	not set for b2_operationalTime
	//	display_unit	not set for b2_operationalTime
	//	format	not set for b2_operationalTime
	//	max_value	not set for b2_operationalTime
	//	min_value	not set for b2_operationalTime
	//	max_alarm	not set for b2_operationalTime
	//	min_alarm	not set for b2_operationalTime
	//	max_warning	not set for b2_operationalTime
	//	min_warning	not set for b2_operationalTime
	//	delta_t	not set for b2_operationalTime
	//	delta_val	not set for b2_operationalTime
	
	b2_operationaltime->set_default_properties(b2_operationaltime_prop);
	//	Not Polled
	b2_operationaltime->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b2_operationaltime);

	//	Attribute : b3_operationalTime
	b3_operationalTimeAttrib	*b3_operationaltime = new b3_operationalTimeAttrib();
	Tango::UserDefaultAttrProp	b3_operationaltime_prop;
	b3_operationaltime_prop.set_description("Major component total operational run time");
	//	label	not set for b3_operationalTime
	//	unit	not set for b3_operationalTime
	//	standard_unit	not set for b3_operationalTime
	//	display_unit	not set for b3_operationalTime
	//	format	not set for b3_operationalTime
	//	max_value	not set for b3_operationalTime
	//	min_value	not set for b3_operationalTime
	//	max_alarm	not set for b3_operationalTime
	//	min_alarm	not set for b3_operationalTime
	//	max_warning	not set for b3_operationalTime
	//	min_warning	not set for b3_operationalTime
	//	delta_t	not set for b3_operationalTime
	//	delta_val	not set for b3_operationalTime
	
	b3_operationaltime->set_default_properties(b3_operationaltime_prop);
	//	Not Polled
	b3_operationaltime->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b3_operationaltime);

	//	Attribute : b4_operationalTime
	b4_operationalTimeAttrib	*b4_operationaltime = new b4_operationalTimeAttrib();
	Tango::UserDefaultAttrProp	b4_operationaltime_prop;
	b4_operationaltime_prop.set_description("Major component total operational run time");
	//	label	not set for b4_operationalTime
	//	unit	not set for b4_operationalTime
	//	standard_unit	not set for b4_operationalTime
	//	display_unit	not set for b4_operationalTime
	//	format	not set for b4_operationalTime
	//	max_value	not set for b4_operationalTime
	//	min_value	not set for b4_operationalTime
	//	max_alarm	not set for b4_operationalTime
	//	min_alarm	not set for b4_operationalTime
	//	max_warning	not set for b4_operationalTime
	//	min_warning	not set for b4_operationalTime
	//	delta_t	not set for b4_operationalTime
	//	delta_val	not set for b4_operationalTime
	
	b4_operationaltime->set_default_properties(b4_operationaltime_prop);
	//	Not Polled
	b4_operationaltime->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b4_operationaltime);

	//	Attribute : b5_operationalTime
	b5_operationalTimeAttrib	*b5_operationaltime = new b5_operationalTimeAttrib();
	Tango::UserDefaultAttrProp	b5_operationaltime_prop;
	b5_operationaltime_prop.set_description("Major component total operational run time");
	//	label	not set for b5_operationalTime
	//	unit	not set for b5_operationalTime
	//	standard_unit	not set for b5_operationalTime
	//	display_unit	not set for b5_operationalTime
	//	format	not set for b5_operationalTime
	//	max_value	not set for b5_operationalTime
	//	min_value	not set for b5_operationalTime
	//	max_alarm	not set for b5_operationalTime
	//	min_alarm	not set for b5_operationalTime
	//	max_warning	not set for b5_operationalTime
	//	min_warning	not set for b5_operationalTime
	//	delta_t	not set for b5_operationalTime
	//	delta_val	not set for b5_operationalTime
	
	b5_operationaltime->set_default_properties(b5_operationaltime_prop);
	//	Not Polled
	b5_operationaltime->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b5_operationaltime);

	//	Attribute : he_operationalTime
	he_operationalTimeAttrib	*he_operationaltime = new he_operationalTimeAttrib();
	Tango::UserDefaultAttrProp	he_operationaltime_prop;
	he_operationaltime_prop.set_description("Major component total operational run time");
	//	label	not set for he_operationalTime
	//	unit	not set for he_operationalTime
	//	standard_unit	not set for he_operationalTime
	//	display_unit	not set for he_operationalTime
	//	format	not set for he_operationalTime
	//	max_value	not set for he_operationalTime
	//	min_value	not set for he_operationalTime
	//	max_alarm	not set for he_operationalTime
	//	min_alarm	not set for he_operationalTime
	//	max_warning	not set for he_operationalTime
	//	min_warning	not set for he_operationalTime
	//	delta_t	not set for he_operationalTime
	//	delta_val	not set for he_operationalTime
	
	he_operationaltime->set_default_properties(he_operationaltime_prop);
	//	Not Polled
	he_operationaltime->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(he_operationaltime);

	//	Attribute : va_operationalTime
	va_operationalTimeAttrib	*va_operationaltime = new va_operationalTimeAttrib();
	Tango::UserDefaultAttrProp	va_operationaltime_prop;
	va_operationaltime_prop.set_description("Major component total operational run time");
	//	label	not set for va_operationalTime
	//	unit	not set for va_operationalTime
	//	standard_unit	not set for va_operationalTime
	//	display_unit	not set for va_operationalTime
	//	format	not set for va_operationalTime
	//	max_value	not set for va_operationalTime
	//	min_value	not set for va_operationalTime
	//	max_alarm	not set for va_operationalTime
	//	min_alarm	not set for va_operationalTime
	//	max_warning	not set for va_operationalTime
	//	min_warning	not set for va_operationalTime
	//	delta_t	not set for va_operationalTime
	//	delta_val	not set for va_operationalTime
	
	va_operationaltime->set_default_properties(va_operationaltime_prop);
	//	Not Polled
	va_operationaltime->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(va_operationaltime);

	//	Attribute : spfc_operationalTime
	spfc_operationalTimeAttrib	*spfc_operationaltime = new spfc_operationalTimeAttrib();
	Tango::UserDefaultAttrProp	spfc_operationaltime_prop;
	spfc_operationaltime_prop.set_description("Major component total operational run time");
	//	label	not set for spfc_operationalTime
	//	unit	not set for spfc_operationalTime
	//	standard_unit	not set for spfc_operationalTime
	//	display_unit	not set for spfc_operationalTime
	//	format	not set for spfc_operationalTime
	//	max_value	not set for spfc_operationalTime
	//	min_value	not set for spfc_operationalTime
	//	max_alarm	not set for spfc_operationalTime
	//	min_alarm	not set for spfc_operationalTime
	//	max_warning	not set for spfc_operationalTime
	//	min_warning	not set for spfc_operationalTime
	//	delta_t	not set for spfc_operationalTime
	//	delta_val	not set for spfc_operationalTime
	
	spfc_operationaltime->set_default_properties(spfc_operationaltime_prop);
	//	Not Polled
	spfc_operationaltime->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(spfc_operationaltime);

	//	Attribute : b1_hourCounter
	b1_hourCounterAttrib	*b1_hourcounter = new b1_hourCounterAttrib();
	Tango::UserDefaultAttrProp	b1_hourcounter_prop;
	b1_hourcounter_prop.set_description("Indicates the operational run time in hours");
	//	label	not set for b1_hourCounter
	//	unit	not set for b1_hourCounter
	//	standard_unit	not set for b1_hourCounter
	//	display_unit	not set for b1_hourCounter
	//	format	not set for b1_hourCounter
	//	max_value	not set for b1_hourCounter
	//	min_value	not set for b1_hourCounter
	//	max_alarm	not set for b1_hourCounter
	//	min_alarm	not set for b1_hourCounter
	//	max_warning	not set for b1_hourCounter
	//	min_warning	not set for b1_hourCounter
	//	delta_t	not set for b1_hourCounter
	//	delta_val	not set for b1_hourCounter
	
	b1_hourcounter->set_default_properties(b1_hourcounter_prop);
	//	Not Polled
	b1_hourcounter->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b1_hourcounter);

	//	Attribute : b2_hourCounter
	b2_hourCounterAttrib	*b2_hourcounter = new b2_hourCounterAttrib();
	Tango::UserDefaultAttrProp	b2_hourcounter_prop;
	b2_hourcounter_prop.set_description("Indicates the operational run time in hours");
	//	label	not set for b2_hourCounter
	//	unit	not set for b2_hourCounter
	//	standard_unit	not set for b2_hourCounter
	//	display_unit	not set for b2_hourCounter
	//	format	not set for b2_hourCounter
	//	max_value	not set for b2_hourCounter
	//	min_value	not set for b2_hourCounter
	//	max_alarm	not set for b2_hourCounter
	//	min_alarm	not set for b2_hourCounter
	//	max_warning	not set for b2_hourCounter
	//	min_warning	not set for b2_hourCounter
	//	delta_t	not set for b2_hourCounter
	//	delta_val	not set for b2_hourCounter
	
	b2_hourcounter->set_default_properties(b2_hourcounter_prop);
	//	Not Polled
	b2_hourcounter->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b2_hourcounter);

	//	Attribute : b3_hourCounter
	b3_hourCounterAttrib	*b3_hourcounter = new b3_hourCounterAttrib();
	Tango::UserDefaultAttrProp	b3_hourcounter_prop;
	b3_hourcounter_prop.set_description("Indicates the operational run time in hours");
	//	label	not set for b3_hourCounter
	//	unit	not set for b3_hourCounter
	//	standard_unit	not set for b3_hourCounter
	//	display_unit	not set for b3_hourCounter
	//	format	not set for b3_hourCounter
	//	max_value	not set for b3_hourCounter
	//	min_value	not set for b3_hourCounter
	//	max_alarm	not set for b3_hourCounter
	//	min_alarm	not set for b3_hourCounter
	//	max_warning	not set for b3_hourCounter
	//	min_warning	not set for b3_hourCounter
	//	delta_t	not set for b3_hourCounter
	//	delta_val	not set for b3_hourCounter
	
	b3_hourcounter->set_default_properties(b3_hourcounter_prop);
	//	Not Polled
	b3_hourcounter->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b3_hourcounter);

	//	Attribute : b4_hourCounter
	b4_hourCounterAttrib	*b4_hourcounter = new b4_hourCounterAttrib();
	Tango::UserDefaultAttrProp	b4_hourcounter_prop;
	b4_hourcounter_prop.set_description("Indicates the operational run time in hours");
	//	label	not set for b4_hourCounter
	//	unit	not set for b4_hourCounter
	//	standard_unit	not set for b4_hourCounter
	//	display_unit	not set for b4_hourCounter
	//	format	not set for b4_hourCounter
	//	max_value	not set for b4_hourCounter
	//	min_value	not set for b4_hourCounter
	//	max_alarm	not set for b4_hourCounter
	//	min_alarm	not set for b4_hourCounter
	//	max_warning	not set for b4_hourCounter
	//	min_warning	not set for b4_hourCounter
	//	delta_t	not set for b4_hourCounter
	//	delta_val	not set for b4_hourCounter
	
	b4_hourcounter->set_default_properties(b4_hourcounter_prop);
	//	Not Polled
	b4_hourcounter->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b4_hourcounter);

	//	Attribute : b5_hourCounter
	b5_hourCounterAttrib	*b5_hourcounter = new b5_hourCounterAttrib();
	Tango::UserDefaultAttrProp	b5_hourcounter_prop;
	b5_hourcounter_prop.set_description("Indicates the operational run time in hours");
	//	label	not set for b5_hourCounter
	//	unit	not set for b5_hourCounter
	//	standard_unit	not set for b5_hourCounter
	//	display_unit	not set for b5_hourCounter
	//	format	not set for b5_hourCounter
	//	max_value	not set for b5_hourCounter
	//	min_value	not set for b5_hourCounter
	//	max_alarm	not set for b5_hourCounter
	//	min_alarm	not set for b5_hourCounter
	//	max_warning	not set for b5_hourCounter
	//	min_warning	not set for b5_hourCounter
	//	delta_t	not set for b5_hourCounter
	//	delta_val	not set for b5_hourCounter
	
	b5_hourcounter->set_default_properties(b5_hourcounter_prop);
	//	Not Polled
	b5_hourcounter->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b5_hourcounter);

	//	Attribute : he_hourCounter
	he_hourCounterAttrib	*he_hourcounter = new he_hourCounterAttrib();
	Tango::UserDefaultAttrProp	he_hourcounter_prop;
	he_hourcounter_prop.set_description("Indicates the operational run time in hours");
	//	label	not set for he_hourCounter
	//	unit	not set for he_hourCounter
	//	standard_unit	not set for he_hourCounter
	//	display_unit	not set for he_hourCounter
	//	format	not set for he_hourCounter
	//	max_value	not set for he_hourCounter
	//	min_value	not set for he_hourCounter
	//	max_alarm	not set for he_hourCounter
	//	min_alarm	not set for he_hourCounter
	//	max_warning	not set for he_hourCounter
	//	min_warning	not set for he_hourCounter
	//	delta_t	not set for he_hourCounter
	//	delta_val	not set for he_hourCounter
	
	he_hourcounter->set_default_properties(he_hourcounter_prop);
	//	Not Polled
	he_hourcounter->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(he_hourcounter);

	//	Attribute : va_hourCounter
	va_hourCounterAttrib	*va_hourcounter = new va_hourCounterAttrib();
	Tango::UserDefaultAttrProp	va_hourcounter_prop;
	va_hourcounter_prop.set_description("Indicates the operational run time in hours");
	//	label	not set for va_hourCounter
	//	unit	not set for va_hourCounter
	//	standard_unit	not set for va_hourCounter
	//	display_unit	not set for va_hourCounter
	//	format	not set for va_hourCounter
	//	max_value	not set for va_hourCounter
	//	min_value	not set for va_hourCounter
	//	max_alarm	not set for va_hourCounter
	//	min_alarm	not set for va_hourCounter
	//	max_warning	not set for va_hourCounter
	//	min_warning	not set for va_hourCounter
	//	delta_t	not set for va_hourCounter
	//	delta_val	not set for va_hourCounter
	
	va_hourcounter->set_default_properties(va_hourcounter_prop);
	//	Not Polled
	va_hourcounter->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(va_hourcounter);

	//	Attribute : spfc_hourCounter
	spfc_hourCounterAttrib	*spfc_hourcounter = new spfc_hourCounterAttrib();
	Tango::UserDefaultAttrProp	spfc_hourcounter_prop;
	spfc_hourcounter_prop.set_description("Indicates the operational run time in hours");
	//	label	not set for spfc_hourCounter
	//	unit	not set for spfc_hourCounter
	//	standard_unit	not set for spfc_hourCounter
	//	display_unit	not set for spfc_hourCounter
	//	format	not set for spfc_hourCounter
	//	max_value	not set for spfc_hourCounter
	//	min_value	not set for spfc_hourCounter
	//	max_alarm	not set for spfc_hourCounter
	//	min_alarm	not set for spfc_hourCounter
	//	max_warning	not set for spfc_hourCounter
	//	min_warning	not set for spfc_hourCounter
	//	delta_t	not set for spfc_hourCounter
	//	delta_val	not set for spfc_hourCounter
	
	spfc_hourcounter->set_default_properties(spfc_hourcounter_prop);
	//	Not Polled
	spfc_hourcounter->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(spfc_hourcounter);

	//	Attribute : b1_expectedOnline
	b1_expectedOnlineAttrib	*b1_expectedonline = new b1_expectedOnlineAttrib();
	Tango::UserDefaultAttrProp	b1_expectedonline_prop;
	b1_expectedonline_prop.set_description("Indicates whether major component is expected online. mcHealthStatus will be normal if this value is set to false and the device is not installed or offline");
	//	label	not set for b1_expectedOnline
	//	unit	not set for b1_expectedOnline
	//	standard_unit	not set for b1_expectedOnline
	//	display_unit	not set for b1_expectedOnline
	//	format	not set for b1_expectedOnline
	//	max_value	not set for b1_expectedOnline
	//	min_value	not set for b1_expectedOnline
	//	max_alarm	not set for b1_expectedOnline
	//	min_alarm	not set for b1_expectedOnline
	//	max_warning	not set for b1_expectedOnline
	//	min_warning	not set for b1_expectedOnline
	//	delta_t	not set for b1_expectedOnline
	//	delta_val	not set for b1_expectedOnline
	
	b1_expectedonline->set_default_properties(b1_expectedonline_prop);
	//	Not Polled
	b1_expectedonline->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b1_expectedonline);

	//	Attribute : b2_expectedOnline
	b2_expectedOnlineAttrib	*b2_expectedonline = new b2_expectedOnlineAttrib();
	Tango::UserDefaultAttrProp	b2_expectedonline_prop;
	b2_expectedonline_prop.set_description("Indicates whether major component is expected online. mcHealthStatus will be normal if this value is set to false and the device is not installed or offline");
	//	label	not set for b2_expectedOnline
	//	unit	not set for b2_expectedOnline
	//	standard_unit	not set for b2_expectedOnline
	//	display_unit	not set for b2_expectedOnline
	//	format	not set for b2_expectedOnline
	//	max_value	not set for b2_expectedOnline
	//	min_value	not set for b2_expectedOnline
	//	max_alarm	not set for b2_expectedOnline
	//	min_alarm	not set for b2_expectedOnline
	//	max_warning	not set for b2_expectedOnline
	//	min_warning	not set for b2_expectedOnline
	//	delta_t	not set for b2_expectedOnline
	//	delta_val	not set for b2_expectedOnline
	
	b2_expectedonline->set_default_properties(b2_expectedonline_prop);
	//	Not Polled
	b2_expectedonline->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b2_expectedonline);

	//	Attribute : b3_expectedOnline
	b3_expectedOnlineAttrib	*b3_expectedonline = new b3_expectedOnlineAttrib();
	Tango::UserDefaultAttrProp	b3_expectedonline_prop;
	b3_expectedonline_prop.set_description("Indicates whether major component is expected online. mcHealthStatus will be normal if this value is set to false and the device is not installed or offline");
	//	label	not set for b3_expectedOnline
	//	unit	not set for b3_expectedOnline
	//	standard_unit	not set for b3_expectedOnline
	//	display_unit	not set for b3_expectedOnline
	//	format	not set for b3_expectedOnline
	//	max_value	not set for b3_expectedOnline
	//	min_value	not set for b3_expectedOnline
	//	max_alarm	not set for b3_expectedOnline
	//	min_alarm	not set for b3_expectedOnline
	//	max_warning	not set for b3_expectedOnline
	//	min_warning	not set for b3_expectedOnline
	//	delta_t	not set for b3_expectedOnline
	//	delta_val	not set for b3_expectedOnline
	
	b3_expectedonline->set_default_properties(b3_expectedonline_prop);
	//	Not Polled
	b3_expectedonline->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b3_expectedonline);

	//	Attribute : b4_expectedOnline
	b4_expectedOnlineAttrib	*b4_expectedonline = new b4_expectedOnlineAttrib();
	Tango::UserDefaultAttrProp	b4_expectedonline_prop;
	b4_expectedonline_prop.set_description("Indicates whether major component is expected online. mcHealthStatus will be normal if this value is set to false and the device is not installed or offline");
	//	label	not set for b4_expectedOnline
	//	unit	not set for b4_expectedOnline
	//	standard_unit	not set for b4_expectedOnline
	//	display_unit	not set for b4_expectedOnline
	//	format	not set for b4_expectedOnline
	//	max_value	not set for b4_expectedOnline
	//	min_value	not set for b4_expectedOnline
	//	max_alarm	not set for b4_expectedOnline
	//	min_alarm	not set for b4_expectedOnline
	//	max_warning	not set for b4_expectedOnline
	//	min_warning	not set for b4_expectedOnline
	//	delta_t	not set for b4_expectedOnline
	//	delta_val	not set for b4_expectedOnline
	
	b4_expectedonline->set_default_properties(b4_expectedonline_prop);
	//	Not Polled
	b4_expectedonline->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b4_expectedonline);

	//	Attribute : b5_expectedOnline
	b5_expectedOnlineAttrib	*b5_expectedonline = new b5_expectedOnlineAttrib();
	Tango::UserDefaultAttrProp	b5_expectedonline_prop;
	b5_expectedonline_prop.set_description("Indicates whether major component is expected online. mcHealthStatus will be normal if this value is set to false and the device is not installed or offline");
	//	label	not set for b5_expectedOnline
	//	unit	not set for b5_expectedOnline
	//	standard_unit	not set for b5_expectedOnline
	//	display_unit	not set for b5_expectedOnline
	//	format	not set for b5_expectedOnline
	//	max_value	not set for b5_expectedOnline
	//	min_value	not set for b5_expectedOnline
	//	max_alarm	not set for b5_expectedOnline
	//	min_alarm	not set for b5_expectedOnline
	//	max_warning	not set for b5_expectedOnline
	//	min_warning	not set for b5_expectedOnline
	//	delta_t	not set for b5_expectedOnline
	//	delta_val	not set for b5_expectedOnline
	
	b5_expectedonline->set_default_properties(b5_expectedonline_prop);
	//	Not Polled
	b5_expectedonline->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b5_expectedonline);

	//	Attribute : he_expectedOnline
	he_expectedOnlineAttrib	*he_expectedonline = new he_expectedOnlineAttrib();
	Tango::UserDefaultAttrProp	he_expectedonline_prop;
	he_expectedonline_prop.set_description("Indicates whether major component is expected online. mcHealthStatus will be normal if this value is set to false and the device is not installed or offline");
	//	label	not set for he_expectedOnline
	//	unit	not set for he_expectedOnline
	//	standard_unit	not set for he_expectedOnline
	//	display_unit	not set for he_expectedOnline
	//	format	not set for he_expectedOnline
	//	max_value	not set for he_expectedOnline
	//	min_value	not set for he_expectedOnline
	//	max_alarm	not set for he_expectedOnline
	//	min_alarm	not set for he_expectedOnline
	//	max_warning	not set for he_expectedOnline
	//	min_warning	not set for he_expectedOnline
	//	delta_t	not set for he_expectedOnline
	//	delta_val	not set for he_expectedOnline
	
	he_expectedonline->set_default_properties(he_expectedonline_prop);
	//	Not Polled
	he_expectedonline->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(he_expectedonline);

	//	Attribute : va_expectedOnline
	va_expectedOnlineAttrib	*va_expectedonline = new va_expectedOnlineAttrib();
	Tango::UserDefaultAttrProp	va_expectedonline_prop;
	//	description	not set for va_expectedOnline
	//	label	not set for va_expectedOnline
	//	unit	not set for va_expectedOnline
	//	standard_unit	not set for va_expectedOnline
	//	display_unit	not set for va_expectedOnline
	//	format	not set for va_expectedOnline
	//	max_value	not set for va_expectedOnline
	//	min_value	not set for va_expectedOnline
	//	max_alarm	not set for va_expectedOnline
	//	min_alarm	not set for va_expectedOnline
	//	max_warning	not set for va_expectedOnline
	//	min_warning	not set for va_expectedOnline
	//	delta_t	not set for va_expectedOnline
	//	delta_val	not set for va_expectedOnline
	
	va_expectedonline->set_default_properties(va_expectedonline_prop);
	//	Not Polled
	va_expectedonline->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(va_expectedonline);

	//	Attribute : spfc_expectedOnline
	spfc_expectedOnlineAttrib	*spfc_expectedonline = new spfc_expectedOnlineAttrib();
	Tango::UserDefaultAttrProp	spfc_expectedonline_prop;
	spfc_expectedonline_prop.set_description("Indicates whether major component is expected online. mcHealthStatus will be normal if this value is set to false and the device is not installed or offline");
	//	label	not set for spfc_expectedOnline
	//	unit	not set for spfc_expectedOnline
	//	standard_unit	not set for spfc_expectedOnline
	//	display_unit	not set for spfc_expectedOnline
	//	format	not set for spfc_expectedOnline
	//	max_value	not set for spfc_expectedOnline
	//	min_value	not set for spfc_expectedOnline
	//	max_alarm	not set for spfc_expectedOnline
	//	min_alarm	not set for spfc_expectedOnline
	//	max_warning	not set for spfc_expectedOnline
	//	min_warning	not set for spfc_expectedOnline
	//	delta_t	not set for spfc_expectedOnline
	//	delta_val	not set for spfc_expectedOnline
	
	spfc_expectedonline->set_default_properties(spfc_expectedonline_prop);
	//	Not Polled
	spfc_expectedonline->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(spfc_expectedonline);

	//	Attribute : spfc_supplyVoltage
	spfc_supplyVoltageAttrib	*spfc_supplyvoltage = new spfc_supplyVoltageAttrib();
	Tango::UserDefaultAttrProp	spfc_supplyvoltage_prop;
	spfc_supplyvoltage_prop.set_description("Controller supply voltage");
	//	label	not set for spfc_supplyVoltage
	//	unit	not set for spfc_supplyVoltage
	//	standard_unit	not set for spfc_supplyVoltage
	//	display_unit	not set for spfc_supplyVoltage
	//	format	not set for spfc_supplyVoltage
	//	max_value	not set for spfc_supplyVoltage
	//	min_value	not set for spfc_supplyVoltage
	//	max_alarm	not set for spfc_supplyVoltage
	//	min_alarm	not set for spfc_supplyVoltage
	//	max_warning	not set for spfc_supplyVoltage
	//	min_warning	not set for spfc_supplyVoltage
	//	delta_t	not set for spfc_supplyVoltage
	//	delta_val	not set for spfc_supplyVoltage
	spfc_supplyvoltage_prop.set_event_period("3000");
	
	spfc_supplyvoltage->set_default_properties(spfc_supplyvoltage_prop);
	spfc_supplyvoltage->set_polling_period(3000);
	spfc_supplyvoltage->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(spfc_supplyvoltage);

	//	Attribute : spfc_supplyCurrent
	spfc_supplyCurrentAttrib	*spfc_supplycurrent = new spfc_supplyCurrentAttrib();
	Tango::UserDefaultAttrProp	spfc_supplycurrent_prop;
	spfc_supplycurrent_prop.set_description("Controller supply current");
	//	label	not set for spfc_supplyCurrent
	//	unit	not set for spfc_supplyCurrent
	//	standard_unit	not set for spfc_supplyCurrent
	//	display_unit	not set for spfc_supplyCurrent
	//	format	not set for spfc_supplyCurrent
	//	max_value	not set for spfc_supplyCurrent
	//	min_value	not set for spfc_supplyCurrent
	//	max_alarm	not set for spfc_supplyCurrent
	//	min_alarm	not set for spfc_supplyCurrent
	//	max_warning	not set for spfc_supplyCurrent
	//	min_warning	not set for spfc_supplyCurrent
	//	delta_t	not set for spfc_supplyCurrent
	//	delta_val	not set for spfc_supplyCurrent
	spfc_supplycurrent_prop.set_event_period("3000");
	
	spfc_supplycurrent->set_default_properties(spfc_supplycurrent_prop);
	spfc_supplycurrent->set_polling_period(3000);
	spfc_supplycurrent->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(spfc_supplycurrent);

	//	Attribute : spfc_temperature
	spfc_temperatureAttrib	*spfc_temperature = new spfc_temperatureAttrib();
	Tango::UserDefaultAttrProp	spfc_temperature_prop;
	spfc_temperature_prop.set_description("Controller temperature");
	//	label	not set for spfc_temperature
	//	unit	not set for spfc_temperature
	//	standard_unit	not set for spfc_temperature
	//	display_unit	not set for spfc_temperature
	//	format	not set for spfc_temperature
	//	max_value	not set for spfc_temperature
	//	min_value	not set for spfc_temperature
	//	max_alarm	not set for spfc_temperature
	//	min_alarm	not set for spfc_temperature
	//	max_warning	not set for spfc_temperature
	//	min_warning	not set for spfc_temperature
	//	delta_t	not set for spfc_temperature
	//	delta_val	not set for spfc_temperature
	spfc_temperature_prop.set_event_period("3000");
	
	spfc_temperature->set_default_properties(spfc_temperature_prop);
	spfc_temperature->set_polling_period(3000);
	spfc_temperature->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(spfc_temperature);

	//	Attribute : he_comp_supplyPressure
	he_comp_supplyPressureAttrib	*he_comp_supplypressure = new he_comp_supplyPressureAttrib();
	Tango::UserDefaultAttrProp	he_comp_supplypressure_prop;
	he_comp_supplypressure_prop.set_description("Helium compressor supply pressure");
	//	label	not set for he_comp_supplyPressure
	//	unit	not set for he_comp_supplyPressure
	//	standard_unit	not set for he_comp_supplyPressure
	//	display_unit	not set for he_comp_supplyPressure
	//	format	not set for he_comp_supplyPressure
	//	max_value	not set for he_comp_supplyPressure
	//	min_value	not set for he_comp_supplyPressure
	//	max_alarm	not set for he_comp_supplyPressure
	//	min_alarm	not set for he_comp_supplyPressure
	//	max_warning	not set for he_comp_supplyPressure
	//	min_warning	not set for he_comp_supplyPressure
	//	delta_t	not set for he_comp_supplyPressure
	//	delta_val	not set for he_comp_supplyPressure
	he_comp_supplypressure_prop.set_event_period("3000");
	
	he_comp_supplypressure->set_default_properties(he_comp_supplypressure_prop);
	//	Not Polled
	he_comp_supplypressure->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(he_comp_supplypressure);

	//	Attribute : he_comp_returnPressure
	he_comp_returnPressureAttrib	*he_comp_returnpressure = new he_comp_returnPressureAttrib();
	Tango::UserDefaultAttrProp	he_comp_returnpressure_prop;
	he_comp_returnpressure_prop.set_description("Helium compressor return pressure");
	//	label	not set for he_comp_returnPressure
	//	unit	not set for he_comp_returnPressure
	//	standard_unit	not set for he_comp_returnPressure
	//	display_unit	not set for he_comp_returnPressure
	//	format	not set for he_comp_returnPressure
	//	max_value	not set for he_comp_returnPressure
	//	min_value	not set for he_comp_returnPressure
	//	max_alarm	not set for he_comp_returnPressure
	//	min_alarm	not set for he_comp_returnPressure
	//	max_warning	not set for he_comp_returnPressure
	//	min_warning	not set for he_comp_returnPressure
	//	delta_t	not set for he_comp_returnPressure
	//	delta_val	not set for he_comp_returnPressure
	he_comp_returnpressure_prop.set_event_period("3000");
	
	he_comp_returnpressure->set_default_properties(he_comp_returnpressure_prop);
	//	Not Polled
	he_comp_returnpressure->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(he_comp_returnpressure);

	//	Attribute : b1_lna_h_drainVoltage
	b1_lna_h_drainVoltageAttrib	*b1_lna_h_drainvoltage = new b1_lna_h_drainVoltageAttrib();
	Tango::UserDefaultAttrProp	b1_lna_h_drainvoltage_prop;
	b1_lna_h_drainvoltage_prop.set_description("Sum of H-channel LNA drain voltages");
	//	label	not set for b1_lna_h_drainVoltage
	//	unit	not set for b1_lna_h_drainVoltage
	//	standard_unit	not set for b1_lna_h_drainVoltage
	//	display_unit	not set for b1_lna_h_drainVoltage
	//	format	not set for b1_lna_h_drainVoltage
	//	max_value	not set for b1_lna_h_drainVoltage
	//	min_value	not set for b1_lna_h_drainVoltage
	//	max_alarm	not set for b1_lna_h_drainVoltage
	//	min_alarm	not set for b1_lna_h_drainVoltage
	//	max_warning	not set for b1_lna_h_drainVoltage
	//	min_warning	not set for b1_lna_h_drainVoltage
	//	delta_t	not set for b1_lna_h_drainVoltage
	//	delta_val	not set for b1_lna_h_drainVoltage
	b1_lna_h_drainvoltage_prop.set_event_period("3000");
	
	b1_lna_h_drainvoltage->set_default_properties(b1_lna_h_drainvoltage_prop);
	b1_lna_h_drainvoltage->set_polling_period(3000);
	b1_lna_h_drainvoltage->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b1_lna_h_drainvoltage);

	//	Attribute : b2_lna_h_drainVoltage
	b2_lna_h_drainVoltageAttrib	*b2_lna_h_drainvoltage = new b2_lna_h_drainVoltageAttrib();
	Tango::UserDefaultAttrProp	b2_lna_h_drainvoltage_prop;
	b2_lna_h_drainvoltage_prop.set_description("Sum of H-channel LNA drain voltages");
	//	label	not set for b2_lna_h_drainVoltage
	//	unit	not set for b2_lna_h_drainVoltage
	//	standard_unit	not set for b2_lna_h_drainVoltage
	//	display_unit	not set for b2_lna_h_drainVoltage
	//	format	not set for b2_lna_h_drainVoltage
	//	max_value	not set for b2_lna_h_drainVoltage
	//	min_value	not set for b2_lna_h_drainVoltage
	//	max_alarm	not set for b2_lna_h_drainVoltage
	//	min_alarm	not set for b2_lna_h_drainVoltage
	//	max_warning	not set for b2_lna_h_drainVoltage
	//	min_warning	not set for b2_lna_h_drainVoltage
	//	delta_t	not set for b2_lna_h_drainVoltage
	//	delta_val	not set for b2_lna_h_drainVoltage
	b2_lna_h_drainvoltage_prop.set_event_period("3000");
	
	b2_lna_h_drainvoltage->set_default_properties(b2_lna_h_drainvoltage_prop);
	b2_lna_h_drainvoltage->set_polling_period(3000);
	b2_lna_h_drainvoltage->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b2_lna_h_drainvoltage);

	//	Attribute : b3_lna_h_drainVoltage
	b3_lna_h_drainVoltageAttrib	*b3_lna_h_drainvoltage = new b3_lna_h_drainVoltageAttrib();
	Tango::UserDefaultAttrProp	b3_lna_h_drainvoltage_prop;
	b3_lna_h_drainvoltage_prop.set_description("Sum of H-channel LNA drain voltages");
	//	label	not set for b3_lna_h_drainVoltage
	//	unit	not set for b3_lna_h_drainVoltage
	//	standard_unit	not set for b3_lna_h_drainVoltage
	//	display_unit	not set for b3_lna_h_drainVoltage
	//	format	not set for b3_lna_h_drainVoltage
	//	max_value	not set for b3_lna_h_drainVoltage
	//	min_value	not set for b3_lna_h_drainVoltage
	//	max_alarm	not set for b3_lna_h_drainVoltage
	//	min_alarm	not set for b3_lna_h_drainVoltage
	//	max_warning	not set for b3_lna_h_drainVoltage
	//	min_warning	not set for b3_lna_h_drainVoltage
	//	delta_t	not set for b3_lna_h_drainVoltage
	//	delta_val	not set for b3_lna_h_drainVoltage
	b3_lna_h_drainvoltage_prop.set_event_period("3000");
	
	b3_lna_h_drainvoltage->set_default_properties(b3_lna_h_drainvoltage_prop);
	b3_lna_h_drainvoltage->set_polling_period(3000);
	b3_lna_h_drainvoltage->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b3_lna_h_drainvoltage);

	//	Attribute : b4_lna_h_drainVoltage
	b4_lna_h_drainVoltageAttrib	*b4_lna_h_drainvoltage = new b4_lna_h_drainVoltageAttrib();
	Tango::UserDefaultAttrProp	b4_lna_h_drainvoltage_prop;
	b4_lna_h_drainvoltage_prop.set_description("Sum of H-channel LNA drain voltages");
	//	label	not set for b4_lna_h_drainVoltage
	//	unit	not set for b4_lna_h_drainVoltage
	//	standard_unit	not set for b4_lna_h_drainVoltage
	//	display_unit	not set for b4_lna_h_drainVoltage
	//	format	not set for b4_lna_h_drainVoltage
	//	max_value	not set for b4_lna_h_drainVoltage
	//	min_value	not set for b4_lna_h_drainVoltage
	//	max_alarm	not set for b4_lna_h_drainVoltage
	//	min_alarm	not set for b4_lna_h_drainVoltage
	//	max_warning	not set for b4_lna_h_drainVoltage
	//	min_warning	not set for b4_lna_h_drainVoltage
	//	delta_t	not set for b4_lna_h_drainVoltage
	//	delta_val	not set for b4_lna_h_drainVoltage
	b4_lna_h_drainvoltage_prop.set_event_period("3000");
	
	b4_lna_h_drainvoltage->set_default_properties(b4_lna_h_drainvoltage_prop);
	b4_lna_h_drainvoltage->set_polling_period(3000);
	b4_lna_h_drainvoltage->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b4_lna_h_drainvoltage);

	//	Attribute : b5_lna_h_drainVoltage
	b5_lna_h_drainVoltageAttrib	*b5_lna_h_drainvoltage = new b5_lna_h_drainVoltageAttrib();
	Tango::UserDefaultAttrProp	b5_lna_h_drainvoltage_prop;
	b5_lna_h_drainvoltage_prop.set_description("Sum of H-channel LNA drain voltages");
	//	label	not set for b5_lna_h_drainVoltage
	//	unit	not set for b5_lna_h_drainVoltage
	//	standard_unit	not set for b5_lna_h_drainVoltage
	//	display_unit	not set for b5_lna_h_drainVoltage
	//	format	not set for b5_lna_h_drainVoltage
	//	max_value	not set for b5_lna_h_drainVoltage
	//	min_value	not set for b5_lna_h_drainVoltage
	//	max_alarm	not set for b5_lna_h_drainVoltage
	//	min_alarm	not set for b5_lna_h_drainVoltage
	//	max_warning	not set for b5_lna_h_drainVoltage
	//	min_warning	not set for b5_lna_h_drainVoltage
	//	delta_t	not set for b5_lna_h_drainVoltage
	//	delta_val	not set for b5_lna_h_drainVoltage
	b5_lna_h_drainvoltage_prop.set_event_period("3000");
	
	b5_lna_h_drainvoltage->set_default_properties(b5_lna_h_drainvoltage_prop);
	b5_lna_h_drainvoltage->set_polling_period(3000);
	b5_lna_h_drainvoltage->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b5_lna_h_drainvoltage);

	//	Attribute : b1_lna_h_gateVoltage
	b1_lna_h_gateVoltageAttrib	*b1_lna_h_gatevoltage = new b1_lna_h_gateVoltageAttrib();
	Tango::UserDefaultAttrProp	b1_lna_h_gatevoltage_prop;
	b1_lna_h_gatevoltage_prop.set_description("H-channel LNA gate voltage");
	//	label	not set for b1_lna_h_gateVoltage
	//	unit	not set for b1_lna_h_gateVoltage
	//	standard_unit	not set for b1_lna_h_gateVoltage
	//	display_unit	not set for b1_lna_h_gateVoltage
	//	format	not set for b1_lna_h_gateVoltage
	//	max_value	not set for b1_lna_h_gateVoltage
	//	min_value	not set for b1_lna_h_gateVoltage
	//	max_alarm	not set for b1_lna_h_gateVoltage
	//	min_alarm	not set for b1_lna_h_gateVoltage
	//	max_warning	not set for b1_lna_h_gateVoltage
	//	min_warning	not set for b1_lna_h_gateVoltage
	//	delta_t	not set for b1_lna_h_gateVoltage
	//	delta_val	not set for b1_lna_h_gateVoltage
	b1_lna_h_gatevoltage_prop.set_event_period("3000");
	
	b1_lna_h_gatevoltage->set_default_properties(b1_lna_h_gatevoltage_prop);
	b1_lna_h_gatevoltage->set_polling_period(3000);
	b1_lna_h_gatevoltage->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b1_lna_h_gatevoltage);

	//	Attribute : b2_lna_h_gateVoltage
	b2_lna_h_gateVoltageAttrib	*b2_lna_h_gatevoltage = new b2_lna_h_gateVoltageAttrib();
	Tango::UserDefaultAttrProp	b2_lna_h_gatevoltage_prop;
	b2_lna_h_gatevoltage_prop.set_description("H-channel LNA gate voltage");
	//	label	not set for b2_lna_h_gateVoltage
	//	unit	not set for b2_lna_h_gateVoltage
	//	standard_unit	not set for b2_lna_h_gateVoltage
	//	display_unit	not set for b2_lna_h_gateVoltage
	//	format	not set for b2_lna_h_gateVoltage
	//	max_value	not set for b2_lna_h_gateVoltage
	//	min_value	not set for b2_lna_h_gateVoltage
	//	max_alarm	not set for b2_lna_h_gateVoltage
	//	min_alarm	not set for b2_lna_h_gateVoltage
	//	max_warning	not set for b2_lna_h_gateVoltage
	//	min_warning	not set for b2_lna_h_gateVoltage
	//	delta_t	not set for b2_lna_h_gateVoltage
	//	delta_val	not set for b2_lna_h_gateVoltage
	b2_lna_h_gatevoltage_prop.set_event_period("3000");
	
	b2_lna_h_gatevoltage->set_default_properties(b2_lna_h_gatevoltage_prop);
	b2_lna_h_gatevoltage->set_polling_period(3000);
	b2_lna_h_gatevoltage->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b2_lna_h_gatevoltage);

	//	Attribute : b3_lna_h_gateVoltage
	b3_lna_h_gateVoltageAttrib	*b3_lna_h_gatevoltage = new b3_lna_h_gateVoltageAttrib();
	Tango::UserDefaultAttrProp	b3_lna_h_gatevoltage_prop;
	b3_lna_h_gatevoltage_prop.set_description("H-channel LNA gate voltage");
	//	label	not set for b3_lna_h_gateVoltage
	//	unit	not set for b3_lna_h_gateVoltage
	//	standard_unit	not set for b3_lna_h_gateVoltage
	//	display_unit	not set for b3_lna_h_gateVoltage
	//	format	not set for b3_lna_h_gateVoltage
	//	max_value	not set for b3_lna_h_gateVoltage
	//	min_value	not set for b3_lna_h_gateVoltage
	//	max_alarm	not set for b3_lna_h_gateVoltage
	//	min_alarm	not set for b3_lna_h_gateVoltage
	//	max_warning	not set for b3_lna_h_gateVoltage
	//	min_warning	not set for b3_lna_h_gateVoltage
	//	delta_t	not set for b3_lna_h_gateVoltage
	//	delta_val	not set for b3_lna_h_gateVoltage
	b3_lna_h_gatevoltage_prop.set_event_period("3000");
	
	b3_lna_h_gatevoltage->set_default_properties(b3_lna_h_gatevoltage_prop);
	b3_lna_h_gatevoltage->set_polling_period(3000);
	b3_lna_h_gatevoltage->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b3_lna_h_gatevoltage);

	//	Attribute : b4_lna_h_gateVoltage
	b4_lna_h_gateVoltageAttrib	*b4_lna_h_gatevoltage = new b4_lna_h_gateVoltageAttrib();
	Tango::UserDefaultAttrProp	b4_lna_h_gatevoltage_prop;
	b4_lna_h_gatevoltage_prop.set_description("H-channel LNA gate voltage");
	//	label	not set for b4_lna_h_gateVoltage
	//	unit	not set for b4_lna_h_gateVoltage
	//	standard_unit	not set for b4_lna_h_gateVoltage
	//	display_unit	not set for b4_lna_h_gateVoltage
	//	format	not set for b4_lna_h_gateVoltage
	//	max_value	not set for b4_lna_h_gateVoltage
	//	min_value	not set for b4_lna_h_gateVoltage
	//	max_alarm	not set for b4_lna_h_gateVoltage
	//	min_alarm	not set for b4_lna_h_gateVoltage
	//	max_warning	not set for b4_lna_h_gateVoltage
	//	min_warning	not set for b4_lna_h_gateVoltage
	//	delta_t	not set for b4_lna_h_gateVoltage
	//	delta_val	not set for b4_lna_h_gateVoltage
	b4_lna_h_gatevoltage_prop.set_event_period("3000");
	
	b4_lna_h_gatevoltage->set_default_properties(b4_lna_h_gatevoltage_prop);
	b4_lna_h_gatevoltage->set_polling_period(3000);
	b4_lna_h_gatevoltage->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b4_lna_h_gatevoltage);

	//	Attribute : b5_lna_h_gateVoltage
	b5_lna_h_gateVoltageAttrib	*b5_lna_h_gatevoltage = new b5_lna_h_gateVoltageAttrib();
	Tango::UserDefaultAttrProp	b5_lna_h_gatevoltage_prop;
	b5_lna_h_gatevoltage_prop.set_description("H-channel LNA gate voltage");
	//	label	not set for b5_lna_h_gateVoltage
	//	unit	not set for b5_lna_h_gateVoltage
	//	standard_unit	not set for b5_lna_h_gateVoltage
	//	display_unit	not set for b5_lna_h_gateVoltage
	//	format	not set for b5_lna_h_gateVoltage
	//	max_value	not set for b5_lna_h_gateVoltage
	//	min_value	not set for b5_lna_h_gateVoltage
	//	max_alarm	not set for b5_lna_h_gateVoltage
	//	min_alarm	not set for b5_lna_h_gateVoltage
	//	max_warning	not set for b5_lna_h_gateVoltage
	//	min_warning	not set for b5_lna_h_gateVoltage
	//	delta_t	not set for b5_lna_h_gateVoltage
	//	delta_val	not set for b5_lna_h_gateVoltage
	b5_lna_h_gatevoltage_prop.set_event_period("3000");
	
	b5_lna_h_gatevoltage->set_default_properties(b5_lna_h_gatevoltage_prop);
	b5_lna_h_gatevoltage->set_polling_period(3000);
	b5_lna_h_gatevoltage->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b5_lna_h_gatevoltage);

	//	Attribute : b1_lna_h_drainCurrent
	b1_lna_h_drainCurrentAttrib	*b1_lna_h_draincurrent = new b1_lna_h_drainCurrentAttrib();
	Tango::UserDefaultAttrProp	b1_lna_h_draincurrent_prop;
	b1_lna_h_draincurrent_prop.set_description("Sum of H-channel LNA drain currents");
	//	label	not set for b1_lna_h_drainCurrent
	//	unit	not set for b1_lna_h_drainCurrent
	//	standard_unit	not set for b1_lna_h_drainCurrent
	//	display_unit	not set for b1_lna_h_drainCurrent
	//	format	not set for b1_lna_h_drainCurrent
	//	max_value	not set for b1_lna_h_drainCurrent
	//	min_value	not set for b1_lna_h_drainCurrent
	//	max_alarm	not set for b1_lna_h_drainCurrent
	//	min_alarm	not set for b1_lna_h_drainCurrent
	//	max_warning	not set for b1_lna_h_drainCurrent
	//	min_warning	not set for b1_lna_h_drainCurrent
	//	delta_t	not set for b1_lna_h_drainCurrent
	//	delta_val	not set for b1_lna_h_drainCurrent
	b1_lna_h_draincurrent_prop.set_event_period("3000");
	
	b1_lna_h_draincurrent->set_default_properties(b1_lna_h_draincurrent_prop);
	b1_lna_h_draincurrent->set_polling_period(3000);
	b1_lna_h_draincurrent->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b1_lna_h_draincurrent);

	//	Attribute : b2_lna_h_drainCurrent
	b2_lna_h_drainCurrentAttrib	*b2_lna_h_draincurrent = new b2_lna_h_drainCurrentAttrib();
	Tango::UserDefaultAttrProp	b2_lna_h_draincurrent_prop;
	b2_lna_h_draincurrent_prop.set_description("Sum of H-channel LNA drain currents");
	//	label	not set for b2_lna_h_drainCurrent
	//	unit	not set for b2_lna_h_drainCurrent
	//	standard_unit	not set for b2_lna_h_drainCurrent
	//	display_unit	not set for b2_lna_h_drainCurrent
	//	format	not set for b2_lna_h_drainCurrent
	//	max_value	not set for b2_lna_h_drainCurrent
	//	min_value	not set for b2_lna_h_drainCurrent
	//	max_alarm	not set for b2_lna_h_drainCurrent
	//	min_alarm	not set for b2_lna_h_drainCurrent
	//	max_warning	not set for b2_lna_h_drainCurrent
	//	min_warning	not set for b2_lna_h_drainCurrent
	//	delta_t	not set for b2_lna_h_drainCurrent
	//	delta_val	not set for b2_lna_h_drainCurrent
	b2_lna_h_draincurrent_prop.set_event_period("3000");
	
	b2_lna_h_draincurrent->set_default_properties(b2_lna_h_draincurrent_prop);
	b2_lna_h_draincurrent->set_polling_period(3000);
	b2_lna_h_draincurrent->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b2_lna_h_draincurrent);

	//	Attribute : b3_lna_h_drainCurrent
	b3_lna_h_drainCurrentAttrib	*b3_lna_h_draincurrent = new b3_lna_h_drainCurrentAttrib();
	Tango::UserDefaultAttrProp	b3_lna_h_draincurrent_prop;
	b3_lna_h_draincurrent_prop.set_description("Sum of H-channel LNA drain currents");
	//	label	not set for b3_lna_h_drainCurrent
	//	unit	not set for b3_lna_h_drainCurrent
	//	standard_unit	not set for b3_lna_h_drainCurrent
	//	display_unit	not set for b3_lna_h_drainCurrent
	//	format	not set for b3_lna_h_drainCurrent
	//	max_value	not set for b3_lna_h_drainCurrent
	//	min_value	not set for b3_lna_h_drainCurrent
	//	max_alarm	not set for b3_lna_h_drainCurrent
	//	min_alarm	not set for b3_lna_h_drainCurrent
	//	max_warning	not set for b3_lna_h_drainCurrent
	//	min_warning	not set for b3_lna_h_drainCurrent
	//	delta_t	not set for b3_lna_h_drainCurrent
	//	delta_val	not set for b3_lna_h_drainCurrent
	b3_lna_h_draincurrent_prop.set_event_period("3000");
	
	b3_lna_h_draincurrent->set_default_properties(b3_lna_h_draincurrent_prop);
	b3_lna_h_draincurrent->set_polling_period(3000);
	b3_lna_h_draincurrent->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b3_lna_h_draincurrent);

	//	Attribute : b4_lna_h_drainCurrent
	b4_lna_h_drainCurrentAttrib	*b4_lna_h_draincurrent = new b4_lna_h_drainCurrentAttrib();
	Tango::UserDefaultAttrProp	b4_lna_h_draincurrent_prop;
	b4_lna_h_draincurrent_prop.set_description("Sum of H-channel LNA drain currents");
	//	label	not set for b4_lna_h_drainCurrent
	//	unit	not set for b4_lna_h_drainCurrent
	//	standard_unit	not set for b4_lna_h_drainCurrent
	//	display_unit	not set for b4_lna_h_drainCurrent
	//	format	not set for b4_lna_h_drainCurrent
	//	max_value	not set for b4_lna_h_drainCurrent
	//	min_value	not set for b4_lna_h_drainCurrent
	//	max_alarm	not set for b4_lna_h_drainCurrent
	//	min_alarm	not set for b4_lna_h_drainCurrent
	//	max_warning	not set for b4_lna_h_drainCurrent
	//	min_warning	not set for b4_lna_h_drainCurrent
	//	delta_t	not set for b4_lna_h_drainCurrent
	//	delta_val	not set for b4_lna_h_drainCurrent
	b4_lna_h_draincurrent_prop.set_event_period("3000");
	
	b4_lna_h_draincurrent->set_default_properties(b4_lna_h_draincurrent_prop);
	b4_lna_h_draincurrent->set_polling_period(3000);
	b4_lna_h_draincurrent->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b4_lna_h_draincurrent);

	//	Attribute : b5_lna_h_drainCurrent
	b5_lna_h_drainCurrentAttrib	*b5_lna_h_draincurrent = new b5_lna_h_drainCurrentAttrib();
	Tango::UserDefaultAttrProp	b5_lna_h_draincurrent_prop;
	b5_lna_h_draincurrent_prop.set_description("Sum of H-channel LNA drain currents");
	//	label	not set for b5_lna_h_drainCurrent
	//	unit	not set for b5_lna_h_drainCurrent
	//	standard_unit	not set for b5_lna_h_drainCurrent
	//	display_unit	not set for b5_lna_h_drainCurrent
	//	format	not set for b5_lna_h_drainCurrent
	//	max_value	not set for b5_lna_h_drainCurrent
	//	min_value	not set for b5_lna_h_drainCurrent
	//	max_alarm	not set for b5_lna_h_drainCurrent
	//	min_alarm	not set for b5_lna_h_drainCurrent
	//	max_warning	not set for b5_lna_h_drainCurrent
	//	min_warning	not set for b5_lna_h_drainCurrent
	//	delta_t	not set for b5_lna_h_drainCurrent
	//	delta_val	not set for b5_lna_h_drainCurrent
	b5_lna_h_draincurrent_prop.set_event_period("3000");
	
	b5_lna_h_draincurrent->set_default_properties(b5_lna_h_draincurrent_prop);
	b5_lna_h_draincurrent->set_polling_period(3000);
	b5_lna_h_draincurrent->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b5_lna_h_draincurrent);

	//	Attribute : b1_lna_v_drainVoltage
	b1_lna_v_drainVoltageAttrib	*b1_lna_v_drainvoltage = new b1_lna_v_drainVoltageAttrib();
	Tango::UserDefaultAttrProp	b1_lna_v_drainvoltage_prop;
	b1_lna_v_drainvoltage_prop.set_description("Sum of V-channel LNA drain voltages");
	//	label	not set for b1_lna_v_drainVoltage
	//	unit	not set for b1_lna_v_drainVoltage
	//	standard_unit	not set for b1_lna_v_drainVoltage
	//	display_unit	not set for b1_lna_v_drainVoltage
	//	format	not set for b1_lna_v_drainVoltage
	//	max_value	not set for b1_lna_v_drainVoltage
	//	min_value	not set for b1_lna_v_drainVoltage
	//	max_alarm	not set for b1_lna_v_drainVoltage
	//	min_alarm	not set for b1_lna_v_drainVoltage
	//	max_warning	not set for b1_lna_v_drainVoltage
	//	min_warning	not set for b1_lna_v_drainVoltage
	//	delta_t	not set for b1_lna_v_drainVoltage
	//	delta_val	not set for b1_lna_v_drainVoltage
	b1_lna_v_drainvoltage_prop.set_event_period("3000");
	
	b1_lna_v_drainvoltage->set_default_properties(b1_lna_v_drainvoltage_prop);
	b1_lna_v_drainvoltage->set_polling_period(3000);
	b1_lna_v_drainvoltage->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b1_lna_v_drainvoltage);

	//	Attribute : b2_lna_v_drainVoltage
	b2_lna_v_drainVoltageAttrib	*b2_lna_v_drainvoltage = new b2_lna_v_drainVoltageAttrib();
	Tango::UserDefaultAttrProp	b2_lna_v_drainvoltage_prop;
	b2_lna_v_drainvoltage_prop.set_description("Sum of V-channel LNA drain voltages");
	//	label	not set for b2_lna_v_drainVoltage
	//	unit	not set for b2_lna_v_drainVoltage
	//	standard_unit	not set for b2_lna_v_drainVoltage
	//	display_unit	not set for b2_lna_v_drainVoltage
	//	format	not set for b2_lna_v_drainVoltage
	//	max_value	not set for b2_lna_v_drainVoltage
	//	min_value	not set for b2_lna_v_drainVoltage
	//	max_alarm	not set for b2_lna_v_drainVoltage
	//	min_alarm	not set for b2_lna_v_drainVoltage
	//	max_warning	not set for b2_lna_v_drainVoltage
	//	min_warning	not set for b2_lna_v_drainVoltage
	//	delta_t	not set for b2_lna_v_drainVoltage
	//	delta_val	not set for b2_lna_v_drainVoltage
	b2_lna_v_drainvoltage_prop.set_event_period("3000");
	
	b2_lna_v_drainvoltage->set_default_properties(b2_lna_v_drainvoltage_prop);
	b2_lna_v_drainvoltage->set_polling_period(3000);
	b2_lna_v_drainvoltage->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b2_lna_v_drainvoltage);

	//	Attribute : b3_lna_v_drainVoltage
	b3_lna_v_drainVoltageAttrib	*b3_lna_v_drainvoltage = new b3_lna_v_drainVoltageAttrib();
	Tango::UserDefaultAttrProp	b3_lna_v_drainvoltage_prop;
	b3_lna_v_drainvoltage_prop.set_description("Sum of V-channel LNA drain voltages");
	//	label	not set for b3_lna_v_drainVoltage
	//	unit	not set for b3_lna_v_drainVoltage
	//	standard_unit	not set for b3_lna_v_drainVoltage
	//	display_unit	not set for b3_lna_v_drainVoltage
	//	format	not set for b3_lna_v_drainVoltage
	//	max_value	not set for b3_lna_v_drainVoltage
	//	min_value	not set for b3_lna_v_drainVoltage
	//	max_alarm	not set for b3_lna_v_drainVoltage
	//	min_alarm	not set for b3_lna_v_drainVoltage
	//	max_warning	not set for b3_lna_v_drainVoltage
	//	min_warning	not set for b3_lna_v_drainVoltage
	//	delta_t	not set for b3_lna_v_drainVoltage
	//	delta_val	not set for b3_lna_v_drainVoltage
	b3_lna_v_drainvoltage_prop.set_event_period("3000");
	
	b3_lna_v_drainvoltage->set_default_properties(b3_lna_v_drainvoltage_prop);
	b3_lna_v_drainvoltage->set_polling_period(3000);
	b3_lna_v_drainvoltage->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b3_lna_v_drainvoltage);

	//	Attribute : b4_lna_v_drainVoltage
	b4_lna_v_drainVoltageAttrib	*b4_lna_v_drainvoltage = new b4_lna_v_drainVoltageAttrib();
	Tango::UserDefaultAttrProp	b4_lna_v_drainvoltage_prop;
	b4_lna_v_drainvoltage_prop.set_description("Sum of V-channel LNA drain voltages");
	//	label	not set for b4_lna_v_drainVoltage
	//	unit	not set for b4_lna_v_drainVoltage
	//	standard_unit	not set for b4_lna_v_drainVoltage
	//	display_unit	not set for b4_lna_v_drainVoltage
	//	format	not set for b4_lna_v_drainVoltage
	//	max_value	not set for b4_lna_v_drainVoltage
	//	min_value	not set for b4_lna_v_drainVoltage
	//	max_alarm	not set for b4_lna_v_drainVoltage
	//	min_alarm	not set for b4_lna_v_drainVoltage
	//	max_warning	not set for b4_lna_v_drainVoltage
	//	min_warning	not set for b4_lna_v_drainVoltage
	//	delta_t	not set for b4_lna_v_drainVoltage
	//	delta_val	not set for b4_lna_v_drainVoltage
	b4_lna_v_drainvoltage_prop.set_event_period("3000");
	
	b4_lna_v_drainvoltage->set_default_properties(b4_lna_v_drainvoltage_prop);
	b4_lna_v_drainvoltage->set_polling_period(3000);
	b4_lna_v_drainvoltage->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b4_lna_v_drainvoltage);

	//	Attribute : b5_lna_v_drainVoltage
	b5_lna_v_drainVoltageAttrib	*b5_lna_v_drainvoltage = new b5_lna_v_drainVoltageAttrib();
	Tango::UserDefaultAttrProp	b5_lna_v_drainvoltage_prop;
	b5_lna_v_drainvoltage_prop.set_description("Sum of V-channel LNA drain voltages");
	//	label	not set for b5_lna_v_drainVoltage
	//	unit	not set for b5_lna_v_drainVoltage
	//	standard_unit	not set for b5_lna_v_drainVoltage
	//	display_unit	not set for b5_lna_v_drainVoltage
	//	format	not set for b5_lna_v_drainVoltage
	//	max_value	not set for b5_lna_v_drainVoltage
	//	min_value	not set for b5_lna_v_drainVoltage
	//	max_alarm	not set for b5_lna_v_drainVoltage
	//	min_alarm	not set for b5_lna_v_drainVoltage
	//	max_warning	not set for b5_lna_v_drainVoltage
	//	min_warning	not set for b5_lna_v_drainVoltage
	//	delta_t	not set for b5_lna_v_drainVoltage
	//	delta_val	not set for b5_lna_v_drainVoltage
	b5_lna_v_drainvoltage_prop.set_event_period("3000");
	
	b5_lna_v_drainvoltage->set_default_properties(b5_lna_v_drainvoltage_prop);
	b5_lna_v_drainvoltage->set_polling_period(3000);
	b5_lna_v_drainvoltage->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b5_lna_v_drainvoltage);

	//	Attribute : b1_lna_v_gateVoltage
	b1_lna_v_gateVoltageAttrib	*b1_lna_v_gatevoltage = new b1_lna_v_gateVoltageAttrib();
	Tango::UserDefaultAttrProp	b1_lna_v_gatevoltage_prop;
	b1_lna_v_gatevoltage_prop.set_description("V-channel LNA gate voltage");
	//	label	not set for b1_lna_v_gateVoltage
	//	unit	not set for b1_lna_v_gateVoltage
	//	standard_unit	not set for b1_lna_v_gateVoltage
	//	display_unit	not set for b1_lna_v_gateVoltage
	//	format	not set for b1_lna_v_gateVoltage
	//	max_value	not set for b1_lna_v_gateVoltage
	//	min_value	not set for b1_lna_v_gateVoltage
	//	max_alarm	not set for b1_lna_v_gateVoltage
	//	min_alarm	not set for b1_lna_v_gateVoltage
	//	max_warning	not set for b1_lna_v_gateVoltage
	//	min_warning	not set for b1_lna_v_gateVoltage
	//	delta_t	not set for b1_lna_v_gateVoltage
	//	delta_val	not set for b1_lna_v_gateVoltage
	b1_lna_v_gatevoltage_prop.set_event_period("3000");
	
	b1_lna_v_gatevoltage->set_default_properties(b1_lna_v_gatevoltage_prop);
	b1_lna_v_gatevoltage->set_polling_period(3000);
	b1_lna_v_gatevoltage->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b1_lna_v_gatevoltage);

	//	Attribute : b2_lna_v_gateVoltage
	b2_lna_v_gateVoltageAttrib	*b2_lna_v_gatevoltage = new b2_lna_v_gateVoltageAttrib();
	Tango::UserDefaultAttrProp	b2_lna_v_gatevoltage_prop;
	b2_lna_v_gatevoltage_prop.set_description("V-channel LNA gate voltage");
	//	label	not set for b2_lna_v_gateVoltage
	//	unit	not set for b2_lna_v_gateVoltage
	//	standard_unit	not set for b2_lna_v_gateVoltage
	//	display_unit	not set for b2_lna_v_gateVoltage
	//	format	not set for b2_lna_v_gateVoltage
	//	max_value	not set for b2_lna_v_gateVoltage
	//	min_value	not set for b2_lna_v_gateVoltage
	//	max_alarm	not set for b2_lna_v_gateVoltage
	//	min_alarm	not set for b2_lna_v_gateVoltage
	//	max_warning	not set for b2_lna_v_gateVoltage
	//	min_warning	not set for b2_lna_v_gateVoltage
	//	delta_t	not set for b2_lna_v_gateVoltage
	//	delta_val	not set for b2_lna_v_gateVoltage
	
	b2_lna_v_gatevoltage->set_default_properties(b2_lna_v_gatevoltage_prop);
	b2_lna_v_gatevoltage->set_polling_period(3000);
	b2_lna_v_gatevoltage->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b2_lna_v_gatevoltage);

	//	Attribute : b3_lna_v_gateVoltage
	b3_lna_v_gateVoltageAttrib	*b3_lna_v_gatevoltage = new b3_lna_v_gateVoltageAttrib();
	Tango::UserDefaultAttrProp	b3_lna_v_gatevoltage_prop;
	b3_lna_v_gatevoltage_prop.set_description("V-channel LNA gate voltage");
	//	label	not set for b3_lna_v_gateVoltage
	//	unit	not set for b3_lna_v_gateVoltage
	//	standard_unit	not set for b3_lna_v_gateVoltage
	//	display_unit	not set for b3_lna_v_gateVoltage
	//	format	not set for b3_lna_v_gateVoltage
	//	max_value	not set for b3_lna_v_gateVoltage
	//	min_value	not set for b3_lna_v_gateVoltage
	//	max_alarm	not set for b3_lna_v_gateVoltage
	//	min_alarm	not set for b3_lna_v_gateVoltage
	//	max_warning	not set for b3_lna_v_gateVoltage
	//	min_warning	not set for b3_lna_v_gateVoltage
	//	delta_t	not set for b3_lna_v_gateVoltage
	//	delta_val	not set for b3_lna_v_gateVoltage
	b3_lna_v_gatevoltage_prop.set_event_period("3000");
	
	b3_lna_v_gatevoltage->set_default_properties(b3_lna_v_gatevoltage_prop);
	b3_lna_v_gatevoltage->set_polling_period(3000);
	b3_lna_v_gatevoltage->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b3_lna_v_gatevoltage);

	//	Attribute : b4_lna_v_gateVoltage
	b4_lna_v_gateVoltageAttrib	*b4_lna_v_gatevoltage = new b4_lna_v_gateVoltageAttrib();
	Tango::UserDefaultAttrProp	b4_lna_v_gatevoltage_prop;
	b4_lna_v_gatevoltage_prop.set_description("V-channel LNA gate voltage");
	//	label	not set for b4_lna_v_gateVoltage
	//	unit	not set for b4_lna_v_gateVoltage
	//	standard_unit	not set for b4_lna_v_gateVoltage
	//	display_unit	not set for b4_lna_v_gateVoltage
	//	format	not set for b4_lna_v_gateVoltage
	//	max_value	not set for b4_lna_v_gateVoltage
	//	min_value	not set for b4_lna_v_gateVoltage
	//	max_alarm	not set for b4_lna_v_gateVoltage
	//	min_alarm	not set for b4_lna_v_gateVoltage
	//	max_warning	not set for b4_lna_v_gateVoltage
	//	min_warning	not set for b4_lna_v_gateVoltage
	//	delta_t	not set for b4_lna_v_gateVoltage
	//	delta_val	not set for b4_lna_v_gateVoltage
	b4_lna_v_gatevoltage_prop.set_event_period("3000");
	
	b4_lna_v_gatevoltage->set_default_properties(b4_lna_v_gatevoltage_prop);
	b4_lna_v_gatevoltage->set_polling_period(3000);
	b4_lna_v_gatevoltage->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b4_lna_v_gatevoltage);

	//	Attribute : b5_lna_v_gateVoltage
	b5_lna_v_gateVoltageAttrib	*b5_lna_v_gatevoltage = new b5_lna_v_gateVoltageAttrib();
	Tango::UserDefaultAttrProp	b5_lna_v_gatevoltage_prop;
	b5_lna_v_gatevoltage_prop.set_description("V-channel LNA gate voltage");
	//	label	not set for b5_lna_v_gateVoltage
	//	unit	not set for b5_lna_v_gateVoltage
	//	standard_unit	not set for b5_lna_v_gateVoltage
	//	display_unit	not set for b5_lna_v_gateVoltage
	//	format	not set for b5_lna_v_gateVoltage
	//	max_value	not set for b5_lna_v_gateVoltage
	//	min_value	not set for b5_lna_v_gateVoltage
	//	max_alarm	not set for b5_lna_v_gateVoltage
	//	min_alarm	not set for b5_lna_v_gateVoltage
	//	max_warning	not set for b5_lna_v_gateVoltage
	//	min_warning	not set for b5_lna_v_gateVoltage
	//	delta_t	not set for b5_lna_v_gateVoltage
	//	delta_val	not set for b5_lna_v_gateVoltage
	b5_lna_v_gatevoltage_prop.set_event_period("3000");
	
	b5_lna_v_gatevoltage->set_default_properties(b5_lna_v_gatevoltage_prop);
	b5_lna_v_gatevoltage->set_polling_period(3000);
	b5_lna_v_gatevoltage->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b5_lna_v_gatevoltage);

	//	Attribute : b1_lna_v_drainCurrent
	b1_lna_v_drainCurrentAttrib	*b1_lna_v_draincurrent = new b1_lna_v_drainCurrentAttrib();
	Tango::UserDefaultAttrProp	b1_lna_v_draincurrent_prop;
	b1_lna_v_draincurrent_prop.set_description("Sum of V-channel LNA drain currents");
	//	label	not set for b1_lna_v_drainCurrent
	//	unit	not set for b1_lna_v_drainCurrent
	//	standard_unit	not set for b1_lna_v_drainCurrent
	//	display_unit	not set for b1_lna_v_drainCurrent
	//	format	not set for b1_lna_v_drainCurrent
	//	max_value	not set for b1_lna_v_drainCurrent
	//	min_value	not set for b1_lna_v_drainCurrent
	//	max_alarm	not set for b1_lna_v_drainCurrent
	//	min_alarm	not set for b1_lna_v_drainCurrent
	//	max_warning	not set for b1_lna_v_drainCurrent
	//	min_warning	not set for b1_lna_v_drainCurrent
	//	delta_t	not set for b1_lna_v_drainCurrent
	//	delta_val	not set for b1_lna_v_drainCurrent
	b1_lna_v_draincurrent_prop.set_event_period("3000");
	
	b1_lna_v_draincurrent->set_default_properties(b1_lna_v_draincurrent_prop);
	b1_lna_v_draincurrent->set_polling_period(3000);
	b1_lna_v_draincurrent->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b1_lna_v_draincurrent);

	//	Attribute : b2_lna_v_drainCurrent
	b2_lna_v_drainCurrentAttrib	*b2_lna_v_draincurrent = new b2_lna_v_drainCurrentAttrib();
	Tango::UserDefaultAttrProp	b2_lna_v_draincurrent_prop;
	b2_lna_v_draincurrent_prop.set_description("Sum of V-channel LNA drain currents");
	//	label	not set for b2_lna_v_drainCurrent
	//	unit	not set for b2_lna_v_drainCurrent
	//	standard_unit	not set for b2_lna_v_drainCurrent
	//	display_unit	not set for b2_lna_v_drainCurrent
	//	format	not set for b2_lna_v_drainCurrent
	//	max_value	not set for b2_lna_v_drainCurrent
	//	min_value	not set for b2_lna_v_drainCurrent
	//	max_alarm	not set for b2_lna_v_drainCurrent
	//	min_alarm	not set for b2_lna_v_drainCurrent
	//	max_warning	not set for b2_lna_v_drainCurrent
	//	min_warning	not set for b2_lna_v_drainCurrent
	//	delta_t	not set for b2_lna_v_drainCurrent
	//	delta_val	not set for b2_lna_v_drainCurrent
	b2_lna_v_draincurrent_prop.set_event_period("3000");
	
	b2_lna_v_draincurrent->set_default_properties(b2_lna_v_draincurrent_prop);
	b2_lna_v_draincurrent->set_polling_period(3000);
	b2_lna_v_draincurrent->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b2_lna_v_draincurrent);

	//	Attribute : b3_lna_v_drainCurrent
	b3_lna_v_drainCurrentAttrib	*b3_lna_v_draincurrent = new b3_lna_v_drainCurrentAttrib();
	Tango::UserDefaultAttrProp	b3_lna_v_draincurrent_prop;
	b3_lna_v_draincurrent_prop.set_description("Sum of V-channel LNA drain currents");
	//	label	not set for b3_lna_v_drainCurrent
	//	unit	not set for b3_lna_v_drainCurrent
	//	standard_unit	not set for b3_lna_v_drainCurrent
	//	display_unit	not set for b3_lna_v_drainCurrent
	//	format	not set for b3_lna_v_drainCurrent
	//	max_value	not set for b3_lna_v_drainCurrent
	//	min_value	not set for b3_lna_v_drainCurrent
	//	max_alarm	not set for b3_lna_v_drainCurrent
	//	min_alarm	not set for b3_lna_v_drainCurrent
	//	max_warning	not set for b3_lna_v_drainCurrent
	//	min_warning	not set for b3_lna_v_drainCurrent
	//	delta_t	not set for b3_lna_v_drainCurrent
	//	delta_val	not set for b3_lna_v_drainCurrent
	
	b3_lna_v_draincurrent->set_default_properties(b3_lna_v_draincurrent_prop);
	b3_lna_v_draincurrent->set_polling_period(3000);
	b3_lna_v_draincurrent->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b3_lna_v_draincurrent);

	//	Attribute : b4_lna_v_drainCurrent
	b4_lna_v_drainCurrentAttrib	*b4_lna_v_draincurrent = new b4_lna_v_drainCurrentAttrib();
	Tango::UserDefaultAttrProp	b4_lna_v_draincurrent_prop;
	b4_lna_v_draincurrent_prop.set_description("Sum of V-channel LNA drain currents");
	//	label	not set for b4_lna_v_drainCurrent
	//	unit	not set for b4_lna_v_drainCurrent
	//	standard_unit	not set for b4_lna_v_drainCurrent
	//	display_unit	not set for b4_lna_v_drainCurrent
	//	format	not set for b4_lna_v_drainCurrent
	//	max_value	not set for b4_lna_v_drainCurrent
	//	min_value	not set for b4_lna_v_drainCurrent
	//	max_alarm	not set for b4_lna_v_drainCurrent
	//	min_alarm	not set for b4_lna_v_drainCurrent
	//	max_warning	not set for b4_lna_v_drainCurrent
	//	min_warning	not set for b4_lna_v_drainCurrent
	//	delta_t	not set for b4_lna_v_drainCurrent
	//	delta_val	not set for b4_lna_v_drainCurrent
	
	b4_lna_v_draincurrent->set_default_properties(b4_lna_v_draincurrent_prop);
	b4_lna_v_draincurrent->set_polling_period(3000);
	b4_lna_v_draincurrent->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b4_lna_v_draincurrent);

	//	Attribute : b5_lna_v_drainCurrent
	b5_lna_v_drainCurrentAttrib	*b5_lna_v_draincurrent = new b5_lna_v_drainCurrentAttrib();
	Tango::UserDefaultAttrProp	b5_lna_v_draincurrent_prop;
	b5_lna_v_draincurrent_prop.set_description("Sum of V-channel LNA drain currents");
	//	label	not set for b5_lna_v_drainCurrent
	//	unit	not set for b5_lna_v_drainCurrent
	//	standard_unit	not set for b5_lna_v_drainCurrent
	//	display_unit	not set for b5_lna_v_drainCurrent
	//	format	not set for b5_lna_v_drainCurrent
	//	max_value	not set for b5_lna_v_drainCurrent
	//	min_value	not set for b5_lna_v_drainCurrent
	//	max_alarm	not set for b5_lna_v_drainCurrent
	//	min_alarm	not set for b5_lna_v_drainCurrent
	//	max_warning	not set for b5_lna_v_drainCurrent
	//	min_warning	not set for b5_lna_v_drainCurrent
	//	delta_t	not set for b5_lna_v_drainCurrent
	//	delta_val	not set for b5_lna_v_drainCurrent
	b5_lna_v_draincurrent_prop.set_event_period("3000");
	
	b5_lna_v_draincurrent->set_default_properties(b5_lna_v_draincurrent_prop);
	b5_lna_v_draincurrent->set_polling_period(3000);
	b5_lna_v_draincurrent->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b5_lna_v_draincurrent);

	//	Attribute : b1_amp2_h_Current
	b1_amp2_h_CurrentAttrib	*b1_amp2_h_current = new b1_amp2_h_CurrentAttrib();
	Tango::UserDefaultAttrProp	b1_amp2_h_current_prop;
	b1_amp2_h_current_prop.set_description("H-channel 2nd Stage amplifier Current");
	//	label	not set for b1_amp2_h_Current
	//	unit	not set for b1_amp2_h_Current
	//	standard_unit	not set for b1_amp2_h_Current
	//	display_unit	not set for b1_amp2_h_Current
	//	format	not set for b1_amp2_h_Current
	//	max_value	not set for b1_amp2_h_Current
	//	min_value	not set for b1_amp2_h_Current
	//	max_alarm	not set for b1_amp2_h_Current
	//	min_alarm	not set for b1_amp2_h_Current
	//	max_warning	not set for b1_amp2_h_Current
	//	min_warning	not set for b1_amp2_h_Current
	//	delta_t	not set for b1_amp2_h_Current
	//	delta_val	not set for b1_amp2_h_Current
	b1_amp2_h_current_prop.set_event_period("3000");
	
	b1_amp2_h_current->set_default_properties(b1_amp2_h_current_prop);
	b1_amp2_h_current->set_polling_period(3000);
	b1_amp2_h_current->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b1_amp2_h_current);

	//	Attribute : b2_amp2_h_Current
	b2_amp2_h_CurrentAttrib	*b2_amp2_h_current = new b2_amp2_h_CurrentAttrib();
	Tango::UserDefaultAttrProp	b2_amp2_h_current_prop;
	b2_amp2_h_current_prop.set_description("H-channel 2nd Stage amplifier Current");
	//	label	not set for b2_amp2_h_Current
	//	unit	not set for b2_amp2_h_Current
	//	standard_unit	not set for b2_amp2_h_Current
	//	display_unit	not set for b2_amp2_h_Current
	//	format	not set for b2_amp2_h_Current
	//	max_value	not set for b2_amp2_h_Current
	//	min_value	not set for b2_amp2_h_Current
	//	max_alarm	not set for b2_amp2_h_Current
	//	min_alarm	not set for b2_amp2_h_Current
	//	max_warning	not set for b2_amp2_h_Current
	//	min_warning	not set for b2_amp2_h_Current
	//	delta_t	not set for b2_amp2_h_Current
	//	delta_val	not set for b2_amp2_h_Current
	b2_amp2_h_current_prop.set_event_period("3000");
	
	b2_amp2_h_current->set_default_properties(b2_amp2_h_current_prop);
	b2_amp2_h_current->set_polling_period(3000);
	b2_amp2_h_current->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b2_amp2_h_current);

	//	Attribute : b3_amp2_h_Current
	b3_amp2_h_CurrentAttrib	*b3_amp2_h_current = new b3_amp2_h_CurrentAttrib();
	Tango::UserDefaultAttrProp	b3_amp2_h_current_prop;
	b3_amp2_h_current_prop.set_description("H-channel 2nd Stage amplifier Current");
	//	label	not set for b3_amp2_h_Current
	//	unit	not set for b3_amp2_h_Current
	//	standard_unit	not set for b3_amp2_h_Current
	//	display_unit	not set for b3_amp2_h_Current
	//	format	not set for b3_amp2_h_Current
	//	max_value	not set for b3_amp2_h_Current
	//	min_value	not set for b3_amp2_h_Current
	//	max_alarm	not set for b3_amp2_h_Current
	//	min_alarm	not set for b3_amp2_h_Current
	//	max_warning	not set for b3_amp2_h_Current
	//	min_warning	not set for b3_amp2_h_Current
	//	delta_t	not set for b3_amp2_h_Current
	//	delta_val	not set for b3_amp2_h_Current
	b3_amp2_h_current_prop.set_event_period("3000");
	
	b3_amp2_h_current->set_default_properties(b3_amp2_h_current_prop);
	b3_amp2_h_current->set_polling_period(3000);
	b3_amp2_h_current->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b3_amp2_h_current);

	//	Attribute : b4_amp2_h_Current
	b4_amp2_h_CurrentAttrib	*b4_amp2_h_current = new b4_amp2_h_CurrentAttrib();
	Tango::UserDefaultAttrProp	b4_amp2_h_current_prop;
	b4_amp2_h_current_prop.set_description("H-channel 2nd Stage amplifier Current");
	//	label	not set for b4_amp2_h_Current
	//	unit	not set for b4_amp2_h_Current
	//	standard_unit	not set for b4_amp2_h_Current
	//	display_unit	not set for b4_amp2_h_Current
	//	format	not set for b4_amp2_h_Current
	//	max_value	not set for b4_amp2_h_Current
	//	min_value	not set for b4_amp2_h_Current
	//	max_alarm	not set for b4_amp2_h_Current
	//	min_alarm	not set for b4_amp2_h_Current
	//	max_warning	not set for b4_amp2_h_Current
	//	min_warning	not set for b4_amp2_h_Current
	//	delta_t	not set for b4_amp2_h_Current
	//	delta_val	not set for b4_amp2_h_Current
	b4_amp2_h_current_prop.set_event_period("3000");
	
	b4_amp2_h_current->set_default_properties(b4_amp2_h_current_prop);
	b4_amp2_h_current->set_polling_period(3000);
	b4_amp2_h_current->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b4_amp2_h_current);

	//	Attribute : b5_amp2_h_Current
	b5_amp2_h_CurrentAttrib	*b5_amp2_h_current = new b5_amp2_h_CurrentAttrib();
	Tango::UserDefaultAttrProp	b5_amp2_h_current_prop;
	b5_amp2_h_current_prop.set_description("H-channel 2nd Stage amplifier Current");
	//	label	not set for b5_amp2_h_Current
	//	unit	not set for b5_amp2_h_Current
	//	standard_unit	not set for b5_amp2_h_Current
	//	display_unit	not set for b5_amp2_h_Current
	//	format	not set for b5_amp2_h_Current
	//	max_value	not set for b5_amp2_h_Current
	//	min_value	not set for b5_amp2_h_Current
	//	max_alarm	not set for b5_amp2_h_Current
	//	min_alarm	not set for b5_amp2_h_Current
	//	max_warning	not set for b5_amp2_h_Current
	//	min_warning	not set for b5_amp2_h_Current
	//	delta_t	not set for b5_amp2_h_Current
	//	delta_val	not set for b5_amp2_h_Current
	b5_amp2_h_current_prop.set_event_period("3000");
	
	b5_amp2_h_current->set_default_properties(b5_amp2_h_current_prop);
	b5_amp2_h_current->set_polling_period(3000);
	b5_amp2_h_current->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b5_amp2_h_current);

	//	Attribute : b1_amp2_v_Current
	b1_amp2_v_CurrentAttrib	*b1_amp2_v_current = new b1_amp2_v_CurrentAttrib();
	Tango::UserDefaultAttrProp	b1_amp2_v_current_prop;
	b1_amp2_v_current_prop.set_description("V-channel 2nd Stage amplifier Current");
	//	label	not set for b1_amp2_v_Current
	//	unit	not set for b1_amp2_v_Current
	//	standard_unit	not set for b1_amp2_v_Current
	//	display_unit	not set for b1_amp2_v_Current
	//	format	not set for b1_amp2_v_Current
	//	max_value	not set for b1_amp2_v_Current
	//	min_value	not set for b1_amp2_v_Current
	//	max_alarm	not set for b1_amp2_v_Current
	//	min_alarm	not set for b1_amp2_v_Current
	//	max_warning	not set for b1_amp2_v_Current
	//	min_warning	not set for b1_amp2_v_Current
	//	delta_t	not set for b1_amp2_v_Current
	//	delta_val	not set for b1_amp2_v_Current
	b1_amp2_v_current_prop.set_event_period("3000");
	
	b1_amp2_v_current->set_default_properties(b1_amp2_v_current_prop);
	b1_amp2_v_current->set_polling_period(3000);
	b1_amp2_v_current->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b1_amp2_v_current);

	//	Attribute : b2_amp2_v_Current
	b2_amp2_v_CurrentAttrib	*b2_amp2_v_current = new b2_amp2_v_CurrentAttrib();
	Tango::UserDefaultAttrProp	b2_amp2_v_current_prop;
	b2_amp2_v_current_prop.set_description("V-channel 2nd Stage amplifier Current");
	//	label	not set for b2_amp2_v_Current
	//	unit	not set for b2_amp2_v_Current
	//	standard_unit	not set for b2_amp2_v_Current
	//	display_unit	not set for b2_amp2_v_Current
	//	format	not set for b2_amp2_v_Current
	//	max_value	not set for b2_amp2_v_Current
	//	min_value	not set for b2_amp2_v_Current
	//	max_alarm	not set for b2_amp2_v_Current
	//	min_alarm	not set for b2_amp2_v_Current
	//	max_warning	not set for b2_amp2_v_Current
	//	min_warning	not set for b2_amp2_v_Current
	//	delta_t	not set for b2_amp2_v_Current
	//	delta_val	not set for b2_amp2_v_Current
	
	b2_amp2_v_current->set_default_properties(b2_amp2_v_current_prop);
	b2_amp2_v_current->set_polling_period(3000);
	b2_amp2_v_current->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b2_amp2_v_current);

	//	Attribute : b3_amp2_v_Current
	b3_amp2_v_CurrentAttrib	*b3_amp2_v_current = new b3_amp2_v_CurrentAttrib();
	Tango::UserDefaultAttrProp	b3_amp2_v_current_prop;
	b3_amp2_v_current_prop.set_description("V-channel 2nd Stage amplifier Current");
	//	label	not set for b3_amp2_v_Current
	//	unit	not set for b3_amp2_v_Current
	//	standard_unit	not set for b3_amp2_v_Current
	//	display_unit	not set for b3_amp2_v_Current
	//	format	not set for b3_amp2_v_Current
	//	max_value	not set for b3_amp2_v_Current
	//	min_value	not set for b3_amp2_v_Current
	//	max_alarm	not set for b3_amp2_v_Current
	//	min_alarm	not set for b3_amp2_v_Current
	//	max_warning	not set for b3_amp2_v_Current
	//	min_warning	not set for b3_amp2_v_Current
	//	delta_t	not set for b3_amp2_v_Current
	//	delta_val	not set for b3_amp2_v_Current
	
	b3_amp2_v_current->set_default_properties(b3_amp2_v_current_prop);
	b3_amp2_v_current->set_polling_period(3000);
	b3_amp2_v_current->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b3_amp2_v_current);

	//	Attribute : b4_amp2_v_Current
	b4_amp2_v_CurrentAttrib	*b4_amp2_v_current = new b4_amp2_v_CurrentAttrib();
	Tango::UserDefaultAttrProp	b4_amp2_v_current_prop;
	b4_amp2_v_current_prop.set_description("V-channel 2nd Stage amplifier Current");
	//	label	not set for b4_amp2_v_Current
	//	unit	not set for b4_amp2_v_Current
	//	standard_unit	not set for b4_amp2_v_Current
	//	display_unit	not set for b4_amp2_v_Current
	//	format	not set for b4_amp2_v_Current
	//	max_value	not set for b4_amp2_v_Current
	//	min_value	not set for b4_amp2_v_Current
	//	max_alarm	not set for b4_amp2_v_Current
	//	min_alarm	not set for b4_amp2_v_Current
	//	max_warning	not set for b4_amp2_v_Current
	//	min_warning	not set for b4_amp2_v_Current
	//	delta_t	not set for b4_amp2_v_Current
	//	delta_val	not set for b4_amp2_v_Current
	b4_amp2_v_current_prop.set_event_period("3000");
	
	b4_amp2_v_current->set_default_properties(b4_amp2_v_current_prop);
	b4_amp2_v_current->set_polling_period(3000);
	b4_amp2_v_current->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b4_amp2_v_current);

	//	Attribute : b5_amp2_v_Current
	b5_amp2_v_CurrentAttrib	*b5_amp2_v_current = new b5_amp2_v_CurrentAttrib();
	Tango::UserDefaultAttrProp	b5_amp2_v_current_prop;
	b5_amp2_v_current_prop.set_description("V-channel 2nd Stage amplifier Current");
	//	label	not set for b5_amp2_v_Current
	//	unit	not set for b5_amp2_v_Current
	//	standard_unit	not set for b5_amp2_v_Current
	//	display_unit	not set for b5_amp2_v_Current
	//	format	not set for b5_amp2_v_Current
	//	max_value	not set for b5_amp2_v_Current
	//	min_value	not set for b5_amp2_v_Current
	//	max_alarm	not set for b5_amp2_v_Current
	//	min_alarm	not set for b5_amp2_v_Current
	//	max_warning	not set for b5_amp2_v_Current
	//	min_warning	not set for b5_amp2_v_Current
	//	delta_t	not set for b5_amp2_v_Current
	//	delta_val	not set for b5_amp2_v_Current
	b5_amp2_v_current_prop.set_event_period("3000");
	
	b5_amp2_v_current->set_default_properties(b5_amp2_v_current_prop);
	b5_amp2_v_current->set_polling_period(3000);
	b5_amp2_v_current->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b5_amp2_v_current);

	//	Attribute : b1_cs_Current
	b1_cs_CurrentAttrib	*b1_cs_current = new b1_cs_CurrentAttrib();
	Tango::UserDefaultAttrProp	b1_cs_current_prop;
	b1_cs_current_prop.set_description("Calibration Source Current");
	//	label	not set for b1_cs_Current
	//	unit	not set for b1_cs_Current
	//	standard_unit	not set for b1_cs_Current
	//	display_unit	not set for b1_cs_Current
	//	format	not set for b1_cs_Current
	//	max_value	not set for b1_cs_Current
	//	min_value	not set for b1_cs_Current
	//	max_alarm	not set for b1_cs_Current
	//	min_alarm	not set for b1_cs_Current
	//	max_warning	not set for b1_cs_Current
	//	min_warning	not set for b1_cs_Current
	//	delta_t	not set for b1_cs_Current
	//	delta_val	not set for b1_cs_Current
	b1_cs_current_prop.set_event_period("3000");
	
	b1_cs_current->set_default_properties(b1_cs_current_prop);
	b1_cs_current->set_polling_period(3000);
	b1_cs_current->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b1_cs_current);

	//	Attribute : b2_cs_Current
	b2_cs_CurrentAttrib	*b2_cs_current = new b2_cs_CurrentAttrib();
	Tango::UserDefaultAttrProp	b2_cs_current_prop;
	b2_cs_current_prop.set_description("Calibration Source Current");
	//	label	not set for b2_cs_Current
	//	unit	not set for b2_cs_Current
	//	standard_unit	not set for b2_cs_Current
	//	display_unit	not set for b2_cs_Current
	//	format	not set for b2_cs_Current
	//	max_value	not set for b2_cs_Current
	//	min_value	not set for b2_cs_Current
	//	max_alarm	not set for b2_cs_Current
	//	min_alarm	not set for b2_cs_Current
	//	max_warning	not set for b2_cs_Current
	//	min_warning	not set for b2_cs_Current
	//	delta_t	not set for b2_cs_Current
	//	delta_val	not set for b2_cs_Current
	b2_cs_current_prop.set_event_period("3000");
	
	b2_cs_current->set_default_properties(b2_cs_current_prop);
	b2_cs_current->set_polling_period(3000);
	b2_cs_current->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b2_cs_current);

	//	Attribute : b3_cs_Current
	b3_cs_CurrentAttrib	*b3_cs_current = new b3_cs_CurrentAttrib();
	Tango::UserDefaultAttrProp	b3_cs_current_prop;
	b3_cs_current_prop.set_description("Calibration Source Current");
	//	label	not set for b3_cs_Current
	//	unit	not set for b3_cs_Current
	//	standard_unit	not set for b3_cs_Current
	//	display_unit	not set for b3_cs_Current
	//	format	not set for b3_cs_Current
	//	max_value	not set for b3_cs_Current
	//	min_value	not set for b3_cs_Current
	//	max_alarm	not set for b3_cs_Current
	//	min_alarm	not set for b3_cs_Current
	//	max_warning	not set for b3_cs_Current
	//	min_warning	not set for b3_cs_Current
	//	delta_t	not set for b3_cs_Current
	//	delta_val	not set for b3_cs_Current
	
	b3_cs_current->set_default_properties(b3_cs_current_prop);
	b3_cs_current->set_polling_period(3000);
	b3_cs_current->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b3_cs_current);

	//	Attribute : b4_cs_Current
	b4_cs_CurrentAttrib	*b4_cs_current = new b4_cs_CurrentAttrib();
	Tango::UserDefaultAttrProp	b4_cs_current_prop;
	b4_cs_current_prop.set_description("Calibration Source Current");
	//	label	not set for b4_cs_Current
	//	unit	not set for b4_cs_Current
	//	standard_unit	not set for b4_cs_Current
	//	display_unit	not set for b4_cs_Current
	//	format	not set for b4_cs_Current
	//	max_value	not set for b4_cs_Current
	//	min_value	not set for b4_cs_Current
	//	max_alarm	not set for b4_cs_Current
	//	min_alarm	not set for b4_cs_Current
	//	max_warning	not set for b4_cs_Current
	//	min_warning	not set for b4_cs_Current
	//	delta_t	not set for b4_cs_Current
	//	delta_val	not set for b4_cs_Current
	b4_cs_current_prop.set_event_period("3000");
	
	b4_cs_current->set_default_properties(b4_cs_current_prop);
	b4_cs_current->set_polling_period(3000);
	b4_cs_current->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b4_cs_current);

	//	Attribute : b5_cs_Current
	b5_cs_CurrentAttrib	*b5_cs_current = new b5_cs_CurrentAttrib();
	Tango::UserDefaultAttrProp	b5_cs_current_prop;
	b5_cs_current_prop.set_description("Calibration Source Current");
	//	label	not set for b5_cs_Current
	//	unit	not set for b5_cs_Current
	//	standard_unit	not set for b5_cs_Current
	//	display_unit	not set for b5_cs_Current
	//	format	not set for b5_cs_Current
	//	max_value	not set for b5_cs_Current
	//	min_value	not set for b5_cs_Current
	//	max_alarm	not set for b5_cs_Current
	//	min_alarm	not set for b5_cs_Current
	//	max_warning	not set for b5_cs_Current
	//	min_warning	not set for b5_cs_Current
	//	delta_t	not set for b5_cs_Current
	//	delta_val	not set for b5_cs_Current
	b5_cs_current_prop.set_event_period("3000");
	
	b5_cs_current->set_default_properties(b5_cs_current_prop);
	b5_cs_current->set_polling_period(3000);
	b5_cs_current->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b5_cs_current);

	//	Attribute : b1_cs_Voltage
	b1_cs_VoltageAttrib	*b1_cs_voltage = new b1_cs_VoltageAttrib();
	Tango::UserDefaultAttrProp	b1_cs_voltage_prop;
	b1_cs_voltage_prop.set_description("Calibration Source Voltage");
	//	label	not set for b1_cs_Voltage
	//	unit	not set for b1_cs_Voltage
	//	standard_unit	not set for b1_cs_Voltage
	//	display_unit	not set for b1_cs_Voltage
	//	format	not set for b1_cs_Voltage
	//	max_value	not set for b1_cs_Voltage
	//	min_value	not set for b1_cs_Voltage
	//	max_alarm	not set for b1_cs_Voltage
	//	min_alarm	not set for b1_cs_Voltage
	//	max_warning	not set for b1_cs_Voltage
	//	min_warning	not set for b1_cs_Voltage
	//	delta_t	not set for b1_cs_Voltage
	//	delta_val	not set for b1_cs_Voltage
	b1_cs_voltage_prop.set_event_period("3000");
	
	b1_cs_voltage->set_default_properties(b1_cs_voltage_prop);
	b1_cs_voltage->set_polling_period(3000);
	b1_cs_voltage->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b1_cs_voltage);

	//	Attribute : b2_cs_Voltage
	b2_cs_VoltageAttrib	*b2_cs_voltage = new b2_cs_VoltageAttrib();
	Tango::UserDefaultAttrProp	b2_cs_voltage_prop;
	b2_cs_voltage_prop.set_description("Calibration Source Voltage");
	//	label	not set for b2_cs_Voltage
	//	unit	not set for b2_cs_Voltage
	//	standard_unit	not set for b2_cs_Voltage
	//	display_unit	not set for b2_cs_Voltage
	//	format	not set for b2_cs_Voltage
	//	max_value	not set for b2_cs_Voltage
	//	min_value	not set for b2_cs_Voltage
	//	max_alarm	not set for b2_cs_Voltage
	//	min_alarm	not set for b2_cs_Voltage
	//	max_warning	not set for b2_cs_Voltage
	//	min_warning	not set for b2_cs_Voltage
	//	delta_t	not set for b2_cs_Voltage
	//	delta_val	not set for b2_cs_Voltage
	b2_cs_voltage_prop.set_event_period("3000");
	
	b2_cs_voltage->set_default_properties(b2_cs_voltage_prop);
	b2_cs_voltage->set_polling_period(3000);
	b2_cs_voltage->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b2_cs_voltage);

	//	Attribute : b3_cs_Voltage
	b3_cs_VoltageAttrib	*b3_cs_voltage = new b3_cs_VoltageAttrib();
	Tango::UserDefaultAttrProp	b3_cs_voltage_prop;
	b3_cs_voltage_prop.set_description("Calibration Source Voltage");
	//	label	not set for b3_cs_Voltage
	//	unit	not set for b3_cs_Voltage
	//	standard_unit	not set for b3_cs_Voltage
	//	display_unit	not set for b3_cs_Voltage
	//	format	not set for b3_cs_Voltage
	//	max_value	not set for b3_cs_Voltage
	//	min_value	not set for b3_cs_Voltage
	//	max_alarm	not set for b3_cs_Voltage
	//	min_alarm	not set for b3_cs_Voltage
	//	max_warning	not set for b3_cs_Voltage
	//	min_warning	not set for b3_cs_Voltage
	//	delta_t	not set for b3_cs_Voltage
	//	delta_val	not set for b3_cs_Voltage
	b3_cs_voltage_prop.set_event_period("3000");
	
	b3_cs_voltage->set_default_properties(b3_cs_voltage_prop);
	b3_cs_voltage->set_polling_period(3000);
	b3_cs_voltage->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b3_cs_voltage);

	//	Attribute : b4_cs_Voltage
	b4_cs_VoltageAttrib	*b4_cs_voltage = new b4_cs_VoltageAttrib();
	Tango::UserDefaultAttrProp	b4_cs_voltage_prop;
	b4_cs_voltage_prop.set_description("Calibration Source Voltage");
	//	label	not set for b4_cs_Voltage
	//	unit	not set for b4_cs_Voltage
	//	standard_unit	not set for b4_cs_Voltage
	//	display_unit	not set for b4_cs_Voltage
	//	format	not set for b4_cs_Voltage
	//	max_value	not set for b4_cs_Voltage
	//	min_value	not set for b4_cs_Voltage
	//	max_alarm	not set for b4_cs_Voltage
	//	min_alarm	not set for b4_cs_Voltage
	//	max_warning	not set for b4_cs_Voltage
	//	min_warning	not set for b4_cs_Voltage
	//	delta_t	not set for b4_cs_Voltage
	//	delta_val	not set for b4_cs_Voltage
	b4_cs_voltage_prop.set_event_period("3000");
	
	b4_cs_voltage->set_default_properties(b4_cs_voltage_prop);
	b4_cs_voltage->set_polling_period(3000);
	b4_cs_voltage->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b4_cs_voltage);

	//	Attribute : b5_cs_Voltage
	b5_cs_VoltageAttrib	*b5_cs_voltage = new b5_cs_VoltageAttrib();
	Tango::UserDefaultAttrProp	b5_cs_voltage_prop;
	b5_cs_voltage_prop.set_description("Calibration Source Voltage");
	//	label	not set for b5_cs_Voltage
	//	unit	not set for b5_cs_Voltage
	//	standard_unit	not set for b5_cs_Voltage
	//	display_unit	not set for b5_cs_Voltage
	//	format	not set for b5_cs_Voltage
	//	max_value	not set for b5_cs_Voltage
	//	min_value	not set for b5_cs_Voltage
	//	max_alarm	not set for b5_cs_Voltage
	//	min_alarm	not set for b5_cs_Voltage
	//	max_warning	not set for b5_cs_Voltage
	//	min_warning	not set for b5_cs_Voltage
	//	delta_t	not set for b5_cs_Voltage
	//	delta_val	not set for b5_cs_Voltage
	b5_cs_voltage_prop.set_event_period("3000");
	
	b5_cs_voltage->set_default_properties(b5_cs_voltage_prop);
	b5_cs_voltage->set_polling_period(3000);
	b5_cs_voltage->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b5_cs_voltage);

	//	Attribute : b1_rfe1_heater1Current
	b1_rfe1_heater1CurrentAttrib	*b1_rfe1_heater1current = new b1_rfe1_heater1CurrentAttrib();
	Tango::UserDefaultAttrProp	b1_rfe1_heater1current_prop;
	b1_rfe1_heater1current_prop.set_description("RFE 1st stage heater current");
	//	label	not set for b1_rfe1_heater1Current
	//	unit	not set for b1_rfe1_heater1Current
	//	standard_unit	not set for b1_rfe1_heater1Current
	//	display_unit	not set for b1_rfe1_heater1Current
	//	format	not set for b1_rfe1_heater1Current
	//	max_value	not set for b1_rfe1_heater1Current
	//	min_value	not set for b1_rfe1_heater1Current
	//	max_alarm	not set for b1_rfe1_heater1Current
	//	min_alarm	not set for b1_rfe1_heater1Current
	//	max_warning	not set for b1_rfe1_heater1Current
	//	min_warning	not set for b1_rfe1_heater1Current
	//	delta_t	not set for b1_rfe1_heater1Current
	//	delta_val	not set for b1_rfe1_heater1Current
	b1_rfe1_heater1current_prop.set_event_period("3000");
	
	b1_rfe1_heater1current->set_default_properties(b1_rfe1_heater1current_prop);
	b1_rfe1_heater1current->set_polling_period(3000);
	b1_rfe1_heater1current->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b1_rfe1_heater1current);

	//	Attribute : b2_rfe1_heater1Current
	b2_rfe1_heater1CurrentAttrib	*b2_rfe1_heater1current = new b2_rfe1_heater1CurrentAttrib();
	Tango::UserDefaultAttrProp	b2_rfe1_heater1current_prop;
	b2_rfe1_heater1current_prop.set_description("RFE 1st stage heater current");
	//	label	not set for b2_rfe1_heater1Current
	//	unit	not set for b2_rfe1_heater1Current
	//	standard_unit	not set for b2_rfe1_heater1Current
	//	display_unit	not set for b2_rfe1_heater1Current
	//	format	not set for b2_rfe1_heater1Current
	//	max_value	not set for b2_rfe1_heater1Current
	//	min_value	not set for b2_rfe1_heater1Current
	//	max_alarm	not set for b2_rfe1_heater1Current
	//	min_alarm	not set for b2_rfe1_heater1Current
	//	max_warning	not set for b2_rfe1_heater1Current
	//	min_warning	not set for b2_rfe1_heater1Current
	//	delta_t	not set for b2_rfe1_heater1Current
	//	delta_val	not set for b2_rfe1_heater1Current
	b2_rfe1_heater1current_prop.set_event_period("3000");
	
	b2_rfe1_heater1current->set_default_properties(b2_rfe1_heater1current_prop);
	b2_rfe1_heater1current->set_polling_period(3000);
	b2_rfe1_heater1current->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b2_rfe1_heater1current);

	//	Attribute : b3_rfe1_heater1Current
	b3_rfe1_heater1CurrentAttrib	*b3_rfe1_heater1current = new b3_rfe1_heater1CurrentAttrib();
	Tango::UserDefaultAttrProp	b3_rfe1_heater1current_prop;
	b3_rfe1_heater1current_prop.set_description("RFE 1st stage heater current");
	//	label	not set for b3_rfe1_heater1Current
	//	unit	not set for b3_rfe1_heater1Current
	//	standard_unit	not set for b3_rfe1_heater1Current
	//	display_unit	not set for b3_rfe1_heater1Current
	//	format	not set for b3_rfe1_heater1Current
	//	max_value	not set for b3_rfe1_heater1Current
	//	min_value	not set for b3_rfe1_heater1Current
	//	max_alarm	not set for b3_rfe1_heater1Current
	//	min_alarm	not set for b3_rfe1_heater1Current
	//	max_warning	not set for b3_rfe1_heater1Current
	//	min_warning	not set for b3_rfe1_heater1Current
	//	delta_t	not set for b3_rfe1_heater1Current
	//	delta_val	not set for b3_rfe1_heater1Current
	b3_rfe1_heater1current_prop.set_event_period("3000");
	
	b3_rfe1_heater1current->set_default_properties(b3_rfe1_heater1current_prop);
	b3_rfe1_heater1current->set_polling_period(3000);
	b3_rfe1_heater1current->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b3_rfe1_heater1current);

	//	Attribute : b4_rfe1_heater1Current
	b4_rfe1_heater1CurrentAttrib	*b4_rfe1_heater1current = new b4_rfe1_heater1CurrentAttrib();
	Tango::UserDefaultAttrProp	b4_rfe1_heater1current_prop;
	b4_rfe1_heater1current_prop.set_description("RFE 1st stage heater current");
	//	label	not set for b4_rfe1_heater1Current
	//	unit	not set for b4_rfe1_heater1Current
	//	standard_unit	not set for b4_rfe1_heater1Current
	//	display_unit	not set for b4_rfe1_heater1Current
	//	format	not set for b4_rfe1_heater1Current
	//	max_value	not set for b4_rfe1_heater1Current
	//	min_value	not set for b4_rfe1_heater1Current
	//	max_alarm	not set for b4_rfe1_heater1Current
	//	min_alarm	not set for b4_rfe1_heater1Current
	//	max_warning	not set for b4_rfe1_heater1Current
	//	min_warning	not set for b4_rfe1_heater1Current
	//	delta_t	not set for b4_rfe1_heater1Current
	//	delta_val	not set for b4_rfe1_heater1Current
	b4_rfe1_heater1current_prop.set_event_period("3000");
	
	b4_rfe1_heater1current->set_default_properties(b4_rfe1_heater1current_prop);
	b4_rfe1_heater1current->set_polling_period(3000);
	b4_rfe1_heater1current->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b4_rfe1_heater1current);

	//	Attribute : b5_rfe1_heater1Current
	b5_rfe1_heater1CurrentAttrib	*b5_rfe1_heater1current = new b5_rfe1_heater1CurrentAttrib();
	Tango::UserDefaultAttrProp	b5_rfe1_heater1current_prop;
	b5_rfe1_heater1current_prop.set_description("RFE 1st stage heater current");
	//	label	not set for b5_rfe1_heater1Current
	//	unit	not set for b5_rfe1_heater1Current
	//	standard_unit	not set for b5_rfe1_heater1Current
	//	display_unit	not set for b5_rfe1_heater1Current
	//	format	not set for b5_rfe1_heater1Current
	//	max_value	not set for b5_rfe1_heater1Current
	//	min_value	not set for b5_rfe1_heater1Current
	//	max_alarm	not set for b5_rfe1_heater1Current
	//	min_alarm	not set for b5_rfe1_heater1Current
	//	max_warning	not set for b5_rfe1_heater1Current
	//	min_warning	not set for b5_rfe1_heater1Current
	//	delta_t	not set for b5_rfe1_heater1Current
	//	delta_val	not set for b5_rfe1_heater1Current
	b5_rfe1_heater1current_prop.set_event_period("3000");
	
	b5_rfe1_heater1current->set_default_properties(b5_rfe1_heater1current_prop);
	b5_rfe1_heater1current->set_polling_period(3000);
	b5_rfe1_heater1current->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b5_rfe1_heater1current);

	//	Attribute : b1_rfe1_heater2Current
	b1_rfe1_heater2CurrentAttrib	*b1_rfe1_heater2current = new b1_rfe1_heater2CurrentAttrib();
	Tango::UserDefaultAttrProp	b1_rfe1_heater2current_prop;
	b1_rfe1_heater2current_prop.set_description("RFE 2nd stage heater current");
	//	label	not set for b1_rfe1_heater2Current
	//	unit	not set for b1_rfe1_heater2Current
	//	standard_unit	not set for b1_rfe1_heater2Current
	//	display_unit	not set for b1_rfe1_heater2Current
	//	format	not set for b1_rfe1_heater2Current
	//	max_value	not set for b1_rfe1_heater2Current
	//	min_value	not set for b1_rfe1_heater2Current
	//	max_alarm	not set for b1_rfe1_heater2Current
	//	min_alarm	not set for b1_rfe1_heater2Current
	//	max_warning	not set for b1_rfe1_heater2Current
	//	min_warning	not set for b1_rfe1_heater2Current
	//	delta_t	not set for b1_rfe1_heater2Current
	//	delta_val	not set for b1_rfe1_heater2Current
	b1_rfe1_heater2current_prop.set_event_period("3000");
	
	b1_rfe1_heater2current->set_default_properties(b1_rfe1_heater2current_prop);
	b1_rfe1_heater2current->set_polling_period(3000);
	b1_rfe1_heater2current->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b1_rfe1_heater2current);

	//	Attribute : b2_rfe1_heater2Current
	b2_rfe1_heater2CurrentAttrib	*b2_rfe1_heater2current = new b2_rfe1_heater2CurrentAttrib();
	Tango::UserDefaultAttrProp	b2_rfe1_heater2current_prop;
	b2_rfe1_heater2current_prop.set_description("RFE 2nd stage heater current");
	//	label	not set for b2_rfe1_heater2Current
	//	unit	not set for b2_rfe1_heater2Current
	//	standard_unit	not set for b2_rfe1_heater2Current
	//	display_unit	not set for b2_rfe1_heater2Current
	//	format	not set for b2_rfe1_heater2Current
	//	max_value	not set for b2_rfe1_heater2Current
	//	min_value	not set for b2_rfe1_heater2Current
	//	max_alarm	not set for b2_rfe1_heater2Current
	//	min_alarm	not set for b2_rfe1_heater2Current
	//	max_warning	not set for b2_rfe1_heater2Current
	//	min_warning	not set for b2_rfe1_heater2Current
	//	delta_t	not set for b2_rfe1_heater2Current
	//	delta_val	not set for b2_rfe1_heater2Current
	b2_rfe1_heater2current_prop.set_event_period("3000");
	
	b2_rfe1_heater2current->set_default_properties(b2_rfe1_heater2current_prop);
	b2_rfe1_heater2current->set_polling_period(3000);
	b2_rfe1_heater2current->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b2_rfe1_heater2current);

	//	Attribute : b3_rfe1_heater2Current
	b3_rfe1_heater2CurrentAttrib	*b3_rfe1_heater2current = new b3_rfe1_heater2CurrentAttrib();
	Tango::UserDefaultAttrProp	b3_rfe1_heater2current_prop;
	b3_rfe1_heater2current_prop.set_description("RFE 2nd stage heater current");
	//	label	not set for b3_rfe1_heater2Current
	//	unit	not set for b3_rfe1_heater2Current
	//	standard_unit	not set for b3_rfe1_heater2Current
	//	display_unit	not set for b3_rfe1_heater2Current
	//	format	not set for b3_rfe1_heater2Current
	//	max_value	not set for b3_rfe1_heater2Current
	//	min_value	not set for b3_rfe1_heater2Current
	//	max_alarm	not set for b3_rfe1_heater2Current
	//	min_alarm	not set for b3_rfe1_heater2Current
	//	max_warning	not set for b3_rfe1_heater2Current
	//	min_warning	not set for b3_rfe1_heater2Current
	//	delta_t	not set for b3_rfe1_heater2Current
	//	delta_val	not set for b3_rfe1_heater2Current
	b3_rfe1_heater2current_prop.set_event_period("3000");
	
	b3_rfe1_heater2current->set_default_properties(b3_rfe1_heater2current_prop);
	b3_rfe1_heater2current->set_polling_period(3000);
	b3_rfe1_heater2current->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b3_rfe1_heater2current);

	//	Attribute : b4_rfe1_heater2Current
	b4_rfe1_heater2CurrentAttrib	*b4_rfe1_heater2current = new b4_rfe1_heater2CurrentAttrib();
	Tango::UserDefaultAttrProp	b4_rfe1_heater2current_prop;
	b4_rfe1_heater2current_prop.set_description("RFE 2nd stage heater current");
	//	label	not set for b4_rfe1_heater2Current
	//	unit	not set for b4_rfe1_heater2Current
	//	standard_unit	not set for b4_rfe1_heater2Current
	//	display_unit	not set for b4_rfe1_heater2Current
	//	format	not set for b4_rfe1_heater2Current
	//	max_value	not set for b4_rfe1_heater2Current
	//	min_value	not set for b4_rfe1_heater2Current
	//	max_alarm	not set for b4_rfe1_heater2Current
	//	min_alarm	not set for b4_rfe1_heater2Current
	//	max_warning	not set for b4_rfe1_heater2Current
	//	min_warning	not set for b4_rfe1_heater2Current
	//	delta_t	not set for b4_rfe1_heater2Current
	//	delta_val	not set for b4_rfe1_heater2Current
	b4_rfe1_heater2current_prop.set_event_period("3000");
	
	b4_rfe1_heater2current->set_default_properties(b4_rfe1_heater2current_prop);
	b4_rfe1_heater2current->set_polling_period(3000);
	b4_rfe1_heater2current->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b4_rfe1_heater2current);

	//	Attribute : b5_rfe1_heater2Current
	b5_rfe1_heater2CurrentAttrib	*b5_rfe1_heater2current = new b5_rfe1_heater2CurrentAttrib();
	Tango::UserDefaultAttrProp	b5_rfe1_heater2current_prop;
	b5_rfe1_heater2current_prop.set_description("RFE 2nd stage heater current");
	//	label	not set for b5_rfe1_heater2Current
	//	unit	not set for b5_rfe1_heater2Current
	//	standard_unit	not set for b5_rfe1_heater2Current
	//	display_unit	not set for b5_rfe1_heater2Current
	//	format	not set for b5_rfe1_heater2Current
	//	max_value	not set for b5_rfe1_heater2Current
	//	min_value	not set for b5_rfe1_heater2Current
	//	max_alarm	not set for b5_rfe1_heater2Current
	//	min_alarm	not set for b5_rfe1_heater2Current
	//	max_warning	not set for b5_rfe1_heater2Current
	//	min_warning	not set for b5_rfe1_heater2Current
	//	delta_t	not set for b5_rfe1_heater2Current
	//	delta_val	not set for b5_rfe1_heater2Current
	b5_rfe1_heater2current_prop.set_event_period("3000");
	
	b5_rfe1_heater2current->set_default_properties(b5_rfe1_heater2current_prop);
	b5_rfe1_heater2current->set_polling_period(3000);
	b5_rfe1_heater2current->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b5_rfe1_heater2current);

	//	Attribute : b1_cryoPressure
	b1_cryoPressureAttrib	*b1_cryopressure = new b1_cryoPressureAttrib();
	Tango::UserDefaultAttrProp	b1_cryopressure_prop;
	b1_cryopressure_prop.set_description("Feed Cryostat pressure");
	//	label	not set for b1_cryoPressure
	//	unit	not set for b1_cryoPressure
	//	standard_unit	not set for b1_cryoPressure
	//	display_unit	not set for b1_cryoPressure
	//	format	not set for b1_cryoPressure
	//	max_value	not set for b1_cryoPressure
	//	min_value	not set for b1_cryoPressure
	//	max_alarm	not set for b1_cryoPressure
	//	min_alarm	not set for b1_cryoPressure
	//	max_warning	not set for b1_cryoPressure
	//	min_warning	not set for b1_cryoPressure
	//	delta_t	not set for b1_cryoPressure
	//	delta_val	not set for b1_cryoPressure
	b1_cryopressure_prop.set_event_period("3000");
	
	b1_cryopressure->set_default_properties(b1_cryopressure_prop);
	b1_cryopressure->set_polling_period(3000);
	b1_cryopressure->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b1_cryopressure);

	//	Attribute : b2_cryoPressure
	b2_cryoPressureAttrib	*b2_cryopressure = new b2_cryoPressureAttrib();
	Tango::UserDefaultAttrProp	b2_cryopressure_prop;
	b2_cryopressure_prop.set_description("Feed Cryostat pressure");
	//	label	not set for b2_cryoPressure
	//	unit	not set for b2_cryoPressure
	//	standard_unit	not set for b2_cryoPressure
	//	display_unit	not set for b2_cryoPressure
	//	format	not set for b2_cryoPressure
	//	max_value	not set for b2_cryoPressure
	//	min_value	not set for b2_cryoPressure
	//	max_alarm	not set for b2_cryoPressure
	//	min_alarm	not set for b2_cryoPressure
	//	max_warning	not set for b2_cryoPressure
	//	min_warning	not set for b2_cryoPressure
	//	delta_t	not set for b2_cryoPressure
	//	delta_val	not set for b2_cryoPressure
	b2_cryopressure_prop.set_event_period("3000");
	
	b2_cryopressure->set_default_properties(b2_cryopressure_prop);
	b2_cryopressure->set_polling_period(3000);
	b2_cryopressure->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b2_cryopressure);

	//	Attribute : b345_cryoPressure
	b345_cryoPressureAttrib	*b345_cryopressure = new b345_cryoPressureAttrib();
	Tango::UserDefaultAttrProp	b345_cryopressure_prop;
	b345_cryopressure_prop.set_description("Feed Cryostat pressure");
	//	label	not set for b345_cryoPressure
	//	unit	not set for b345_cryoPressure
	//	standard_unit	not set for b345_cryoPressure
	//	display_unit	not set for b345_cryoPressure
	//	format	not set for b345_cryoPressure
	//	max_value	not set for b345_cryoPressure
	//	min_value	not set for b345_cryoPressure
	//	max_alarm	not set for b345_cryoPressure
	//	min_alarm	not set for b345_cryoPressure
	//	max_warning	not set for b345_cryoPressure
	//	min_warning	not set for b345_cryoPressure
	//	delta_t	not set for b345_cryoPressure
	//	delta_val	not set for b345_cryoPressure
	b345_cryopressure_prop.set_event_period("3000");
	
	b345_cryopressure->set_default_properties(b345_cryopressure_prop);
	//	Not Polled
	b345_cryopressure->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b345_cryopressure);

	//	Attribute : b1_maniPressure
	b1_maniPressureAttrib	*b1_manipressure = new b1_maniPressureAttrib();
	Tango::UserDefaultAttrProp	b1_manipressure_prop;
	b1_manipressure_prop.set_description("Manifold pressure");
	//	label	not set for b1_maniPressure
	//	unit	not set for b1_maniPressure
	//	standard_unit	not set for b1_maniPressure
	//	display_unit	not set for b1_maniPressure
	//	format	not set for b1_maniPressure
	//	max_value	not set for b1_maniPressure
	//	min_value	not set for b1_maniPressure
	//	max_alarm	not set for b1_maniPressure
	//	min_alarm	not set for b1_maniPressure
	//	max_warning	not set for b1_maniPressure
	//	min_warning	not set for b1_maniPressure
	//	delta_t	not set for b1_maniPressure
	//	delta_val	not set for b1_maniPressure
	b1_manipressure_prop.set_event_period("3000");
	
	b1_manipressure->set_default_properties(b1_manipressure_prop);
	b1_manipressure->set_polling_period(3000);
	b1_manipressure->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b1_manipressure);

	//	Attribute : b2_maniPressure
	b2_maniPressureAttrib	*b2_manipressure = new b2_maniPressureAttrib();
	Tango::UserDefaultAttrProp	b2_manipressure_prop;
	b2_manipressure_prop.set_description("Manifold pressure");
	//	label	not set for b2_maniPressure
	//	unit	not set for b2_maniPressure
	//	standard_unit	not set for b2_maniPressure
	//	display_unit	not set for b2_maniPressure
	//	format	not set for b2_maniPressure
	//	max_value	not set for b2_maniPressure
	//	min_value	not set for b2_maniPressure
	//	max_alarm	not set for b2_maniPressure
	//	min_alarm	not set for b2_maniPressure
	//	max_warning	not set for b2_maniPressure
	//	min_warning	not set for b2_maniPressure
	//	delta_t	not set for b2_maniPressure
	//	delta_val	not set for b2_maniPressure
	b2_manipressure_prop.set_event_period("3000");
	
	b2_manipressure->set_default_properties(b2_manipressure_prop);
	b2_manipressure->set_polling_period(3000);
	b2_manipressure->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b2_manipressure);

	//	Attribute : b345_maniPressure
	b345_maniPressureAttrib	*b345_manipressure = new b345_maniPressureAttrib();
	Tango::UserDefaultAttrProp	b345_manipressure_prop;
	b345_manipressure_prop.set_description("Manifold pressure");
	//	label	not set for b345_maniPressure
	//	unit	not set for b345_maniPressure
	//	standard_unit	not set for b345_maniPressure
	//	display_unit	not set for b345_maniPressure
	//	format	not set for b345_maniPressure
	//	max_value	not set for b345_maniPressure
	//	min_value	not set for b345_maniPressure
	//	max_alarm	not set for b345_maniPressure
	//	min_alarm	not set for b345_maniPressure
	//	max_warning	not set for b345_maniPressure
	//	min_warning	not set for b345_maniPressure
	//	delta_t	not set for b345_maniPressure
	//	delta_val	not set for b345_maniPressure
	b345_manipressure_prop.set_event_period("3000");
	
	b345_manipressure->set_default_properties(b345_manipressure_prop);
	b345_manipressure->set_polling_period(3000);
	b345_manipressure->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b345_manipressure);

	//	Attribute : b1_rfe1_temperature
	b1_rfe1_temperatureAttrib	*b1_rfe1_temperature = new b1_rfe1_temperatureAttrib();
	Tango::UserDefaultAttrProp	b1_rfe1_temperature_prop;
	b1_rfe1_temperature_prop.set_description("RFE 1st stage temperature");
	//	label	not set for b1_rfe1_temperature
	//	unit	not set for b1_rfe1_temperature
	//	standard_unit	not set for b1_rfe1_temperature
	//	display_unit	not set for b1_rfe1_temperature
	//	format	not set for b1_rfe1_temperature
	//	max_value	not set for b1_rfe1_temperature
	//	min_value	not set for b1_rfe1_temperature
	//	max_alarm	not set for b1_rfe1_temperature
	//	min_alarm	not set for b1_rfe1_temperature
	//	max_warning	not set for b1_rfe1_temperature
	//	min_warning	not set for b1_rfe1_temperature
	//	delta_t	not set for b1_rfe1_temperature
	//	delta_val	not set for b1_rfe1_temperature
	b1_rfe1_temperature_prop.set_event_period("3000");
	
	b1_rfe1_temperature->set_default_properties(b1_rfe1_temperature_prop);
	b1_rfe1_temperature->set_polling_period(3000);
	b1_rfe1_temperature->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b1_rfe1_temperature);

	//	Attribute : b2_rfe1_temperature
	b2_rfe1_temperatureAttrib	*b2_rfe1_temperature = new b2_rfe1_temperatureAttrib();
	Tango::UserDefaultAttrProp	b2_rfe1_temperature_prop;
	b2_rfe1_temperature_prop.set_description("RFE 1st stage temperature");
	//	label	not set for b2_rfe1_temperature
	//	unit	not set for b2_rfe1_temperature
	//	standard_unit	not set for b2_rfe1_temperature
	//	display_unit	not set for b2_rfe1_temperature
	//	format	not set for b2_rfe1_temperature
	//	max_value	not set for b2_rfe1_temperature
	//	min_value	not set for b2_rfe1_temperature
	//	max_alarm	not set for b2_rfe1_temperature
	//	min_alarm	not set for b2_rfe1_temperature
	//	max_warning	not set for b2_rfe1_temperature
	//	min_warning	not set for b2_rfe1_temperature
	//	delta_t	not set for b2_rfe1_temperature
	//	delta_val	not set for b2_rfe1_temperature
	b2_rfe1_temperature_prop.set_event_period("3000");
	
	b2_rfe1_temperature->set_default_properties(b2_rfe1_temperature_prop);
	b2_rfe1_temperature->set_polling_period(3000);
	b2_rfe1_temperature->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b2_rfe1_temperature);

	//	Attribute : b3_rfe1_temperature
	b3_rfe1_temperatureAttrib	*b3_rfe1_temperature = new b3_rfe1_temperatureAttrib();
	Tango::UserDefaultAttrProp	b3_rfe1_temperature_prop;
	b3_rfe1_temperature_prop.set_description("RFE 1st stage temperature");
	//	label	not set for b3_rfe1_temperature
	//	unit	not set for b3_rfe1_temperature
	//	standard_unit	not set for b3_rfe1_temperature
	//	display_unit	not set for b3_rfe1_temperature
	//	format	not set for b3_rfe1_temperature
	//	max_value	not set for b3_rfe1_temperature
	//	min_value	not set for b3_rfe1_temperature
	//	max_alarm	not set for b3_rfe1_temperature
	//	min_alarm	not set for b3_rfe1_temperature
	//	max_warning	not set for b3_rfe1_temperature
	//	min_warning	not set for b3_rfe1_temperature
	//	delta_t	not set for b3_rfe1_temperature
	//	delta_val	not set for b3_rfe1_temperature
	b3_rfe1_temperature_prop.set_event_period("3000");
	
	b3_rfe1_temperature->set_default_properties(b3_rfe1_temperature_prop);
	b3_rfe1_temperature->set_polling_period(3000);
	b3_rfe1_temperature->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b3_rfe1_temperature);

	//	Attribute : b4_rfe1_temperature
	b4_rfe1_temperatureAttrib	*b4_rfe1_temperature = new b4_rfe1_temperatureAttrib();
	Tango::UserDefaultAttrProp	b4_rfe1_temperature_prop;
	b4_rfe1_temperature_prop.set_description("RFE 1st stage temperature");
	//	label	not set for b4_rfe1_temperature
	//	unit	not set for b4_rfe1_temperature
	//	standard_unit	not set for b4_rfe1_temperature
	//	display_unit	not set for b4_rfe1_temperature
	//	format	not set for b4_rfe1_temperature
	//	max_value	not set for b4_rfe1_temperature
	//	min_value	not set for b4_rfe1_temperature
	//	max_alarm	not set for b4_rfe1_temperature
	//	min_alarm	not set for b4_rfe1_temperature
	//	max_warning	not set for b4_rfe1_temperature
	//	min_warning	not set for b4_rfe1_temperature
	//	delta_t	not set for b4_rfe1_temperature
	//	delta_val	not set for b4_rfe1_temperature
	b4_rfe1_temperature_prop.set_event_period("3000");
	
	b4_rfe1_temperature->set_default_properties(b4_rfe1_temperature_prop);
	b4_rfe1_temperature->set_polling_period(3000);
	b4_rfe1_temperature->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b4_rfe1_temperature);

	//	Attribute : b5_rfe1_temperature
	b5_rfe1_temperatureAttrib	*b5_rfe1_temperature = new b5_rfe1_temperatureAttrib();
	Tango::UserDefaultAttrProp	b5_rfe1_temperature_prop;
	b5_rfe1_temperature_prop.set_description("RFE 1st stage temperature");
	//	label	not set for b5_rfe1_temperature
	//	unit	not set for b5_rfe1_temperature
	//	standard_unit	not set for b5_rfe1_temperature
	//	display_unit	not set for b5_rfe1_temperature
	//	format	not set for b5_rfe1_temperature
	//	max_value	not set for b5_rfe1_temperature
	//	min_value	not set for b5_rfe1_temperature
	//	max_alarm	not set for b5_rfe1_temperature
	//	min_alarm	not set for b5_rfe1_temperature
	//	max_warning	not set for b5_rfe1_temperature
	//	min_warning	not set for b5_rfe1_temperature
	//	delta_t	not set for b5_rfe1_temperature
	//	delta_val	not set for b5_rfe1_temperature
	b5_rfe1_temperature_prop.set_event_period("3000");
	
	b5_rfe1_temperature->set_default_properties(b5_rfe1_temperature_prop);
	b5_rfe1_temperature->set_polling_period(3000);
	b5_rfe1_temperature->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b5_rfe1_temperature);

	//	Attribute : b1_rfe2_temperature
	b1_rfe2_temperatureAttrib	*b1_rfe2_temperature = new b1_rfe2_temperatureAttrib();
	Tango::UserDefaultAttrProp	b1_rfe2_temperature_prop;
	b1_rfe2_temperature_prop.set_description("RFE 2nd stage temperature");
	//	label	not set for b1_rfe2_temperature
	//	unit	not set for b1_rfe2_temperature
	//	standard_unit	not set for b1_rfe2_temperature
	//	display_unit	not set for b1_rfe2_temperature
	//	format	not set for b1_rfe2_temperature
	//	max_value	not set for b1_rfe2_temperature
	//	min_value	not set for b1_rfe2_temperature
	//	max_alarm	not set for b1_rfe2_temperature
	//	min_alarm	not set for b1_rfe2_temperature
	//	max_warning	not set for b1_rfe2_temperature
	//	min_warning	not set for b1_rfe2_temperature
	//	delta_t	not set for b1_rfe2_temperature
	//	delta_val	not set for b1_rfe2_temperature
	b1_rfe2_temperature_prop.set_event_period("3000");
	
	b1_rfe2_temperature->set_default_properties(b1_rfe2_temperature_prop);
	b1_rfe2_temperature->set_polling_period(3000);
	b1_rfe2_temperature->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b1_rfe2_temperature);

	//	Attribute : b2_rfe2_temperature
	b2_rfe2_temperatureAttrib	*b2_rfe2_temperature = new b2_rfe2_temperatureAttrib();
	Tango::UserDefaultAttrProp	b2_rfe2_temperature_prop;
	b2_rfe2_temperature_prop.set_description("RFE 2nd stage temperature");
	//	label	not set for b2_rfe2_temperature
	//	unit	not set for b2_rfe2_temperature
	//	standard_unit	not set for b2_rfe2_temperature
	//	display_unit	not set for b2_rfe2_temperature
	//	format	not set for b2_rfe2_temperature
	//	max_value	not set for b2_rfe2_temperature
	//	min_value	not set for b2_rfe2_temperature
	//	max_alarm	not set for b2_rfe2_temperature
	//	min_alarm	not set for b2_rfe2_temperature
	//	max_warning	not set for b2_rfe2_temperature
	//	min_warning	not set for b2_rfe2_temperature
	//	delta_t	not set for b2_rfe2_temperature
	//	delta_val	not set for b2_rfe2_temperature
	b2_rfe2_temperature_prop.set_event_period("3000");
	
	b2_rfe2_temperature->set_default_properties(b2_rfe2_temperature_prop);
	b2_rfe2_temperature->set_polling_period(3000);
	b2_rfe2_temperature->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b2_rfe2_temperature);

	//	Attribute : b3_rfe2_temperature
	b3_rfe2_temperatureAttrib	*b3_rfe2_temperature = new b3_rfe2_temperatureAttrib();
	Tango::UserDefaultAttrProp	b3_rfe2_temperature_prop;
	b3_rfe2_temperature_prop.set_description("RFE 2nd stage temperature");
	//	label	not set for b3_rfe2_temperature
	//	unit	not set for b3_rfe2_temperature
	//	standard_unit	not set for b3_rfe2_temperature
	//	display_unit	not set for b3_rfe2_temperature
	//	format	not set for b3_rfe2_temperature
	//	max_value	not set for b3_rfe2_temperature
	//	min_value	not set for b3_rfe2_temperature
	//	max_alarm	not set for b3_rfe2_temperature
	//	min_alarm	not set for b3_rfe2_temperature
	//	max_warning	not set for b3_rfe2_temperature
	//	min_warning	not set for b3_rfe2_temperature
	//	delta_t	not set for b3_rfe2_temperature
	//	delta_val	not set for b3_rfe2_temperature
	b3_rfe2_temperature_prop.set_event_period("3000");
	
	b3_rfe2_temperature->set_default_properties(b3_rfe2_temperature_prop);
	b3_rfe2_temperature->set_polling_period(3000);
	b3_rfe2_temperature->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b3_rfe2_temperature);

	//	Attribute : b4_rfe2_temperature
	b4_rfe2_temperatureAttrib	*b4_rfe2_temperature = new b4_rfe2_temperatureAttrib();
	Tango::UserDefaultAttrProp	b4_rfe2_temperature_prop;
	b4_rfe2_temperature_prop.set_description("RFE 2nd stage temperature");
	//	label	not set for b4_rfe2_temperature
	//	unit	not set for b4_rfe2_temperature
	//	standard_unit	not set for b4_rfe2_temperature
	//	display_unit	not set for b4_rfe2_temperature
	//	format	not set for b4_rfe2_temperature
	//	max_value	not set for b4_rfe2_temperature
	//	min_value	not set for b4_rfe2_temperature
	//	max_alarm	not set for b4_rfe2_temperature
	//	min_alarm	not set for b4_rfe2_temperature
	//	max_warning	not set for b4_rfe2_temperature
	//	min_warning	not set for b4_rfe2_temperature
	//	delta_t	not set for b4_rfe2_temperature
	//	delta_val	not set for b4_rfe2_temperature
	b4_rfe2_temperature_prop.set_event_period("3000");
	
	b4_rfe2_temperature->set_default_properties(b4_rfe2_temperature_prop);
	b4_rfe2_temperature->set_polling_period(3000);
	b4_rfe2_temperature->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b4_rfe2_temperature);

	//	Attribute : b5_rfe2_temperature
	b5_rfe2_temperatureAttrib	*b5_rfe2_temperature = new b5_rfe2_temperatureAttrib();
	Tango::UserDefaultAttrProp	b5_rfe2_temperature_prop;
	b5_rfe2_temperature_prop.set_description("RFE 2nd stage temperature");
	//	label	not set for b5_rfe2_temperature
	//	unit	not set for b5_rfe2_temperature
	//	standard_unit	not set for b5_rfe2_temperature
	//	display_unit	not set for b5_rfe2_temperature
	//	format	not set for b5_rfe2_temperature
	//	max_value	not set for b5_rfe2_temperature
	//	min_value	not set for b5_rfe2_temperature
	//	max_alarm	not set for b5_rfe2_temperature
	//	min_alarm	not set for b5_rfe2_temperature
	//	max_warning	not set for b5_rfe2_temperature
	//	min_warning	not set for b5_rfe2_temperature
	//	delta_t	not set for b5_rfe2_temperature
	//	delta_val	not set for b5_rfe2_temperature
	b5_rfe2_temperature_prop.set_event_period("3000");
	
	b5_rfe2_temperature->set_default_properties(b5_rfe2_temperature_prop);
	b5_rfe2_temperature->set_polling_period(3000);
	b5_rfe2_temperature->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b5_rfe2_temperature);

	//	Attribute : b1_omt_temperature
	b1_omt_temperatureAttrib	*b1_omt_temperature = new b1_omt_temperatureAttrib();
	Tango::UserDefaultAttrProp	b1_omt_temperature_prop;
	b1_omt_temperature_prop.set_description("OMT temperature");
	//	label	not set for b1_omt_temperature
	//	unit	not set for b1_omt_temperature
	//	standard_unit	not set for b1_omt_temperature
	//	display_unit	not set for b1_omt_temperature
	//	format	not set for b1_omt_temperature
	//	max_value	not set for b1_omt_temperature
	//	min_value	not set for b1_omt_temperature
	//	max_alarm	not set for b1_omt_temperature
	//	min_alarm	not set for b1_omt_temperature
	//	max_warning	not set for b1_omt_temperature
	//	min_warning	not set for b1_omt_temperature
	//	delta_t	not set for b1_omt_temperature
	//	delta_val	not set for b1_omt_temperature
	b1_omt_temperature_prop.set_event_period("3000");
	
	b1_omt_temperature->set_default_properties(b1_omt_temperature_prop);
	b1_omt_temperature->set_polling_period(3000);
	b1_omt_temperature->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b1_omt_temperature);

	//	Attribute : b2_omt_temperature
	b2_omt_temperatureAttrib	*b2_omt_temperature = new b2_omt_temperatureAttrib();
	Tango::UserDefaultAttrProp	b2_omt_temperature_prop;
	b2_omt_temperature_prop.set_description("OMT temperature");
	//	label	not set for b2_omt_temperature
	//	unit	not set for b2_omt_temperature
	//	standard_unit	not set for b2_omt_temperature
	//	display_unit	not set for b2_omt_temperature
	//	format	not set for b2_omt_temperature
	//	max_value	not set for b2_omt_temperature
	//	min_value	not set for b2_omt_temperature
	//	max_alarm	not set for b2_omt_temperature
	//	min_alarm	not set for b2_omt_temperature
	//	max_warning	not set for b2_omt_temperature
	//	min_warning	not set for b2_omt_temperature
	//	delta_t	not set for b2_omt_temperature
	//	delta_val	not set for b2_omt_temperature
	b2_omt_temperature_prop.set_event_period("3000");
	
	b2_omt_temperature->set_default_properties(b2_omt_temperature_prop);
	b2_omt_temperature->set_polling_period(3000);
	b2_omt_temperature->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b2_omt_temperature);

	//	Attribute : b3_omt_temperature
	b3_omt_temperatureAttrib	*b3_omt_temperature = new b3_omt_temperatureAttrib();
	Tango::UserDefaultAttrProp	b3_omt_temperature_prop;
	b3_omt_temperature_prop.set_description("OMT temperature");
	//	label	not set for b3_omt_temperature
	//	unit	not set for b3_omt_temperature
	//	standard_unit	not set for b3_omt_temperature
	//	display_unit	not set for b3_omt_temperature
	//	format	not set for b3_omt_temperature
	//	max_value	not set for b3_omt_temperature
	//	min_value	not set for b3_omt_temperature
	//	max_alarm	not set for b3_omt_temperature
	//	min_alarm	not set for b3_omt_temperature
	//	max_warning	not set for b3_omt_temperature
	//	min_warning	not set for b3_omt_temperature
	//	delta_t	not set for b3_omt_temperature
	//	delta_val	not set for b3_omt_temperature
	b3_omt_temperature_prop.set_event_period("3000");
	
	b3_omt_temperature->set_default_properties(b3_omt_temperature_prop);
	b3_omt_temperature->set_polling_period(3000);
	b3_omt_temperature->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b3_omt_temperature);

	//	Attribute : b4_omt_temperature
	b4_omt_temperatureAttrib	*b4_omt_temperature = new b4_omt_temperatureAttrib();
	Tango::UserDefaultAttrProp	b4_omt_temperature_prop;
	b4_omt_temperature_prop.set_description("OMT temperature");
	//	label	not set for b4_omt_temperature
	//	unit	not set for b4_omt_temperature
	//	standard_unit	not set for b4_omt_temperature
	//	display_unit	not set for b4_omt_temperature
	//	format	not set for b4_omt_temperature
	//	max_value	not set for b4_omt_temperature
	//	min_value	not set for b4_omt_temperature
	//	max_alarm	not set for b4_omt_temperature
	//	min_alarm	not set for b4_omt_temperature
	//	max_warning	not set for b4_omt_temperature
	//	min_warning	not set for b4_omt_temperature
	//	delta_t	not set for b4_omt_temperature
	//	delta_val	not set for b4_omt_temperature
	b4_omt_temperature_prop.set_event_period("3000");
	
	b4_omt_temperature->set_default_properties(b4_omt_temperature_prop);
	b4_omt_temperature->set_polling_period(3000);
	b4_omt_temperature->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b4_omt_temperature);

	//	Attribute : b5_omt_temperature
	b5_omt_temperatureAttrib	*b5_omt_temperature = new b5_omt_temperatureAttrib();
	Tango::UserDefaultAttrProp	b5_omt_temperature_prop;
	b5_omt_temperature_prop.set_description("OMT temperature");
	//	label	not set for b5_omt_temperature
	//	unit	not set for b5_omt_temperature
	//	standard_unit	not set for b5_omt_temperature
	//	display_unit	not set for b5_omt_temperature
	//	format	not set for b5_omt_temperature
	//	max_value	not set for b5_omt_temperature
	//	min_value	not set for b5_omt_temperature
	//	max_alarm	not set for b5_omt_temperature
	//	min_alarm	not set for b5_omt_temperature
	//	max_warning	not set for b5_omt_temperature
	//	min_warning	not set for b5_omt_temperature
	//	delta_t	not set for b5_omt_temperature
	//	delta_val	not set for b5_omt_temperature
	b5_omt_temperature_prop.set_event_period("3000");
	
	b5_omt_temperature->set_default_properties(b5_omt_temperature_prop);
	b5_omt_temperature->set_polling_period(3000);
	b5_omt_temperature->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b5_omt_temperature);

	//	Attribute : b1_cryocool_stage1Temp
	b1_cryocool_stage1TempAttrib	*b1_cryocool_stage1temp = new b1_cryocool_stage1TempAttrib();
	Tango::UserDefaultAttrProp	b1_cryocool_stage1temp_prop;
	b1_cryocool_stage1temp_prop.set_description("Cryocooler 1st stage temperature");
	//	label	not set for b1_cryocool_stage1Temp
	//	unit	not set for b1_cryocool_stage1Temp
	//	standard_unit	not set for b1_cryocool_stage1Temp
	//	display_unit	not set for b1_cryocool_stage1Temp
	//	format	not set for b1_cryocool_stage1Temp
	//	max_value	not set for b1_cryocool_stage1Temp
	//	min_value	not set for b1_cryocool_stage1Temp
	//	max_alarm	not set for b1_cryocool_stage1Temp
	//	min_alarm	not set for b1_cryocool_stage1Temp
	//	max_warning	not set for b1_cryocool_stage1Temp
	//	min_warning	not set for b1_cryocool_stage1Temp
	//	delta_t	not set for b1_cryocool_stage1Temp
	//	delta_val	not set for b1_cryocool_stage1Temp
	b1_cryocool_stage1temp_prop.set_event_period("3000");
	
	b1_cryocool_stage1temp->set_default_properties(b1_cryocool_stage1temp_prop);
	b1_cryocool_stage1temp->set_polling_period(3000);
	b1_cryocool_stage1temp->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b1_cryocool_stage1temp);

	//	Attribute : b2_cryocool_stage1Temp
	b2_cryocool_stage1TempAttrib	*b2_cryocool_stage1temp = new b2_cryocool_stage1TempAttrib();
	Tango::UserDefaultAttrProp	b2_cryocool_stage1temp_prop;
	b2_cryocool_stage1temp_prop.set_description("Cryocooler 1st stage temperature");
	//	label	not set for b2_cryocool_stage1Temp
	//	unit	not set for b2_cryocool_stage1Temp
	//	standard_unit	not set for b2_cryocool_stage1Temp
	//	display_unit	not set for b2_cryocool_stage1Temp
	//	format	not set for b2_cryocool_stage1Temp
	//	max_value	not set for b2_cryocool_stage1Temp
	//	min_value	not set for b2_cryocool_stage1Temp
	//	max_alarm	not set for b2_cryocool_stage1Temp
	//	min_alarm	not set for b2_cryocool_stage1Temp
	//	max_warning	not set for b2_cryocool_stage1Temp
	//	min_warning	not set for b2_cryocool_stage1Temp
	//	delta_t	not set for b2_cryocool_stage1Temp
	//	delta_val	not set for b2_cryocool_stage1Temp
	b2_cryocool_stage1temp_prop.set_event_period("3000");
	
	b2_cryocool_stage1temp->set_default_properties(b2_cryocool_stage1temp_prop);
	b2_cryocool_stage1temp->set_polling_period(3000);
	b2_cryocool_stage1temp->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b2_cryocool_stage1temp);

	//	Attribute : b3_cryocool_stage1Temp
	b3_cryocool_stage1TempAttrib	*b3_cryocool_stage1temp = new b3_cryocool_stage1TempAttrib();
	Tango::UserDefaultAttrProp	b3_cryocool_stage1temp_prop;
	b3_cryocool_stage1temp_prop.set_description("Cryocooler 1st stage temperature");
	//	label	not set for b3_cryocool_stage1Temp
	//	unit	not set for b3_cryocool_stage1Temp
	//	standard_unit	not set for b3_cryocool_stage1Temp
	//	display_unit	not set for b3_cryocool_stage1Temp
	//	format	not set for b3_cryocool_stage1Temp
	//	max_value	not set for b3_cryocool_stage1Temp
	//	min_value	not set for b3_cryocool_stage1Temp
	//	max_alarm	not set for b3_cryocool_stage1Temp
	//	min_alarm	not set for b3_cryocool_stage1Temp
	//	max_warning	not set for b3_cryocool_stage1Temp
	//	min_warning	not set for b3_cryocool_stage1Temp
	//	delta_t	not set for b3_cryocool_stage1Temp
	//	delta_val	not set for b3_cryocool_stage1Temp
	b3_cryocool_stage1temp_prop.set_event_period("3000");
	
	b3_cryocool_stage1temp->set_default_properties(b3_cryocool_stage1temp_prop);
	b3_cryocool_stage1temp->set_polling_period(3000);
	b3_cryocool_stage1temp->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b3_cryocool_stage1temp);

	//	Attribute : b4_cryocool_stage1Temp
	b4_cryocool_stage1TempAttrib	*b4_cryocool_stage1temp = new b4_cryocool_stage1TempAttrib();
	Tango::UserDefaultAttrProp	b4_cryocool_stage1temp_prop;
	b4_cryocool_stage1temp_prop.set_description("Cryocooler 1st stage temperature");
	//	label	not set for b4_cryocool_stage1Temp
	//	unit	not set for b4_cryocool_stage1Temp
	//	standard_unit	not set for b4_cryocool_stage1Temp
	//	display_unit	not set for b4_cryocool_stage1Temp
	//	format	not set for b4_cryocool_stage1Temp
	//	max_value	not set for b4_cryocool_stage1Temp
	//	min_value	not set for b4_cryocool_stage1Temp
	//	max_alarm	not set for b4_cryocool_stage1Temp
	//	min_alarm	not set for b4_cryocool_stage1Temp
	//	max_warning	not set for b4_cryocool_stage1Temp
	//	min_warning	not set for b4_cryocool_stage1Temp
	//	delta_t	not set for b4_cryocool_stage1Temp
	//	delta_val	not set for b4_cryocool_stage1Temp
	b4_cryocool_stage1temp_prop.set_event_period("3000");
	
	b4_cryocool_stage1temp->set_default_properties(b4_cryocool_stage1temp_prop);
	b4_cryocool_stage1temp->set_polling_period(3000);
	b4_cryocool_stage1temp->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b4_cryocool_stage1temp);

	//	Attribute : b5_cryocool_stage1Temp
	b5_cryocool_stage1TempAttrib	*b5_cryocool_stage1temp = new b5_cryocool_stage1TempAttrib();
	Tango::UserDefaultAttrProp	b5_cryocool_stage1temp_prop;
	b5_cryocool_stage1temp_prop.set_description("Cryocooler 1st stage temperature");
	//	label	not set for b5_cryocool_stage1Temp
	//	unit	not set for b5_cryocool_stage1Temp
	//	standard_unit	not set for b5_cryocool_stage1Temp
	//	display_unit	not set for b5_cryocool_stage1Temp
	//	format	not set for b5_cryocool_stage1Temp
	//	max_value	not set for b5_cryocool_stage1Temp
	//	min_value	not set for b5_cryocool_stage1Temp
	//	max_alarm	not set for b5_cryocool_stage1Temp
	//	min_alarm	not set for b5_cryocool_stage1Temp
	//	max_warning	not set for b5_cryocool_stage1Temp
	//	min_warning	not set for b5_cryocool_stage1Temp
	//	delta_t	not set for b5_cryocool_stage1Temp
	//	delta_val	not set for b5_cryocool_stage1Temp
	b5_cryocool_stage1temp_prop.set_event_period("3000");
	
	b5_cryocool_stage1temp->set_default_properties(b5_cryocool_stage1temp_prop);
	b5_cryocool_stage1temp->set_polling_period(3000);
	b5_cryocool_stage1temp->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b5_cryocool_stage1temp);

	//	Attribute : b1_cryostat_bodyTemp
	b1_cryostat_bodyTempAttrib	*b1_cryostat_bodytemp = new b1_cryostat_bodyTempAttrib();
	Tango::UserDefaultAttrProp	b1_cryostat_bodytemp_prop;
	b1_cryostat_bodytemp_prop.set_description("Cryostat body temperature");
	//	label	not set for b1_cryostat_bodyTemp
	//	unit	not set for b1_cryostat_bodyTemp
	//	standard_unit	not set for b1_cryostat_bodyTemp
	//	display_unit	not set for b1_cryostat_bodyTemp
	//	format	not set for b1_cryostat_bodyTemp
	//	max_value	not set for b1_cryostat_bodyTemp
	//	min_value	not set for b1_cryostat_bodyTemp
	//	max_alarm	not set for b1_cryostat_bodyTemp
	//	min_alarm	not set for b1_cryostat_bodyTemp
	//	max_warning	not set for b1_cryostat_bodyTemp
	//	min_warning	not set for b1_cryostat_bodyTemp
	//	delta_t	not set for b1_cryostat_bodyTemp
	//	delta_val	not set for b1_cryostat_bodyTemp
	b1_cryostat_bodytemp_prop.set_event_period("3000");
	
	b1_cryostat_bodytemp->set_default_properties(b1_cryostat_bodytemp_prop);
	b1_cryostat_bodytemp->set_polling_period(3000);
	b1_cryostat_bodytemp->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b1_cryostat_bodytemp);

	//	Attribute : b2_cryostat_bodyTemp
	b2_cryostat_bodyTempAttrib	*b2_cryostat_bodytemp = new b2_cryostat_bodyTempAttrib();
	Tango::UserDefaultAttrProp	b2_cryostat_bodytemp_prop;
	b2_cryostat_bodytemp_prop.set_description("Cryostat body temperature");
	//	label	not set for b2_cryostat_bodyTemp
	//	unit	not set for b2_cryostat_bodyTemp
	//	standard_unit	not set for b2_cryostat_bodyTemp
	//	display_unit	not set for b2_cryostat_bodyTemp
	//	format	not set for b2_cryostat_bodyTemp
	//	max_value	not set for b2_cryostat_bodyTemp
	//	min_value	not set for b2_cryostat_bodyTemp
	//	max_alarm	not set for b2_cryostat_bodyTemp
	//	min_alarm	not set for b2_cryostat_bodyTemp
	//	max_warning	not set for b2_cryostat_bodyTemp
	//	min_warning	not set for b2_cryostat_bodyTemp
	//	delta_t	not set for b2_cryostat_bodyTemp
	//	delta_val	not set for b2_cryostat_bodyTemp
	b2_cryostat_bodytemp_prop.set_event_period("3000");
	
	b2_cryostat_bodytemp->set_default_properties(b2_cryostat_bodytemp_prop);
	b2_cryostat_bodytemp->set_polling_period(3000);
	b2_cryostat_bodytemp->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b2_cryostat_bodytemp);

	//	Attribute : b345_cryostat_bodyTemp
	b345_cryostat_bodyTempAttrib	*b345_cryostat_bodytemp = new b345_cryostat_bodyTempAttrib();
	Tango::UserDefaultAttrProp	b345_cryostat_bodytemp_prop;
	b345_cryostat_bodytemp_prop.set_description("Cryostat body temperature");
	//	label	not set for b345_cryostat_bodyTemp
	//	unit	not set for b345_cryostat_bodyTemp
	//	standard_unit	not set for b345_cryostat_bodyTemp
	//	display_unit	not set for b345_cryostat_bodyTemp
	//	format	not set for b345_cryostat_bodyTemp
	//	max_value	not set for b345_cryostat_bodyTemp
	//	min_value	not set for b345_cryostat_bodyTemp
	//	max_alarm	not set for b345_cryostat_bodyTemp
	//	min_alarm	not set for b345_cryostat_bodyTemp
	//	max_warning	not set for b345_cryostat_bodyTemp
	//	min_warning	not set for b345_cryostat_bodyTemp
	//	delta_t	not set for b345_cryostat_bodyTemp
	//	delta_val	not set for b345_cryostat_bodyTemp
	b345_cryostat_bodytemp_prop.set_event_period("3000");
	
	b345_cryostat_bodytemp->set_default_properties(b345_cryostat_bodytemp_prop);
	b345_cryostat_bodytemp->set_polling_period(3000);
	b345_cryostat_bodytemp->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b345_cryostat_bodytemp);

	//	Attribute : b1_h_meanGain
	b1_h_meanGainAttrib	*b1_h_meangain = new b1_h_meanGainAttrib();
	Tango::UserDefaultAttrProp	b1_h_meangain_prop;
	b1_h_meangain_prop.set_description("H-chan LNA mean gain extracted from ConfigData.ini");
	//	label	not set for b1_h_meanGain
	//	unit	not set for b1_h_meanGain
	//	standard_unit	not set for b1_h_meanGain
	//	display_unit	not set for b1_h_meanGain
	//	format	not set for b1_h_meanGain
	//	max_value	not set for b1_h_meanGain
	//	min_value	not set for b1_h_meanGain
	//	max_alarm	not set for b1_h_meanGain
	//	min_alarm	not set for b1_h_meanGain
	//	max_warning	not set for b1_h_meanGain
	//	min_warning	not set for b1_h_meanGain
	//	delta_t	not set for b1_h_meanGain
	//	delta_val	not set for b1_h_meanGain
	b1_h_meangain_prop.set_event_period("3000");
	
	b1_h_meangain->set_default_properties(b1_h_meangain_prop);
	b1_h_meangain->set_polling_period(3000);
	b1_h_meangain->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b1_h_meangain);

	//	Attribute : b2_h_meanGain
	b2_h_meanGainAttrib	*b2_h_meangain = new b2_h_meanGainAttrib();
	Tango::UserDefaultAttrProp	b2_h_meangain_prop;
	b2_h_meangain_prop.set_description("H-chan LNA mean gain extracted from ConfigData.ini");
	//	label	not set for b2_h_meanGain
	//	unit	not set for b2_h_meanGain
	//	standard_unit	not set for b2_h_meanGain
	//	display_unit	not set for b2_h_meanGain
	//	format	not set for b2_h_meanGain
	//	max_value	not set for b2_h_meanGain
	//	min_value	not set for b2_h_meanGain
	//	max_alarm	not set for b2_h_meanGain
	//	min_alarm	not set for b2_h_meanGain
	//	max_warning	not set for b2_h_meanGain
	//	min_warning	not set for b2_h_meanGain
	//	delta_t	not set for b2_h_meanGain
	//	delta_val	not set for b2_h_meanGain
	b2_h_meangain_prop.set_event_period("3000");
	
	b2_h_meangain->set_default_properties(b2_h_meangain_prop);
	b2_h_meangain->set_polling_period(3000);
	b2_h_meangain->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b2_h_meangain);

	//	Attribute : b3_h_meanGain
	b3_h_meanGainAttrib	*b3_h_meangain = new b3_h_meanGainAttrib();
	Tango::UserDefaultAttrProp	b3_h_meangain_prop;
	b3_h_meangain_prop.set_description("H-chan LNA mean gain extracted from ConfigData.ini");
	//	label	not set for b3_h_meanGain
	//	unit	not set for b3_h_meanGain
	//	standard_unit	not set for b3_h_meanGain
	//	display_unit	not set for b3_h_meanGain
	//	format	not set for b3_h_meanGain
	//	max_value	not set for b3_h_meanGain
	//	min_value	not set for b3_h_meanGain
	//	max_alarm	not set for b3_h_meanGain
	//	min_alarm	not set for b3_h_meanGain
	//	max_warning	not set for b3_h_meanGain
	//	min_warning	not set for b3_h_meanGain
	//	delta_t	not set for b3_h_meanGain
	//	delta_val	not set for b3_h_meanGain
	b3_h_meangain_prop.set_event_period("3000");
	
	b3_h_meangain->set_default_properties(b3_h_meangain_prop);
	b3_h_meangain->set_polling_period(3000);
	b3_h_meangain->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b3_h_meangain);

	//	Attribute : b4_h_meanGain
	b4_h_meanGainAttrib	*b4_h_meangain = new b4_h_meanGainAttrib();
	Tango::UserDefaultAttrProp	b4_h_meangain_prop;
	b4_h_meangain_prop.set_description("H-chan LNA mean gain extracted from ConfigData.ini");
	//	label	not set for b4_h_meanGain
	//	unit	not set for b4_h_meanGain
	//	standard_unit	not set for b4_h_meanGain
	//	display_unit	not set for b4_h_meanGain
	//	format	not set for b4_h_meanGain
	//	max_value	not set for b4_h_meanGain
	//	min_value	not set for b4_h_meanGain
	//	max_alarm	not set for b4_h_meanGain
	//	min_alarm	not set for b4_h_meanGain
	//	max_warning	not set for b4_h_meanGain
	//	min_warning	not set for b4_h_meanGain
	//	delta_t	not set for b4_h_meanGain
	//	delta_val	not set for b4_h_meanGain
	
	b4_h_meangain->set_default_properties(b4_h_meangain_prop);
	b4_h_meangain->set_polling_period(3000);
	b4_h_meangain->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b4_h_meangain);

	//	Attribute : b5_h_meanGain
	b5_h_meanGainAttrib	*b5_h_meangain = new b5_h_meanGainAttrib();
	Tango::UserDefaultAttrProp	b5_h_meangain_prop;
	b5_h_meangain_prop.set_description("H-chan LNA mean gain extracted from ConfigData.ini");
	//	label	not set for b5_h_meanGain
	//	unit	not set for b5_h_meanGain
	//	standard_unit	not set for b5_h_meanGain
	//	display_unit	not set for b5_h_meanGain
	//	format	not set for b5_h_meanGain
	//	max_value	not set for b5_h_meanGain
	//	min_value	not set for b5_h_meanGain
	//	max_alarm	not set for b5_h_meanGain
	//	min_alarm	not set for b5_h_meanGain
	//	max_warning	not set for b5_h_meanGain
	//	min_warning	not set for b5_h_meanGain
	//	delta_t	not set for b5_h_meanGain
	//	delta_val	not set for b5_h_meanGain
	b5_h_meangain_prop.set_event_period("3000");
	
	b5_h_meangain->set_default_properties(b5_h_meangain_prop);
	b5_h_meangain->set_polling_period(3000);
	b5_h_meangain->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b5_h_meangain);

	//	Attribute : b1_v_meanGain
	b1_v_meanGainAttrib	*b1_v_meangain = new b1_v_meanGainAttrib();
	Tango::UserDefaultAttrProp	b1_v_meangain_prop;
	b1_v_meangain_prop.set_description("V-chan LNA mean gain extracted from ConfigData.ini");
	//	label	not set for b1_v_meanGain
	//	unit	not set for b1_v_meanGain
	//	standard_unit	not set for b1_v_meanGain
	//	display_unit	not set for b1_v_meanGain
	//	format	not set for b1_v_meanGain
	//	max_value	not set for b1_v_meanGain
	//	min_value	not set for b1_v_meanGain
	//	max_alarm	not set for b1_v_meanGain
	//	min_alarm	not set for b1_v_meanGain
	//	max_warning	not set for b1_v_meanGain
	//	min_warning	not set for b1_v_meanGain
	//	delta_t	not set for b1_v_meanGain
	//	delta_val	not set for b1_v_meanGain
	b1_v_meangain_prop.set_event_period("3000");
	
	b1_v_meangain->set_default_properties(b1_v_meangain_prop);
	b1_v_meangain->set_polling_period(3000);
	b1_v_meangain->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b1_v_meangain);

	//	Attribute : b2_v_meanGain
	b2_v_meanGainAttrib	*b2_v_meangain = new b2_v_meanGainAttrib();
	Tango::UserDefaultAttrProp	b2_v_meangain_prop;
	b2_v_meangain_prop.set_description("V-chan LNA mean gain extracted from ConfigData.ini");
	//	label	not set for b2_v_meanGain
	//	unit	not set for b2_v_meanGain
	//	standard_unit	not set for b2_v_meanGain
	//	display_unit	not set for b2_v_meanGain
	//	format	not set for b2_v_meanGain
	//	max_value	not set for b2_v_meanGain
	//	min_value	not set for b2_v_meanGain
	//	max_alarm	not set for b2_v_meanGain
	//	min_alarm	not set for b2_v_meanGain
	//	max_warning	not set for b2_v_meanGain
	//	min_warning	not set for b2_v_meanGain
	//	delta_t	not set for b2_v_meanGain
	//	delta_val	not set for b2_v_meanGain
	b2_v_meangain_prop.set_event_period("3000");
	
	b2_v_meangain->set_default_properties(b2_v_meangain_prop);
	b2_v_meangain->set_polling_period(3000);
	b2_v_meangain->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b2_v_meangain);

	//	Attribute : b3_v_meanGain
	b3_v_meanGainAttrib	*b3_v_meangain = new b3_v_meanGainAttrib();
	Tango::UserDefaultAttrProp	b3_v_meangain_prop;
	b3_v_meangain_prop.set_description("V-chan LNA mean gain extracted from ConfigData.ini");
	//	label	not set for b3_v_meanGain
	//	unit	not set for b3_v_meanGain
	//	standard_unit	not set for b3_v_meanGain
	//	display_unit	not set for b3_v_meanGain
	//	format	not set for b3_v_meanGain
	//	max_value	not set for b3_v_meanGain
	//	min_value	not set for b3_v_meanGain
	//	max_alarm	not set for b3_v_meanGain
	//	min_alarm	not set for b3_v_meanGain
	//	max_warning	not set for b3_v_meanGain
	//	min_warning	not set for b3_v_meanGain
	//	delta_t	not set for b3_v_meanGain
	//	delta_val	not set for b3_v_meanGain
	b3_v_meangain_prop.set_event_period("3000");
	
	b3_v_meangain->set_default_properties(b3_v_meangain_prop);
	b3_v_meangain->set_polling_period(3000);
	b3_v_meangain->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b3_v_meangain);

	//	Attribute : b4_v_meanGain
	b4_v_meanGainAttrib	*b4_v_meangain = new b4_v_meanGainAttrib();
	Tango::UserDefaultAttrProp	b4_v_meangain_prop;
	b4_v_meangain_prop.set_description("V-chan LNA mean gain extracted from ConfigData.ini");
	//	label	not set for b4_v_meanGain
	//	unit	not set for b4_v_meanGain
	//	standard_unit	not set for b4_v_meanGain
	//	display_unit	not set for b4_v_meanGain
	//	format	not set for b4_v_meanGain
	//	max_value	not set for b4_v_meanGain
	//	min_value	not set for b4_v_meanGain
	//	max_alarm	not set for b4_v_meanGain
	//	min_alarm	not set for b4_v_meanGain
	//	max_warning	not set for b4_v_meanGain
	//	min_warning	not set for b4_v_meanGain
	//	delta_t	not set for b4_v_meanGain
	//	delta_val	not set for b4_v_meanGain
	b4_v_meangain_prop.set_event_period("3000");
	
	b4_v_meangain->set_default_properties(b4_v_meangain_prop);
	b4_v_meangain->set_polling_period(3000);
	b4_v_meangain->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b4_v_meangain);

	//	Attribute : b5_v_meanGain
	b5_v_meanGainAttrib	*b5_v_meangain = new b5_v_meanGainAttrib();
	Tango::UserDefaultAttrProp	b5_v_meangain_prop;
	b5_v_meangain_prop.set_description("V-chan LNA mean gain extracted from ConfigData.ini");
	//	label	not set for b5_v_meanGain
	//	unit	not set for b5_v_meanGain
	//	standard_unit	not set for b5_v_meanGain
	//	display_unit	not set for b5_v_meanGain
	//	format	not set for b5_v_meanGain
	//	max_value	not set for b5_v_meanGain
	//	min_value	not set for b5_v_meanGain
	//	max_alarm	not set for b5_v_meanGain
	//	min_alarm	not set for b5_v_meanGain
	//	max_warning	not set for b5_v_meanGain
	//	min_warning	not set for b5_v_meanGain
	//	delta_t	not set for b5_v_meanGain
	//	delta_val	not set for b5_v_meanGain
	b5_v_meangain_prop.set_event_period("3000");
	
	b5_v_meangain->set_default_properties(b5_v_meangain_prop);
	b5_v_meangain->set_polling_period(3000);
	b5_v_meangain->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b5_v_meangain);

	//	Attribute : b1_lna_h_powerState
	b1_lna_h_powerStateAttrib	*b1_lna_h_powerstate = new b1_lna_h_powerStateAttrib();
	Tango::UserDefaultAttrProp	b1_lna_h_powerstate_prop;
	b1_lna_h_powerstate_prop.set_description("H-channel LNA power enabled/disabled");
	//	label	not set for b1_lna_h_powerState
	//	unit	not set for b1_lna_h_powerState
	//	standard_unit	not set for b1_lna_h_powerState
	//	display_unit	not set for b1_lna_h_powerState
	//	format	not set for b1_lna_h_powerState
	//	max_value	not set for b1_lna_h_powerState
	//	min_value	not set for b1_lna_h_powerState
	//	max_alarm	not set for b1_lna_h_powerState
	//	min_alarm	not set for b1_lna_h_powerState
	//	max_warning	not set for b1_lna_h_powerState
	//	min_warning	not set for b1_lna_h_powerState
	//	delta_t	not set for b1_lna_h_powerState
	//	delta_val	not set for b1_lna_h_powerState
	
	b1_lna_h_powerstate->set_default_properties(b1_lna_h_powerstate_prop);
	//	Not Polled
	b1_lna_h_powerstate->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b1_lna_h_powerstate);

	//	Attribute : b2_lna_h_powerState
	b2_lna_h_powerStateAttrib	*b2_lna_h_powerstate = new b2_lna_h_powerStateAttrib();
	Tango::UserDefaultAttrProp	b2_lna_h_powerstate_prop;
	b2_lna_h_powerstate_prop.set_description("H-channel LNA power enabled/disabled");
	//	label	not set for b2_lna_h_powerState
	//	unit	not set for b2_lna_h_powerState
	//	standard_unit	not set for b2_lna_h_powerState
	//	display_unit	not set for b2_lna_h_powerState
	//	format	not set for b2_lna_h_powerState
	//	max_value	not set for b2_lna_h_powerState
	//	min_value	not set for b2_lna_h_powerState
	//	max_alarm	not set for b2_lna_h_powerState
	//	min_alarm	not set for b2_lna_h_powerState
	//	max_warning	not set for b2_lna_h_powerState
	//	min_warning	not set for b2_lna_h_powerState
	//	delta_t	not set for b2_lna_h_powerState
	//	delta_val	not set for b2_lna_h_powerState
	
	b2_lna_h_powerstate->set_default_properties(b2_lna_h_powerstate_prop);
	//	Not Polled
	b2_lna_h_powerstate->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b2_lna_h_powerstate);

	//	Attribute : b3_lna_h_powerState
	b3_lna_h_powerStateAttrib	*b3_lna_h_powerstate = new b3_lna_h_powerStateAttrib();
	Tango::UserDefaultAttrProp	b3_lna_h_powerstate_prop;
	b3_lna_h_powerstate_prop.set_description("H-channel LNA power enabled/disabled");
	//	label	not set for b3_lna_h_powerState
	//	unit	not set for b3_lna_h_powerState
	//	standard_unit	not set for b3_lna_h_powerState
	//	display_unit	not set for b3_lna_h_powerState
	//	format	not set for b3_lna_h_powerState
	//	max_value	not set for b3_lna_h_powerState
	//	min_value	not set for b3_lna_h_powerState
	//	max_alarm	not set for b3_lna_h_powerState
	//	min_alarm	not set for b3_lna_h_powerState
	//	max_warning	not set for b3_lna_h_powerState
	//	min_warning	not set for b3_lna_h_powerState
	//	delta_t	not set for b3_lna_h_powerState
	//	delta_val	not set for b3_lna_h_powerState
	
	b3_lna_h_powerstate->set_default_properties(b3_lna_h_powerstate_prop);
	//	Not Polled
	b3_lna_h_powerstate->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b3_lna_h_powerstate);

	//	Attribute : b4_lna_h_powerState
	b4_lna_h_powerStateAttrib	*b4_lna_h_powerstate = new b4_lna_h_powerStateAttrib();
	Tango::UserDefaultAttrProp	b4_lna_h_powerstate_prop;
	b4_lna_h_powerstate_prop.set_description("H-channel LNA power enabled/disabled");
	//	label	not set for b4_lna_h_powerState
	//	unit	not set for b4_lna_h_powerState
	//	standard_unit	not set for b4_lna_h_powerState
	//	display_unit	not set for b4_lna_h_powerState
	//	format	not set for b4_lna_h_powerState
	//	max_value	not set for b4_lna_h_powerState
	//	min_value	not set for b4_lna_h_powerState
	//	max_alarm	not set for b4_lna_h_powerState
	//	min_alarm	not set for b4_lna_h_powerState
	//	max_warning	not set for b4_lna_h_powerState
	//	min_warning	not set for b4_lna_h_powerState
	//	delta_t	not set for b4_lna_h_powerState
	//	delta_val	not set for b4_lna_h_powerState
	
	b4_lna_h_powerstate->set_default_properties(b4_lna_h_powerstate_prop);
	b4_lna_h_powerstate->set_polling_period(3000);
	b4_lna_h_powerstate->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b4_lna_h_powerstate);

	//	Attribute : b5_lna_h_powerState
	b5_lna_h_powerStateAttrib	*b5_lna_h_powerstate = new b5_lna_h_powerStateAttrib();
	Tango::UserDefaultAttrProp	b5_lna_h_powerstate_prop;
	b5_lna_h_powerstate_prop.set_description("H-channel LNA power enabled/disabled");
	//	label	not set for b5_lna_h_powerState
	//	unit	not set for b5_lna_h_powerState
	//	standard_unit	not set for b5_lna_h_powerState
	//	display_unit	not set for b5_lna_h_powerState
	//	format	not set for b5_lna_h_powerState
	//	max_value	not set for b5_lna_h_powerState
	//	min_value	not set for b5_lna_h_powerState
	//	max_alarm	not set for b5_lna_h_powerState
	//	min_alarm	not set for b5_lna_h_powerState
	//	max_warning	not set for b5_lna_h_powerState
	//	min_warning	not set for b5_lna_h_powerState
	//	delta_t	not set for b5_lna_h_powerState
	//	delta_val	not set for b5_lna_h_powerState
	
	b5_lna_h_powerstate->set_default_properties(b5_lna_h_powerstate_prop);
	//	Not Polled
	b5_lna_h_powerstate->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(b5_lna_h_powerstate);


	//	Create a list of static attributes
	create_static_attribute_list(get_class_attr()->get_attr_list());
	/*----- PROTECTED REGION ID(SPFEmulatorClass::attribute_factory_after) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	SPFEmulatorClass::attribute_factory_after
}
//--------------------------------------------------------
/**
 *	Method      : SPFEmulatorClass::pipe_factory()
 *	Description : Create the pipe object(s)
 *                and store them in the pipe list
 */
//--------------------------------------------------------
void SPFEmulatorClass::pipe_factory()
{
	/*----- PROTECTED REGION ID(SPFEmulatorClass::pipe_factory_before) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	SPFEmulatorClass::pipe_factory_before
	/*----- PROTECTED REGION ID(SPFEmulatorClass::pipe_factory_after) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	SPFEmulatorClass::pipe_factory_after
}
//--------------------------------------------------------
/**
 *	Method      : SPFEmulatorClass::command_factory()
 *	Description : Create the command object(s)
 *                and store them in the command list
 */
//--------------------------------------------------------
void SPFEmulatorClass::command_factory()
{
	/*----- PROTECTED REGION ID(SPFEmulatorClass::command_factory_before) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	SPFEmulatorClass::command_factory_before
	//	Call command_factory for inherited class
	SEEmulatorBase_ns::SEEmulatorBaseClass::command_factory();



	//	Command IlluminateLNA
	IlluminateLNAClass	*pIlluminateLNACmd =
		new IlluminateLNAClass("IlluminateLNA",
			Tango::DEV_SHORT, Tango::DEVVAR_LONGSTRINGARRAY,
			"Major component band {B1,B2,B3,B4,B5}",
			"",
			Tango::OPERATOR);
	command_list.push_back(pIlluminateLNACmd);

	//	Command SetLNAHPowerState
	SetLNAHPowerStateClass	*pSetLNAHPowerStateCmd =
		new SetLNAHPowerStateClass("SetLNAHPowerState",
			Tango::DEV_SHORT, Tango::DEVVAR_LONGSTRINGARRAY,
			"Enable: 1\ndisable: 0",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSetLNAHPowerStateCmd);

	//	Command SetLNAVPowerState
	SetLNAVPowerStateClass	*pSetLNAVPowerStateCmd =
		new SetLNAVPowerStateClass("SetLNAVPowerState",
			Tango::DEV_SHORT, Tango::DEVVAR_LONGSTRINGARRAY,
			"Enable: 1\nDisable: 0",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSetLNAVPowerStateCmd);

	//	Command SetAmp2HPowerState
	SetAmp2HPowerStateClass	*pSetAmp2HPowerStateCmd =
		new SetAmp2HPowerStateClass("SetAmp2HPowerState",
			Tango::DEVVAR_SHORTARRAY, Tango::DEVVAR_LONGSTRINGARRAY,
			"[0]: majorComponentBand\n[1]: enable/disable",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSetAmp2HPowerStateCmd);

	//	Command SetAmp2VPowerState
	SetAmp2VPowerStateClass	*pSetAmp2VPowerStateCmd =
		new SetAmp2VPowerStateClass("SetAmp2VPowerState",
			Tango::DEVVAR_SHORTARRAY, Tango::DEVVAR_LONGSTRINGARRAY,
			"[0]: Major component state",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSetAmp2VPowerStateCmd);

	//	Command SetRFE1TempDefault
	SetRFE1TempDefaultClass	*pSetRFE1TempDefaultCmd =
		new SetRFE1TempDefaultClass("SetRFE1TempDefault",
			Tango::DEVVAR_SHORTARRAY, Tango::DEVVAR_LONGSTRINGARRAY,
			"[0]: Major component band {B1, B2, B3, B4, B5}\n[1]: Rfe1 temp default {?disabled? | ?sp1? | ?sp2? | ?sp3? | ?sp4?| ?sp5? | ?sp6?}",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSetRFE1TempDefaultCmd);

	//	Command SetRFE1TempSetPoint
	SetRFE1TempSetPointClass	*pSetRFE1TempSetPointCmd =
		new SetRFE1TempSetPointClass("SetRFE1TempSetPoint",
			Tango::DEVVAR_SHORTARRAY, Tango::DEV_VOID,
			"[0]: Major component band {B1,B2,B3,B4,B5}\n[1]: temp set point {?disable? | ?sp1? | ?sp2? | ?sp3? | ?sp4? | ?sp5? | ?sp6? | ?warm?}",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSetRFE1TempSetPointCmd);

	//	Command SetRFE2TempCntrState
	SetRFE2TempCntrStateClass	*pSetRFE2TempCntrStateCmd =
		new SetRFE2TempCntrStateClass("SetRFE2TempCntrState",
			Tango::DEVVAR_SHORTARRAY, Tango::DEVVAR_LONGSTRINGARRAY,
			"[0]: Major component band {B1,B2,B3,B4,B5,B6}\n[1]: Enable/disable",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSetRFE2TempCntrStateCmd);

	//	Command SetCryoMotorState
	SetCryoMotorStateClass	*pSetCryoMotorStateCmd =
		new SetCryoMotorStateClass("SetCryoMotorState",
			Tango::DEVVAR_SHORTARRAY, Tango::DEVVAR_LONGSTRINGARRAY,
			"[0]: cryoStat {B1,B2,B345}\n[1]: enable/disable",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSetCryoMotorStateCmd);

	//	Command SetCryoMotorSpeed
	SetCryoMotorSpeedClass	*pSetCryoMotorSpeedCmd =
		new SetCryoMotorSpeedClass("SetCryoMotorSpeed",
			Tango::DEVVAR_SHORTARRAY, Tango::DEVVAR_LONGSTRINGARRAY,
			"[0]: cryo stat {B1,B2,B345}\n[1]: Speed in rpm {45,46,...90}",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSetCryoMotorSpeedCmd);

	//	Command SetVaValveState
	SetVaValveStateClass	*pSetVaValveStateCmd =
		new SetVaValveStateClass("SetVaValveState",
			Tango::DEV_SHORT, Tango::DEVVAR_LONGSTRINGARRAY,
			"Enable/disable",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSetVaValveStateCmd);

	//	Command SetSubElementMode
	SetSubElementModeClass	*pSetSubElementModeCmd =
		new SetSubElementModeClass("SetSubElementMode",
			Tango::DEV_SHORT, Tango::DEV_VOID,
			"{?Operate? | ?Standby_LP? | `Maintenance`}",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSetSubElementModeCmd);

	//	Command SetFeedMode
	SetFeedModeClass	*pSetFeedModeCmd =
		new SetFeedModeClass("SetFeedMode",
			Tango::DEVVAR_SHORTARRAY, Tango::DEVVAR_LONGSTRINGARRAY,
			"[0]: Major component band {B1,B2,B3,B4,B5}\n[1]: seFeedMode {?Operate? | ?Standby_LP?}",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSetFeedModeCmd);

	/*----- PROTECTED REGION ID(SPFEmulatorClass::command_factory_after) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	SPFEmulatorClass::command_factory_after
}

//===================================================================
//	Dynamic attributes related methods
//===================================================================

//--------------------------------------------------------
/**
 * method : 		SPFEmulatorClass::create_static_attribute_list
 * description : 	Create the a list of static attributes
 *
 * @param	att_list	the ceated attribute list
 */
//--------------------------------------------------------
void SPFEmulatorClass::create_static_attribute_list(vector<Tango::Attr *> &att_list)
{
	for (unsigned long i=0 ; i<att_list.size() ; i++)
	{
		string att_name(att_list[i]->get_name());
		transform(att_name.begin(), att_name.end(), att_name.begin(), ::tolower);
		defaultAttList.push_back(att_name);
	}

	cout2 << defaultAttList.size() << " attributes in default list" << endl;

	/*----- PROTECTED REGION ID(SPFEmulatorClass::create_static_att_list) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	SPFEmulatorClass::create_static_att_list
}


//--------------------------------------------------------
/**
 * method : 		SPFEmulatorClass::erase_dynamic_attributes
 * description : 	delete the dynamic attributes if any.
 *
 * @param	devlist_ptr	the device list pointer
 * @param	list of all attributes
 */
//--------------------------------------------------------
void SPFEmulatorClass::erase_dynamic_attributes(const Tango::DevVarStringArray *devlist_ptr, vector<Tango::Attr *> &att_list)
{
	Tango::Util *tg = Tango::Util::instance();

	for (unsigned long i=0 ; i<devlist_ptr->length() ; i++)
	{
		Tango::DeviceImpl *dev_impl = tg->get_device_by_name(((string)(*devlist_ptr)[i]).c_str());
		SPFEmulator *dev = static_cast<SPFEmulator *> (dev_impl);

		vector<Tango::Attribute *> &dev_att_list = dev->get_device_attr()->get_attribute_list();
		vector<Tango::Attribute *>::iterator ite_att;
		for (ite_att=dev_att_list.begin() ; ite_att != dev_att_list.end() ; ++ite_att)
		{
			string att_name((*ite_att)->get_name_lower());
			if ((att_name == "state") || (att_name == "status"))
				continue;
			vector<string>::iterator ite_str = find(defaultAttList.begin(), defaultAttList.end(), att_name);
			if (ite_str == defaultAttList.end())
			{
				cout2 << att_name << " is a UNWANTED dynamic attribute for device " << (*devlist_ptr)[i] << endl;
				Tango::Attribute &att = dev->get_device_attr()->get_attr_by_name(att_name.c_str());
				dev->remove_attribute(att_list[att.get_attr_idx()], true, false);
				--ite_att;
			}
		}
	}
	/*----- PROTECTED REGION ID(SPFEmulatorClass::erase_dynamic_attributes) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	SPFEmulatorClass::erase_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Method      : SPFEmulatorClass::get_attr_by_name()
 *	Description : returns Tango::Attr * object found by name
 */
//--------------------------------------------------------
Tango::Attr *SPFEmulatorClass::get_attr_object_by_name(vector<Tango::Attr *> &att_list, string attname)
{
	vector<Tango::Attr *>::iterator it;
	for (it=att_list.begin() ; it<att_list.end() ; ++it)
		if ((*it)->get_name()==attname)
			return (*it);
	//	Attr does not exist
	return NULL;
}


/*----- PROTECTED REGION ID(SPFEmulatorClass::Additional Methods) ENABLED START -----*/

/*----- PROTECTED REGION END -----*/	//	SPFEmulatorClass::Additional Methods
} //	namespace
